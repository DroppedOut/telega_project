
Middle_level_telega.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cdc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000048  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000160  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000510  20000000  080064c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000238c  20000510  080069d8  00020510  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  2000289c  080069d8  0002289c  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d2eb  00000000  00000000  00020539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001f8a  00000000  00000000  0002d824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004f2a  00000000  00000000  0002f7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  000346d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  00034ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000041da  00000000  00000000  000358b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004a11  00000000  00000000  00039a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003e49b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000020dc  00000000  00000000  0003e518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000510 	.word	0x20000510
 8000128:	00000000 	.word	0x00000000
 800012c:	08005dd0 	.word	0x08005dd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000514 	.word	0x20000514
 8000148:	08005dd0 	.word	0x08005dd0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f092 0f00 	teq	r2, #0
 800045a:	bf14      	ite	ne
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e720      	b.n	80002b4 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_ul2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f04f 0500 	mov.w	r5, #0
 8000482:	e00a      	b.n	800049a <__aeabi_l2d+0x16>

08000484 <__aeabi_l2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000492:	d502      	bpl.n	800049a <__aeabi_l2d+0x16>
 8000494:	4240      	negs	r0, r0
 8000496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a6:	f43f aedc 	beq.w	8000262 <__adddf3+0xe6>
 80004aa:	f04f 0203 	mov.w	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c2:	f1c2 0320 	rsb	r3, r2, #32
 80004c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ca:	fa20 f002 	lsr.w	r0, r0, r2
 80004ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d2:	ea40 000e 	orr.w	r0, r0, lr
 80004d6:	fa21 f102 	lsr.w	r1, r1, r2
 80004da:	4414      	add	r4, r2
 80004dc:	e6c1      	b.n	8000262 <__adddf3+0xe6>
 80004de:	bf00      	nop

080004e0 <__aeabi_dmul>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ee:	bf1d      	ittte	ne
 80004f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f4:	ea94 0f0c 	teqne	r4, ip
 80004f8:	ea95 0f0c 	teqne	r5, ip
 80004fc:	f000 f8de 	bleq	80006bc <__aeabi_dmul+0x1dc>
 8000500:	442c      	add	r4, r5
 8000502:	ea81 0603 	eor.w	r6, r1, r3
 8000506:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000512:	bf18      	it	ne
 8000514:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000520:	d038      	beq.n	8000594 <__aeabi_dmul+0xb4>
 8000522:	fba0 ce02 	umull	ip, lr, r0, r2
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000532:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000536:	f04f 0600 	mov.w	r6, #0
 800053a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053e:	f09c 0f00 	teq	ip, #0
 8000542:	bf18      	it	ne
 8000544:	f04e 0e01 	orrne.w	lr, lr, #1
 8000548:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800054c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000550:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000554:	d204      	bcs.n	8000560 <__aeabi_dmul+0x80>
 8000556:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055a:	416d      	adcs	r5, r5
 800055c:	eb46 0606 	adc.w	r6, r6, r6
 8000560:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000564:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000568:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800056c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000570:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000574:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000578:	bf88      	it	hi
 800057a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057e:	d81e      	bhi.n	80005be <__aeabi_dmul+0xde>
 8000580:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000584:	bf08      	it	eq
 8000586:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058a:	f150 0000 	adcs.w	r0, r0, #0
 800058e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000598:	ea46 0101 	orr.w	r1, r6, r1
 800059c:	ea40 0002 	orr.w	r0, r0, r2
 80005a0:	ea81 0103 	eor.w	r1, r1, r3
 80005a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a8:	bfc2      	ittt	gt
 80005aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	popgt	{r4, r5, r6, pc}
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f04f 0e00 	mov.w	lr, #0
 80005bc:	3c01      	subs	r4, #1
 80005be:	f300 80ab 	bgt.w	8000718 <__aeabi_dmul+0x238>
 80005c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c6:	bfde      	ittt	le
 80005c8:	2000      	movle	r0, #0
 80005ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ce:	bd70      	pople	{r4, r5, r6, pc}
 80005d0:	f1c4 0400 	rsb	r4, r4, #0
 80005d4:	3c20      	subs	r4, #32
 80005d6:	da35      	bge.n	8000644 <__aeabi_dmul+0x164>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc1b      	bgt.n	8000614 <__aeabi_dmul+0x134>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0520 	rsb	r5, r4, #32
 80005e4:	fa00 f305 	lsl.w	r3, r0, r5
 80005e8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ec:	fa01 f205 	lsl.w	r2, r1, r5
 80005f0:	ea40 0002 	orr.w	r0, r0, r2
 80005f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000600:	fa21 f604 	lsr.w	r6, r1, r4
 8000604:	eb42 0106 	adc.w	r1, r2, r6
 8000608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800060c:	bf08      	it	eq
 800060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f1c4 040c 	rsb	r4, r4, #12
 8000618:	f1c4 0520 	rsb	r5, r4, #32
 800061c:	fa00 f304 	lsl.w	r3, r0, r4
 8000620:	fa20 f005 	lsr.w	r0, r0, r5
 8000624:	fa01 f204 	lsl.w	r2, r1, r4
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000634:	f141 0100 	adc.w	r1, r1, #0
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f205 	lsl.w	r2, r0, r5
 800064c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000650:	fa20 f304 	lsr.w	r3, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea43 0302 	orr.w	r3, r3, r2
 800065c:	fa21 f004 	lsr.w	r0, r1, r4
 8000660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000664:	fa21 f204 	lsr.w	r2, r1, r4
 8000668:	ea20 0002 	bic.w	r0, r0, r2
 800066c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f094 0f00 	teq	r4, #0
 8000680:	d10f      	bne.n	80006a2 <__aeabi_dmul+0x1c2>
 8000682:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000686:	0040      	lsls	r0, r0, #1
 8000688:	eb41 0101 	adc.w	r1, r1, r1
 800068c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3c01      	subeq	r4, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1a6>
 8000696:	ea41 0106 	orr.w	r1, r1, r6
 800069a:	f095 0f00 	teq	r5, #0
 800069e:	bf18      	it	ne
 80006a0:	4770      	bxne	lr
 80006a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	eb43 0303 	adc.w	r3, r3, r3
 80006ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3d01      	subeq	r5, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1c6>
 80006b6:	ea43 0306 	orr.w	r3, r3, r6
 80006ba:	4770      	bx	lr
 80006bc:	ea94 0f0c 	teq	r4, ip
 80006c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c4:	bf18      	it	ne
 80006c6:	ea95 0f0c 	teqne	r5, ip
 80006ca:	d00c      	beq.n	80006e6 <__aeabi_dmul+0x206>
 80006cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d0:	bf18      	it	ne
 80006d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d6:	d1d1      	bne.n	800067c <__aeabi_dmul+0x19c>
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
 80006e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ea:	bf06      	itte	eq
 80006ec:	4610      	moveq	r0, r2
 80006ee:	4619      	moveq	r1, r3
 80006f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f4:	d019      	beq.n	800072a <__aeabi_dmul+0x24a>
 80006f6:	ea94 0f0c 	teq	r4, ip
 80006fa:	d102      	bne.n	8000702 <__aeabi_dmul+0x222>
 80006fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000700:	d113      	bne.n	800072a <__aeabi_dmul+0x24a>
 8000702:	ea95 0f0c 	teq	r5, ip
 8000706:	d105      	bne.n	8000714 <__aeabi_dmul+0x234>
 8000708:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800070c:	bf1c      	itt	ne
 800070e:	4610      	movne	r0, r2
 8000710:	4619      	movne	r1, r3
 8000712:	d10a      	bne.n	800072a <__aeabi_dmul+0x24a>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000724:	f04f 0000 	mov.w	r0, #0
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000732:	bd70      	pop	{r4, r5, r6, pc}

08000734 <__aeabi_ddiv>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000742:	bf1d      	ittte	ne
 8000744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000748:	ea94 0f0c 	teqne	r4, ip
 800074c:	ea95 0f0c 	teqne	r5, ip
 8000750:	f000 f8a7 	bleq	80008a2 <__aeabi_ddiv+0x16e>
 8000754:	eba4 0405 	sub.w	r4, r4, r5
 8000758:	ea81 0e03 	eor.w	lr, r1, r3
 800075c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000760:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000764:	f000 8088 	beq.w	8000878 <__aeabi_ddiv+0x144>
 8000768:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800076c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000770:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000774:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000778:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800077c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000780:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000784:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000788:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800078c:	429d      	cmp	r5, r3
 800078e:	bf08      	it	eq
 8000790:	4296      	cmpeq	r6, r2
 8000792:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000796:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079a:	d202      	bcs.n	80007a2 <__aeabi_ddiv+0x6e>
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	1ab6      	subs	r6, r6, r2
 80007a4:	eb65 0503 	sbc.w	r5, r5, r3
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000810:	ea55 0e06 	orrs.w	lr, r5, r6
 8000814:	d018      	beq.n	8000848 <__aeabi_ddiv+0x114>
 8000816:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000822:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000826:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000832:	d1c0      	bne.n	80007b6 <__aeabi_ddiv+0x82>
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	d10b      	bne.n	8000852 <__aeabi_ddiv+0x11e>
 800083a:	ea41 0100 	orr.w	r1, r1, r0
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000846:	e7b6      	b.n	80007b6 <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	bf04      	itt	eq
 800084e:	4301      	orreq	r1, r0
 8000850:	2000      	moveq	r0, #0
 8000852:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000856:	bf88      	it	hi
 8000858:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800085c:	f63f aeaf 	bhi.w	80005be <__aeabi_dmul+0xde>
 8000860:	ebb5 0c03 	subs.w	ip, r5, r3
 8000864:	bf04      	itt	eq
 8000866:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086e:	f150 0000 	adcs.w	r0, r0, #0
 8000872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000876:	bd70      	pop	{r4, r5, r6, pc}
 8000878:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800087c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000880:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000884:	bfc2      	ittt	gt
 8000886:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088e:	bd70      	popgt	{r4, r5, r6, pc}
 8000890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000894:	f04f 0e00 	mov.w	lr, #0
 8000898:	3c01      	subs	r4, #1
 800089a:	e690      	b.n	80005be <__aeabi_dmul+0xde>
 800089c:	ea45 0e06 	orr.w	lr, r5, r6
 80008a0:	e68d      	b.n	80005be <__aeabi_dmul+0xde>
 80008a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a6:	ea94 0f0c 	teq	r4, ip
 80008aa:	bf08      	it	eq
 80008ac:	ea95 0f0c 	teqeq	r5, ip
 80008b0:	f43f af3b 	beq.w	800072a <__aeabi_dmul+0x24a>
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	d10a      	bne.n	80008d0 <__aeabi_ddiv+0x19c>
 80008ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008be:	f47f af34 	bne.w	800072a <__aeabi_dmul+0x24a>
 80008c2:	ea95 0f0c 	teq	r5, ip
 80008c6:	f47f af25 	bne.w	8000714 <__aeabi_dmul+0x234>
 80008ca:	4610      	mov	r0, r2
 80008cc:	4619      	mov	r1, r3
 80008ce:	e72c      	b.n	800072a <__aeabi_dmul+0x24a>
 80008d0:	ea95 0f0c 	teq	r5, ip
 80008d4:	d106      	bne.n	80008e4 <__aeabi_ddiv+0x1b0>
 80008d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008da:	f43f aefd 	beq.w	80006d8 <__aeabi_dmul+0x1f8>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e722      	b.n	800072a <__aeabi_dmul+0x24a>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	f47f aec5 	bne.w	800067c <__aeabi_dmul+0x19c>
 80008f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f6:	f47f af0d 	bne.w	8000714 <__aeabi_dmul+0x234>
 80008fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fe:	f47f aeeb 	bne.w	80006d8 <__aeabi_dmul+0x1f8>
 8000902:	e712      	b.n	800072a <__aeabi_dmul+0x24a>

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__gesf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpsf2+0x4>
 80009aa:	bf00      	nop

080009ac <__lesf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpsf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpsf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ce:	d011      	beq.n	80009f4 <__cmpsf2+0x40>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009d6:	bf18      	it	ne
 80009d8:	ea90 0f01 	teqne	r0, r1
 80009dc:	bf58      	it	pl
 80009de:	ebb2 0003 	subspl.w	r0, r2, r3
 80009e2:	bf88      	it	hi
 80009e4:	17c8      	asrhi	r0, r1, #31
 80009e6:	bf38      	it	cc
 80009e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009ec:	bf18      	it	ne
 80009ee:	f040 0001 	orrne.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f8:	d102      	bne.n	8000a00 <__cmpsf2+0x4c>
 80009fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009fe:	d105      	bne.n	8000a0c <__cmpsf2+0x58>
 8000a00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a04:	d1e4      	bne.n	80009d0 <__cmpsf2+0x1c>
 8000a06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a0a:	d0e1      	beq.n	80009d0 <__cmpsf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cfrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4608      	mov	r0, r1
 8000a18:	4661      	mov	r1, ip
 8000a1a:	e7ff      	b.n	8000a1c <__aeabi_cfcmpeq>

08000a1c <__aeabi_cfcmpeq>:
 8000a1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a1e:	f7ff ffc9 	bl	80009b4 <__cmpsf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a2c <__aeabi_fcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cfcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_fcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cfcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_fcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cfcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_fcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffd2 	bl	8000a14 <__aeabi_cfrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc8 	bl	8000a14 <__aeabi_cfrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <selfrel_offset31>:
 8000a90:	6803      	ldr	r3, [r0, #0]
 8000a92:	005a      	lsls	r2, r3, #1
 8000a94:	bf4c      	ite	mi
 8000a96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000a9e:	4418      	add	r0, r3
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <search_EIT_table>:
 8000aa4:	b361      	cbz	r1, 8000b00 <search_EIT_table+0x5c>
 8000aa6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aaa:	f101 3aff 	add.w	sl, r1, #4294967295
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	46d1      	mov	r9, sl
 8000ab4:	2700      	movs	r7, #0
 8000ab6:	eb07 0409 	add.w	r4, r7, r9
 8000aba:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000abe:	1064      	asrs	r4, r4, #1
 8000ac0:	00e5      	lsls	r5, r4, #3
 8000ac2:	1971      	adds	r1, r6, r5
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	f7ff ffe3 	bl	8000a90 <selfrel_offset31>
 8000aca:	45a2      	cmp	sl, r4
 8000acc:	4683      	mov	fp, r0
 8000ace:	f105 0008 	add.w	r0, r5, #8
 8000ad2:	4430      	add	r0, r6
 8000ad4:	d009      	beq.n	8000aea <search_EIT_table+0x46>
 8000ad6:	f7ff ffdb 	bl	8000a90 <selfrel_offset31>
 8000ada:	45c3      	cmp	fp, r8
 8000adc:	f100 30ff 	add.w	r0, r0, #4294967295
 8000ae0:	d805      	bhi.n	8000aee <search_EIT_table+0x4a>
 8000ae2:	4540      	cmp	r0, r8
 8000ae4:	d209      	bcs.n	8000afa <search_EIT_table+0x56>
 8000ae6:	1c67      	adds	r7, r4, #1
 8000ae8:	e7e5      	b.n	8000ab6 <search_EIT_table+0x12>
 8000aea:	45c3      	cmp	fp, r8
 8000aec:	d905      	bls.n	8000afa <search_EIT_table+0x56>
 8000aee:	42a7      	cmp	r7, r4
 8000af0:	d002      	beq.n	8000af8 <search_EIT_table+0x54>
 8000af2:	f104 39ff 	add.w	r9, r4, #4294967295
 8000af6:	e7de      	b.n	8000ab6 <search_EIT_table+0x12>
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b00:	4608      	mov	r0, r1
 8000b02:	4770      	bx	lr

08000b04 <__gnu_unwind_get_pr_addr>:
 8000b04:	2801      	cmp	r0, #1
 8000b06:	d007      	beq.n	8000b18 <__gnu_unwind_get_pr_addr+0x14>
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d007      	beq.n	8000b1c <__gnu_unwind_get_pr_addr+0x18>
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__gnu_unwind_get_pr_addr+0x1c>)
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf0c      	ite	eq
 8000b12:	4618      	moveq	r0, r3
 8000b14:	2000      	movne	r0, #0
 8000b16:	4770      	bx	lr
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <__gnu_unwind_get_pr_addr+0x20>)
 8000b1a:	4770      	bx	lr
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <__gnu_unwind_get_pr_addr+0x24>)
 8000b1e:	4770      	bx	lr
 8000b20:	08001215 	.word	0x08001215
 8000b24:	08001219 	.word	0x08001219
 8000b28:	0800121d 	.word	0x0800121d

08000b2c <get_eit_entry>:
 8000b2c:	b530      	push	{r4, r5, lr}
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <get_eit_entry+0x98>)
 8000b30:	b083      	sub	sp, #12
 8000b32:	4604      	mov	r4, r0
 8000b34:	1e8d      	subs	r5, r1, #2
 8000b36:	b373      	cbz	r3, 8000b96 <get_eit_entry+0x6a>
 8000b38:	a901      	add	r1, sp, #4
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f3af 8000 	nop.w
 8000b40:	b318      	cbz	r0, 8000b8a <get_eit_entry+0x5e>
 8000b42:	9901      	ldr	r1, [sp, #4]
 8000b44:	462a      	mov	r2, r5
 8000b46:	f7ff ffad 	bl	8000aa4 <search_EIT_table>
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	b1e8      	cbz	r0, 8000b8a <get_eit_entry+0x5e>
 8000b4e:	f7ff ff9f 	bl	8000a90 <selfrel_offset31>
 8000b52:	684b      	ldr	r3, [r1, #4]
 8000b54:	64a0      	str	r0, [r4, #72]	; 0x48
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d011      	beq.n	8000b7e <get_eit_entry+0x52>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db22      	blt.n	8000ba4 <get_eit_entry+0x78>
 8000b5e:	1d08      	adds	r0, r1, #4
 8000b60:	f7ff ff96 	bl	8000a90 <selfrel_offset31>
 8000b64:	2300      	movs	r3, #0
 8000b66:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000b68:	6523      	str	r3, [r4, #80]	; 0x50
 8000b6a:	6803      	ldr	r3, [r0, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db1e      	blt.n	8000bae <get_eit_entry+0x82>
 8000b70:	f7ff ff8e 	bl	8000a90 <selfrel_offset31>
 8000b74:	2300      	movs	r3, #0
 8000b76:	6120      	str	r0, [r4, #16]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	b003      	add	sp, #12
 8000b7c:	bd30      	pop	{r4, r5, pc}
 8000b7e:	2305      	movs	r3, #5
 8000b80:	2200      	movs	r2, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	6122      	str	r2, [r4, #16]
 8000b86:	b003      	add	sp, #12
 8000b88:	bd30      	pop	{r4, r5, pc}
 8000b8a:	2309      	movs	r3, #9
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	6122      	str	r2, [r4, #16]
 8000b92:	b003      	add	sp, #12
 8000b94:	bd30      	pop	{r4, r5, pc}
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <get_eit_entry+0x9c>)
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <get_eit_entry+0xa0>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	1ac9      	subs	r1, r1, r3
 8000b9e:	10c9      	asrs	r1, r1, #3
 8000ba0:	9101      	str	r1, [sp, #4]
 8000ba2:	e7cf      	b.n	8000b44 <get_eit_entry+0x18>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	1d08      	adds	r0, r1, #4
 8000ba8:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000baa:	6523      	str	r3, [r4, #80]	; 0x50
 8000bac:	e7dd      	b.n	8000b6a <get_eit_entry+0x3e>
 8000bae:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000bb2:	f7ff ffa7 	bl	8000b04 <__gnu_unwind_get_pr_addr>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	6120      	str	r0, [r4, #16]
 8000bba:	bf14      	ite	ne
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	2309      	moveq	r3, #9
 8000bc0:	e7da      	b.n	8000b78 <get_eit_entry+0x4c>
 8000bc2:	bf00      	nop
 8000bc4:	00000000 	.word	0x00000000
 8000bc8:	0800635c 	.word	0x0800635c
 8000bcc:	080064bc 	.word	0x080064bc

08000bd0 <restore_non_core_regs>:
 8000bd0:	6803      	ldr	r3, [r0, #0]
 8000bd2:	b510      	push	{r4, lr}
 8000bd4:	07da      	lsls	r2, r3, #31
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	d406      	bmi.n	8000be8 <restore_non_core_regs+0x18>
 8000bda:	079b      	lsls	r3, r3, #30
 8000bdc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000be0:	d509      	bpl.n	8000bf6 <restore_non_core_regs+0x26>
 8000be2:	f000 fc57 	bl	8001494 <__gnu_Unwind_Restore_VFP_D>
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	0759      	lsls	r1, r3, #29
 8000bea:	d509      	bpl.n	8000c00 <restore_non_core_regs+0x30>
 8000bec:	071a      	lsls	r2, r3, #28
 8000bee:	d50e      	bpl.n	8000c0e <restore_non_core_regs+0x3e>
 8000bf0:	06db      	lsls	r3, r3, #27
 8000bf2:	d513      	bpl.n	8000c1c <restore_non_core_regs+0x4c>
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	f000 fc45 	bl	8001484 <__gnu_Unwind_Restore_VFP>
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	0759      	lsls	r1, r3, #29
 8000bfe:	d4f5      	bmi.n	8000bec <restore_non_core_regs+0x1c>
 8000c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c04:	f000 fc4e 	bl	80014a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	071a      	lsls	r2, r3, #28
 8000c0c:	d4f0      	bmi.n	8000bf0 <restore_non_core_regs+0x20>
 8000c0e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000c12:	f000 fc4f 	bl	80014b4 <__gnu_Unwind_Restore_WMMXD>
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	06db      	lsls	r3, r3, #27
 8000c1a:	d4eb      	bmi.n	8000bf4 <restore_non_core_regs+0x24>
 8000c1c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c24:	f000 bc8a 	b.w	800153c <__gnu_Unwind_Restore_WMMXC>

08000c28 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000c28:	6803      	ldr	r3, [r0, #0]
 8000c2a:	b103      	cbz	r3, 8000c2e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000c2c:	4403      	add	r3, r0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__gnu_unwind_24bit.isra.1>:
 8000c34:	2009      	movs	r0, #9
 8000c36:	4770      	bx	lr

08000c38 <_Unwind_DebugHook>:
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <unwind_phase2>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	e008      	b.n	8000c56 <unwind_phase2+0x1a>
 8000c44:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c46:	6923      	ldr	r3, [r4, #16]
 8000c48:	6162      	str	r2, [r4, #20]
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	462a      	mov	r2, r5
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4798      	blx	r3
 8000c52:	2808      	cmp	r0, #8
 8000c54:	d108      	bne.n	8000c68 <unwind_phase2+0x2c>
 8000c56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff ff67 	bl	8000b2c <get_eit_entry>
 8000c5e:	4606      	mov	r6, r0
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d0ef      	beq.n	8000c44 <unwind_phase2+0x8>
 8000c64:	f005 f868 	bl	8005d38 <abort>
 8000c68:	2807      	cmp	r0, #7
 8000c6a:	d1fb      	bne.n	8000c64 <unwind_phase2+0x28>
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c70:	f7ff ffe2 	bl	8000c38 <_Unwind_DebugHook>
 8000c74:	1d28      	adds	r0, r5, #4
 8000c76:	f000 fbf9 	bl	800146c <__restore_core_regs>
 8000c7a:	bf00      	nop

08000c7c <unwind_phase2_forced>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	4605      	mov	r5, r0
 8000c82:	2700      	movs	r7, #0
 8000c84:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000c88:	ac03      	add	r4, sp, #12
 8000c8a:	1d0e      	adds	r6, r1, #4
 8000c8c:	4692      	mov	sl, r2
 8000c8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c9e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000ca2:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000caa:	ac02      	add	r4, sp, #8
 8000cac:	4628      	mov	r0, r5
 8000cae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000cb0:	6027      	str	r7, [r4, #0]
 8000cb2:	f7ff ff3b 	bl	8000b2c <get_eit_entry>
 8000cb6:	f1ba 0f00 	cmp.w	sl, #0
 8000cba:	4607      	mov	r7, r0
 8000cbc:	bf14      	ite	ne
 8000cbe:	260a      	movne	r6, #10
 8000cc0:	2609      	moveq	r6, #9
 8000cc2:	b17f      	cbz	r7, 8000ce4 <unwind_phase2_forced+0x68>
 8000cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000cc6:	f046 0110 	orr.w	r1, r6, #16
 8000cca:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000cce:	462a      	mov	r2, r5
 8000cd0:	6463      	str	r3, [r4, #68]	; 0x44
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	462b      	mov	r3, r5
 8000cd6:	47c0      	blx	r8
 8000cd8:	bb78      	cbnz	r0, 8000d3a <unwind_phase2_forced+0xbe>
 8000cda:	4638      	mov	r0, r7
 8000cdc:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ce6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cea:	616b      	str	r3, [r5, #20]
 8000cec:	4621      	mov	r1, r4
 8000cee:	a87a      	add	r0, sp, #488	; 0x1e8
 8000cf0:	f004 fd3a 	bl	8005768 <memcpy>
 8000cf4:	692b      	ldr	r3, [r5, #16]
 8000cf6:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4798      	blx	r3
 8000cfe:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000d00:	4682      	mov	sl, r0
 8000d02:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000d06:	4631      	mov	r1, r6
 8000d08:	6463      	str	r3, [r4, #68]	; 0x44
 8000d0a:	462a      	mov	r2, r5
 8000d0c:	462b      	mov	r3, r5
 8000d0e:	2001      	movs	r0, #1
 8000d10:	47c0      	blx	r8
 8000d12:	b990      	cbnz	r0, 8000d3a <unwind_phase2_forced+0xbe>
 8000d14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d18:	a97a      	add	r1, sp, #488	; 0x1e8
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f004 fd24 	bl	8005768 <memcpy>
 8000d20:	f1ba 0f08 	cmp.w	sl, #8
 8000d24:	d106      	bne.n	8000d34 <unwind_phase2_forced+0xb8>
 8000d26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d28:	4628      	mov	r0, r5
 8000d2a:	f7ff feff 	bl	8000b2c <get_eit_entry>
 8000d2e:	2609      	movs	r6, #9
 8000d30:	4607      	mov	r7, r0
 8000d32:	e7c6      	b.n	8000cc2 <unwind_phase2_forced+0x46>
 8000d34:	f1ba 0f07 	cmp.w	sl, #7
 8000d38:	d005      	beq.n	8000d46 <unwind_phase2_forced+0xca>
 8000d3a:	2709      	movs	r7, #9
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	4638      	mov	r0, r7
 8000d48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d4a:	f7ff ff75 	bl	8000c38 <_Unwind_DebugHook>
 8000d4e:	a803      	add	r0, sp, #12
 8000d50:	f000 fb8c 	bl	800146c <__restore_core_regs>

08000d54 <_Unwind_GetCFA>:
 8000d54:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000d56:	4770      	bx	lr

08000d58 <__gnu_Unwind_RaiseException>:
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	f04f 3eff 	mov.w	lr, #4294967295
 8000d5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000d60:	b0f9      	sub	sp, #484	; 0x1e4
 8000d62:	640b      	str	r3, [r1, #64]	; 0x40
 8000d64:	1d0e      	adds	r6, r1, #4
 8000d66:	ad01      	add	r5, sp, #4
 8000d68:	460f      	mov	r7, r1
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d80:	f8cd e000 	str.w	lr, [sp]
 8000d84:	e006      	b.n	8000d94 <__gnu_Unwind_RaiseException+0x3c>
 8000d86:	6923      	ldr	r3, [r4, #16]
 8000d88:	466a      	mov	r2, sp
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4798      	blx	r3
 8000d8e:	2808      	cmp	r0, #8
 8000d90:	4605      	mov	r5, r0
 8000d92:	d108      	bne.n	8000da6 <__gnu_Unwind_RaiseException+0x4e>
 8000d94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff fec8 	bl	8000b2c <get_eit_entry>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d0f2      	beq.n	8000d86 <__gnu_Unwind_RaiseException+0x2e>
 8000da0:	2009      	movs	r0, #9
 8000da2:	b079      	add	sp, #484	; 0x1e4
 8000da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da6:	4668      	mov	r0, sp
 8000da8:	f7ff ff12 	bl	8000bd0 <restore_non_core_regs>
 8000dac:	2d06      	cmp	r5, #6
 8000dae:	d1f7      	bne.n	8000da0 <__gnu_Unwind_RaiseException+0x48>
 8000db0:	4639      	mov	r1, r7
 8000db2:	4620      	mov	r0, r4
 8000db4:	f7ff ff42 	bl	8000c3c <unwind_phase2>

08000db8 <__gnu_Unwind_ForcedUnwind>:
 8000db8:	b430      	push	{r4, r5}
 8000dba:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000dbc:	60c1      	str	r1, [r0, #12]
 8000dbe:	6182      	str	r2, [r0, #24]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	641d      	str	r5, [r3, #64]	; 0x40
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	bc30      	pop	{r4, r5}
 8000dc8:	e758      	b.n	8000c7c <unwind_phase2_forced>
 8000dca:	bf00      	nop

08000dcc <__gnu_Unwind_Resume>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	6943      	ldr	r3, [r0, #20]
 8000dd0:	68c6      	ldr	r6, [r0, #12]
 8000dd2:	640b      	str	r3, [r1, #64]	; 0x40
 8000dd4:	b126      	cbz	r6, 8000de0 <__gnu_Unwind_Resume+0x14>
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f7ff ff50 	bl	8000c7c <unwind_phase2_forced>
 8000ddc:	f004 ffac 	bl	8005d38 <abort>
 8000de0:	6903      	ldr	r3, [r0, #16]
 8000de2:	460a      	mov	r2, r1
 8000de4:	4604      	mov	r4, r0
 8000de6:	460d      	mov	r5, r1
 8000de8:	4601      	mov	r1, r0
 8000dea:	2002      	movs	r0, #2
 8000dec:	4798      	blx	r3
 8000dee:	2807      	cmp	r0, #7
 8000df0:	d007      	beq.n	8000e02 <__gnu_Unwind_Resume+0x36>
 8000df2:	2808      	cmp	r0, #8
 8000df4:	d103      	bne.n	8000dfe <__gnu_Unwind_Resume+0x32>
 8000df6:	4629      	mov	r1, r5
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff ff1f 	bl	8000c3c <unwind_phase2>
 8000dfe:	f004 ff9b 	bl	8005d38 <abort>
 8000e02:	4630      	mov	r0, r6
 8000e04:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000e06:	f7ff ff17 	bl	8000c38 <_Unwind_DebugHook>
 8000e0a:	1d28      	adds	r0, r5, #4
 8000e0c:	f000 fb2e 	bl	800146c <__restore_core_regs>

08000e10 <__gnu_Unwind_Resume_or_Rethrow>:
 8000e10:	68c2      	ldr	r2, [r0, #12]
 8000e12:	b12a      	cbz	r2, 8000e20 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000e14:	b410      	push	{r4}
 8000e16:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	640c      	str	r4, [r1, #64]	; 0x40
 8000e1c:	bc10      	pop	{r4}
 8000e1e:	e72d      	b.n	8000c7c <unwind_phase2_forced>
 8000e20:	e79a      	b.n	8000d58 <__gnu_Unwind_RaiseException>
 8000e22:	bf00      	nop

08000e24 <_Unwind_Complete>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <_Unwind_DeleteException>:
 8000e28:	6883      	ldr	r3, [r0, #8]
 8000e2a:	b113      	cbz	r3, 8000e32 <_Unwind_DeleteException+0xa>
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4718      	bx	r3
 8000e32:	4770      	bx	lr

08000e34 <_Unwind_VRS_Get>:
 8000e34:	b500      	push	{lr}
 8000e36:	2904      	cmp	r1, #4
 8000e38:	d807      	bhi.n	8000e4a <_Unwind_VRS_Get+0x16>
 8000e3a:	e8df f001 	tbb	[pc, r1]
 8000e3e:	0903      	.short	0x0903
 8000e40:	0906      	.short	0x0906
 8000e42:	09          	.byte	0x09
 8000e43:	00          	.byte	0x00
 8000e44:	b90b      	cbnz	r3, 8000e4a <_Unwind_VRS_Get+0x16>
 8000e46:	2a0f      	cmp	r2, #15
 8000e48:	d905      	bls.n	8000e56 <_Unwind_VRS_Get+0x22>
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e50:	2001      	movs	r0, #1
 8000e52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e56:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e5a:	6852      	ldr	r2, [r2, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	9b01      	ldr	r3, [sp, #4]
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e66:	bf00      	nop

08000e68 <_Unwind_GetGR>:
 8000e68:	2300      	movs	r3, #0
 8000e6a:	b510      	push	{r4, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	ac03      	add	r4, sp, #12
 8000e70:	460a      	mov	r2, r1
 8000e72:	9400      	str	r4, [sp, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff ffdd 	bl	8000e34 <_Unwind_VRS_Get>
 8000e7a:	9803      	ldr	r0, [sp, #12]
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd10      	pop	{r4, pc}

08000e80 <_Unwind_VRS_Set>:
 8000e80:	b500      	push	{lr}
 8000e82:	2904      	cmp	r1, #4
 8000e84:	d807      	bhi.n	8000e96 <_Unwind_VRS_Set+0x16>
 8000e86:	e8df f001 	tbb	[pc, r1]
 8000e8a:	0903      	.short	0x0903
 8000e8c:	0906      	.short	0x0906
 8000e8e:	09          	.byte	0x09
 8000e8f:	00          	.byte	0x00
 8000e90:	b90b      	cbnz	r3, 8000e96 <_Unwind_VRS_Set+0x16>
 8000e92:	2a0f      	cmp	r2, #15
 8000e94:	d905      	bls.n	8000ea2 <_Unwind_VRS_Set+0x22>
 8000e96:	2002      	movs	r0, #2
 8000e98:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ea2:	9901      	ldr	r1, [sp, #4]
 8000ea4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ea8:	6809      	ldr	r1, [r1, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	6051      	str	r1, [r2, #4]
 8000eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eb2:	bf00      	nop

08000eb4 <_Unwind_SetGR>:
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	b510      	push	{r4, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	ac04      	add	r4, sp, #16
 8000ebc:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000ec0:	9400      	str	r4, [sp, #0]
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff ffdb 	bl	8000e80 <_Unwind_VRS_Set>
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	bf00      	nop

08000ed0 <__gnu_Unwind_Backtrace>:
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	f04f 3eff 	mov.w	lr, #4294967295
 8000ed6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000ed8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	1d15      	adds	r5, r2, #4
 8000ee0:	ac17      	add	r4, sp, #92	; 0x5c
 8000ee2:	4607      	mov	r7, r0
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000efa:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8000efe:	e012      	b.n	8000f26 <__gnu_Unwind_Backtrace+0x56>
 8000f00:	210c      	movs	r1, #12
 8000f02:	a816      	add	r0, sp, #88	; 0x58
 8000f04:	466a      	mov	r2, sp
 8000f06:	f7ff ffd5 	bl	8000eb4 <_Unwind_SetGR>
 8000f0a:	4631      	mov	r1, r6
 8000f0c:	a816      	add	r0, sp, #88	; 0x58
 8000f0e:	47b8      	blx	r7
 8000f10:	b978      	cbnz	r0, 8000f32 <__gnu_Unwind_Backtrace+0x62>
 8000f12:	9b04      	ldr	r3, [sp, #16]
 8000f14:	aa16      	add	r2, sp, #88	; 0x58
 8000f16:	4669      	mov	r1, sp
 8000f18:	2008      	movs	r0, #8
 8000f1a:	4798      	blx	r3
 8000f1c:	2805      	cmp	r0, #5
 8000f1e:	4604      	mov	r4, r0
 8000f20:	d008      	beq.n	8000f34 <__gnu_Unwind_Backtrace+0x64>
 8000f22:	2809      	cmp	r0, #9
 8000f24:	d005      	beq.n	8000f32 <__gnu_Unwind_Backtrace+0x62>
 8000f26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000f28:	4668      	mov	r0, sp
 8000f2a:	f7ff fdff 	bl	8000b2c <get_eit_entry>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d0e6      	beq.n	8000f00 <__gnu_Unwind_Backtrace+0x30>
 8000f32:	2409      	movs	r4, #9
 8000f34:	a816      	add	r0, sp, #88	; 0x58
 8000f36:	f7ff fe4b 	bl	8000bd0 <restore_non_core_regs>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	bf00      	nop

08000f44 <__gnu_unwind_pr_common>:
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	6822      	ldr	r2, [r4, #0]
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	3404      	adds	r4, #4
 8000f52:	460d      	mov	r5, r1
 8000f54:	9207      	str	r2, [sp, #28]
 8000f56:	9408      	str	r4, [sp, #32]
 8000f58:	f000 0b03 	and.w	fp, r0, #3
 8000f5c:	461e      	mov	r6, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d160      	bne.n	8001024 <__gnu_unwind_pr_common+0xe0>
 8000f62:	2303      	movs	r3, #3
 8000f64:	0212      	lsls	r2, r2, #8
 8000f66:	9207      	str	r2, [sp, #28]
 8000f68:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000f6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000f70:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000f72:	f1bb 0f02 	cmp.w	fp, #2
 8000f76:	bf08      	it	eq
 8000f78:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000f7a:	f013 0301 	ands.w	r3, r3, #1
 8000f7e:	d140      	bne.n	8001002 <__gnu_unwind_pr_common+0xbe>
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f000 0308 	and.w	r3, r0, #8
 8000f86:	9303      	str	r3, [sp, #12]
 8000f88:	f8d4 8000 	ldr.w	r8, [r4]
 8000f8c:	f1b8 0f00 	cmp.w	r8, #0
 8000f90:	d039      	beq.n	8001006 <__gnu_unwind_pr_common+0xc2>
 8000f92:	2e02      	cmp	r6, #2
 8000f94:	d043      	beq.n	800101e <__gnu_unwind_pr_common+0xda>
 8000f96:	f8b4 8000 	ldrh.w	r8, [r4]
 8000f9a:	8867      	ldrh	r7, [r4, #2]
 8000f9c:	3404      	adds	r4, #4
 8000f9e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000fa0:	f027 0a01 	bic.w	sl, r7, #1
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	4648      	mov	r0, r9
 8000fa8:	449a      	add	sl, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <_Unwind_GetGR>
 8000fae:	4582      	cmp	sl, r0
 8000fb0:	d833      	bhi.n	800101a <__gnu_unwind_pr_common+0xd6>
 8000fb2:	f028 0301 	bic.w	r3, r8, #1
 8000fb6:	449a      	add	sl, r3
 8000fb8:	4550      	cmp	r0, sl
 8000fba:	bf2c      	ite	cs
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	2001      	movcc	r0, #1
 8000fc0:	007f      	lsls	r7, r7, #1
 8000fc2:	f007 0702 	and.w	r7, r7, #2
 8000fc6:	f008 0801 	and.w	r8, r8, #1
 8000fca:	ea47 0708 	orr.w	r7, r7, r8
 8000fce:	2f01      	cmp	r7, #1
 8000fd0:	d03e      	beq.n	8001050 <__gnu_unwind_pr_common+0x10c>
 8000fd2:	d335      	bcc.n	8001040 <__gnu_unwind_pr_common+0xfc>
 8000fd4:	2f02      	cmp	r7, #2
 8000fd6:	d11c      	bne.n	8001012 <__gnu_unwind_pr_common+0xce>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	f1bb 0f00 	cmp.w	fp, #0
 8000fe4:	d176      	bne.n	80010d4 <__gnu_unwind_pr_common+0x190>
 8000fe6:	b128      	cbz	r0, 8000ff4 <__gnu_unwind_pr_common+0xb0>
 8000fe8:	9903      	ldr	r1, [sp, #12]
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d07e      	beq.n	80010ec <__gnu_unwind_pr_common+0x1a8>
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	f000 80a6 	beq.w	8001140 <__gnu_unwind_pr_common+0x1fc>
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db77      	blt.n	80010e8 <__gnu_unwind_pr_common+0x1a4>
 8000ff8:	9b02      	ldr	r3, [sp, #8]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001000:	e7c2      	b.n	8000f88 <__gnu_unwind_pr_common+0x44>
 8001002:	2300      	movs	r3, #0
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	2e02      	cmp	r6, #2
 8001008:	dd3e      	ble.n	8001088 <__gnu_unwind_pr_common+0x144>
 800100a:	f7ff fe13 	bl	8000c34 <__gnu_unwind_24bit.isra.1>
 800100e:	2800      	cmp	r0, #0
 8001010:	d040      	beq.n	8001094 <__gnu_unwind_pr_common+0x150>
 8001012:	2009      	movs	r0, #9
 8001014:	b00b      	add	sp, #44	; 0x2c
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800101a:	2000      	movs	r0, #0
 800101c:	e7d0      	b.n	8000fc0 <__gnu_unwind_pr_common+0x7c>
 800101e:	6867      	ldr	r7, [r4, #4]
 8001020:	3408      	adds	r4, #8
 8001022:	e7bc      	b.n	8000f9e <__gnu_unwind_pr_common+0x5a>
 8001024:	2b02      	cmp	r3, #2
 8001026:	dca3      	bgt.n	8000f70 <__gnu_unwind_pr_common+0x2c>
 8001028:	2102      	movs	r1, #2
 800102a:	0c13      	lsrs	r3, r2, #16
 800102c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001030:	0412      	lsls	r2, r2, #16
 8001032:	b2db      	uxtb	r3, r3
 8001034:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001038:	9207      	str	r2, [sp, #28]
 800103a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800103e:	e797      	b.n	8000f70 <__gnu_unwind_pr_common+0x2c>
 8001040:	f1bb 0f00 	cmp.w	fp, #0
 8001044:	d002      	beq.n	800104c <__gnu_unwind_pr_common+0x108>
 8001046:	2800      	cmp	r0, #0
 8001048:	f040 80bd 	bne.w	80011c6 <__gnu_unwind_pr_common+0x282>
 800104c:	3404      	adds	r4, #4
 800104e:	e79b      	b.n	8000f88 <__gnu_unwind_pr_common+0x44>
 8001050:	f1bb 0f00 	cmp.w	fp, #0
 8001054:	d125      	bne.n	80010a2 <__gnu_unwind_pr_common+0x15e>
 8001056:	b1a8      	cbz	r0, 8001084 <__gnu_unwind_pr_common+0x140>
 8001058:	e894 000c 	ldmia.w	r4, {r2, r3}
 800105c:	1c99      	adds	r1, r3, #2
 800105e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001062:	d0d6      	beq.n	8001012 <__gnu_unwind_pr_common+0xce>
 8001064:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001068:	3301      	adds	r3, #1
 800106a:	9106      	str	r1, [sp, #24]
 800106c:	f000 80a3 	beq.w	80011b6 <__gnu_unwind_pr_common+0x272>
 8001070:	1d20      	adds	r0, r4, #4
 8001072:	f7ff fdd9 	bl	8000c28 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001076:	ab06      	add	r3, sp, #24
 8001078:	4601      	mov	r1, r0
 800107a:	4628      	mov	r0, r5
 800107c:	f3af 8000 	nop.w
 8001080:	2800      	cmp	r0, #0
 8001082:	d177      	bne.n	8001174 <__gnu_unwind_pr_common+0x230>
 8001084:	3408      	adds	r4, #8
 8001086:	e77f      	b.n	8000f88 <__gnu_unwind_pr_common+0x44>
 8001088:	a907      	add	r1, sp, #28
 800108a:	4648      	mov	r0, r9
 800108c:	f000 faf0 	bl	8001670 <__gnu_unwind_execute>
 8001090:	2800      	cmp	r0, #0
 8001092:	d1be      	bne.n	8001012 <__gnu_unwind_pr_common+0xce>
 8001094:	9b01      	ldr	r3, [sp, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d15c      	bne.n	8001154 <__gnu_unwind_pr_common+0x210>
 800109a:	2008      	movs	r0, #8
 800109c:	b00b      	add	sp, #44	; 0x2c
 800109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010a2:	210d      	movs	r1, #13
 80010a4:	4648      	mov	r0, r9
 80010a6:	6a2f      	ldr	r7, [r5, #32]
 80010a8:	f7ff fede 	bl	8000e68 <_Unwind_GetGR>
 80010ac:	4287      	cmp	r7, r0
 80010ae:	d1e9      	bne.n	8001084 <__gnu_unwind_pr_common+0x140>
 80010b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010b2:	429c      	cmp	r4, r3
 80010b4:	d1e6      	bne.n	8001084 <__gnu_unwind_pr_common+0x140>
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff fcea 	bl	8000a90 <selfrel_offset31>
 80010bc:	210f      	movs	r1, #15
 80010be:	4602      	mov	r2, r0
 80010c0:	4648      	mov	r0, r9
 80010c2:	f7ff fef7 	bl	8000eb4 <_Unwind_SetGR>
 80010c6:	4648      	mov	r0, r9
 80010c8:	462a      	mov	r2, r5
 80010ca:	2100      	movs	r1, #0
 80010cc:	f7ff fef2 	bl	8000eb4 <_Unwind_SetGR>
 80010d0:	2007      	movs	r0, #7
 80010d2:	e79f      	b.n	8001014 <__gnu_unwind_pr_common+0xd0>
 80010d4:	210d      	movs	r1, #13
 80010d6:	4648      	mov	r0, r9
 80010d8:	6a2f      	ldr	r7, [r5, #32]
 80010da:	f7ff fec5 	bl	8000e68 <_Unwind_GetGR>
 80010de:	4287      	cmp	r7, r0
 80010e0:	d058      	beq.n	8001194 <__gnu_unwind_pr_common+0x250>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da87      	bge.n	8000ff8 <__gnu_unwind_pr_common+0xb4>
 80010e8:	3404      	adds	r4, #4
 80010ea:	e785      	b.n	8000ff8 <__gnu_unwind_pr_common+0xb4>
 80010ec:	9b02      	ldr	r3, [sp, #8]
 80010ee:	b33b      	cbz	r3, 8001140 <__gnu_unwind_pr_common+0x1fc>
 80010f0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80010f4:	1d27      	adds	r7, r4, #4
 80010f6:	f8cd b010 	str.w	fp, [sp, #16]
 80010fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80010fe:	46a3      	mov	fp, r4
 8001100:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001104:	461c      	mov	r4, r3
 8001106:	9605      	str	r6, [sp, #20]
 8001108:	e002      	b.n	8001110 <__gnu_unwind_pr_common+0x1cc>
 800110a:	45b2      	cmp	sl, r6
 800110c:	46b0      	mov	r8, r6
 800110e:	d016      	beq.n	800113e <__gnu_unwind_pr_common+0x1fa>
 8001110:	4638      	mov	r0, r7
 8001112:	9406      	str	r4, [sp, #24]
 8001114:	f7ff fd88 	bl	8000c28 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001118:	ab06      	add	r3, sp, #24
 800111a:	4601      	mov	r1, r0
 800111c:	2200      	movs	r2, #0
 800111e:	4628      	mov	r0, r5
 8001120:	f3af 8000 	nop.w
 8001124:	f108 0601 	add.w	r6, r8, #1
 8001128:	3704      	adds	r7, #4
 800112a:	2800      	cmp	r0, #0
 800112c:	d0ed      	beq.n	800110a <__gnu_unwind_pr_common+0x1c6>
 800112e:	9b02      	ldr	r3, [sp, #8]
 8001130:	465c      	mov	r4, fp
 8001132:	4543      	cmp	r3, r8
 8001134:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001138:	9e05      	ldr	r6, [sp, #20]
 800113a:	d1d2      	bne.n	80010e2 <__gnu_unwind_pr_common+0x19e>
 800113c:	e000      	b.n	8001140 <__gnu_unwind_pr_common+0x1fc>
 800113e:	465c      	mov	r4, fp
 8001140:	4648      	mov	r0, r9
 8001142:	210d      	movs	r1, #13
 8001144:	f7ff fe90 	bl	8000e68 <_Unwind_GetGR>
 8001148:	9b06      	ldr	r3, [sp, #24]
 800114a:	6228      	str	r0, [r5, #32]
 800114c:	62ac      	str	r4, [r5, #40]	; 0x28
 800114e:	626b      	str	r3, [r5, #36]	; 0x24
 8001150:	2006      	movs	r0, #6
 8001152:	e75f      	b.n	8001014 <__gnu_unwind_pr_common+0xd0>
 8001154:	210f      	movs	r1, #15
 8001156:	4648      	mov	r0, r9
 8001158:	f7ff fe86 	bl	8000e68 <_Unwind_GetGR>
 800115c:	210e      	movs	r1, #14
 800115e:	4602      	mov	r2, r0
 8001160:	4648      	mov	r0, r9
 8001162:	f7ff fea7 	bl	8000eb4 <_Unwind_SetGR>
 8001166:	4648      	mov	r0, r9
 8001168:	4a29      	ldr	r2, [pc, #164]	; (8001210 <__gnu_unwind_pr_common+0x2cc>)
 800116a:	210f      	movs	r1, #15
 800116c:	f7ff fea2 	bl	8000eb4 <_Unwind_SetGR>
 8001170:	2007      	movs	r0, #7
 8001172:	e74f      	b.n	8001014 <__gnu_unwind_pr_common+0xd0>
 8001174:	4607      	mov	r7, r0
 8001176:	210d      	movs	r1, #13
 8001178:	4648      	mov	r0, r9
 800117a:	f7ff fe75 	bl	8000e68 <_Unwind_GetGR>
 800117e:	2f02      	cmp	r7, #2
 8001180:	6228      	str	r0, [r5, #32]
 8001182:	d11d      	bne.n	80011c0 <__gnu_unwind_pr_common+0x27c>
 8001184:	462b      	mov	r3, r5
 8001186:	9a06      	ldr	r2, [sp, #24]
 8001188:	f843 2f2c 	str.w	r2, [r3, #44]!
 800118c:	626b      	str	r3, [r5, #36]	; 0x24
 800118e:	62ac      	str	r4, [r5, #40]	; 0x28
 8001190:	2006      	movs	r0, #6
 8001192:	e73f      	b.n	8001014 <__gnu_unwind_pr_common+0xd0>
 8001194:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001196:	429c      	cmp	r4, r3
 8001198:	d1a3      	bne.n	80010e2 <__gnu_unwind_pr_common+0x19e>
 800119a:	2204      	movs	r2, #4
 800119c:	2700      	movs	r7, #0
 800119e:	9902      	ldr	r1, [sp, #8]
 80011a0:	18a3      	adds	r3, r4, r2
 80011a2:	62a9      	str	r1, [r5, #40]	; 0x28
 80011a4:	62ef      	str	r7, [r5, #44]	; 0x2c
 80011a6:	632a      	str	r2, [r5, #48]	; 0x30
 80011a8:	636b      	str	r3, [r5, #52]	; 0x34
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	42bb      	cmp	r3, r7
 80011ae:	db1d      	blt.n	80011ec <__gnu_unwind_pr_common+0x2a8>
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	e720      	b.n	8000ff8 <__gnu_unwind_pr_common+0xb4>
 80011b6:	4648      	mov	r0, r9
 80011b8:	210d      	movs	r1, #13
 80011ba:	f7ff fe55 	bl	8000e68 <_Unwind_GetGR>
 80011be:	6228      	str	r0, [r5, #32]
 80011c0:	9b06      	ldr	r3, [sp, #24]
 80011c2:	626b      	str	r3, [r5, #36]	; 0x24
 80011c4:	e7e3      	b.n	800118e <__gnu_unwind_pr_common+0x24a>
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff fc62 	bl	8000a90 <selfrel_offset31>
 80011cc:	3404      	adds	r4, #4
 80011ce:	4606      	mov	r6, r0
 80011d0:	63ac      	str	r4, [r5, #56]	; 0x38
 80011d2:	4628      	mov	r0, r5
 80011d4:	f3af 8000 	nop.w
 80011d8:	2800      	cmp	r0, #0
 80011da:	f43f af1a 	beq.w	8001012 <__gnu_unwind_pr_common+0xce>
 80011de:	4648      	mov	r0, r9
 80011e0:	4632      	mov	r2, r6
 80011e2:	210f      	movs	r1, #15
 80011e4:	f7ff fe66 	bl	8000eb4 <_Unwind_SetGR>
 80011e8:	2007      	movs	r0, #7
 80011ea:	e713      	b.n	8001014 <__gnu_unwind_pr_common+0xd0>
 80011ec:	4608      	mov	r0, r1
 80011ee:	3001      	adds	r0, #1
 80011f0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80011f4:	f7ff fc4c 	bl	8000a90 <selfrel_offset31>
 80011f8:	210f      	movs	r1, #15
 80011fa:	4602      	mov	r2, r0
 80011fc:	4648      	mov	r0, r9
 80011fe:	f7ff fe59 	bl	8000eb4 <_Unwind_SetGR>
 8001202:	4648      	mov	r0, r9
 8001204:	462a      	mov	r2, r5
 8001206:	4639      	mov	r1, r7
 8001208:	f7ff fe54 	bl	8000eb4 <_Unwind_SetGR>
 800120c:	2007      	movs	r0, #7
 800120e:	e701      	b.n	8001014 <__gnu_unwind_pr_common+0xd0>
 8001210:	00000000 	.word	0x00000000

08001214 <__aeabi_unwind_cpp_pr0>:
 8001214:	2300      	movs	r3, #0
 8001216:	e695      	b.n	8000f44 <__gnu_unwind_pr_common>

08001218 <__aeabi_unwind_cpp_pr1>:
 8001218:	2301      	movs	r3, #1
 800121a:	e693      	b.n	8000f44 <__gnu_unwind_pr_common>

0800121c <__aeabi_unwind_cpp_pr2>:
 800121c:	2302      	movs	r3, #2
 800121e:	e691      	b.n	8000f44 <__gnu_unwind_pr_common>

08001220 <_Unwind_VRS_Pop>:
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	4604      	mov	r4, r0
 8001224:	b0c5      	sub	sp, #276	; 0x114
 8001226:	2904      	cmp	r1, #4
 8001228:	d80d      	bhi.n	8001246 <_Unwind_VRS_Pop+0x26>
 800122a:	e8df f001 	tbb	[pc, r1]
 800122e:	0355      	.short	0x0355
 8001230:	310c      	.short	0x310c
 8001232:	0f          	.byte	0x0f
 8001233:	00          	.byte	0x00
 8001234:	2b01      	cmp	r3, #1
 8001236:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800123a:	b295      	uxth	r5, r2
 800123c:	d164      	bne.n	8001308 <_Unwind_VRS_Pop+0xe8>
 800123e:	1972      	adds	r2, r6, r5
 8001240:	2a10      	cmp	r2, #16
 8001242:	f240 809d 	bls.w	8001380 <_Unwind_VRS_Pop+0x160>
 8001246:	2002      	movs	r0, #2
 8001248:	b045      	add	sp, #276	; 0x114
 800124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1fa      	bne.n	8001246 <_Unwind_VRS_Pop+0x26>
 8001250:	2a10      	cmp	r2, #16
 8001252:	d8f8      	bhi.n	8001246 <_Unwind_VRS_Pop+0x26>
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	06d8      	lsls	r0, r3, #27
 8001258:	f100 80c8 	bmi.w	80013ec <_Unwind_VRS_Pop+0x1cc>
 800125c:	ae22      	add	r6, sp, #136	; 0x88
 800125e:	4630      	mov	r0, r6
 8001260:	9201      	str	r2, [sp, #4]
 8001262:	2501      	movs	r5, #1
 8001264:	f000 f974 	bl	8001550 <__gnu_Unwind_Save_WMMXC>
 8001268:	2300      	movs	r3, #0
 800126a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800126c:	9a01      	ldr	r2, [sp, #4]
 800126e:	fa05 f103 	lsl.w	r1, r5, r3
 8001272:	4211      	tst	r1, r2
 8001274:	d003      	beq.n	800127e <_Unwind_VRS_Pop+0x5e>
 8001276:	6801      	ldr	r1, [r0, #0]
 8001278:	3004      	adds	r0, #4
 800127a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800127e:	3301      	adds	r3, #1
 8001280:	2b04      	cmp	r3, #4
 8001282:	d1f4      	bne.n	800126e <_Unwind_VRS_Pop+0x4e>
 8001284:	63a0      	str	r0, [r4, #56]	; 0x38
 8001286:	4630      	mov	r0, r6
 8001288:	f000 f958 	bl	800153c <__gnu_Unwind_Restore_WMMXC>
 800128c:	2000      	movs	r0, #0
 800128e:	e7db      	b.n	8001248 <_Unwind_VRS_Pop+0x28>
 8001290:	2b03      	cmp	r3, #3
 8001292:	d1d8      	bne.n	8001246 <_Unwind_VRS_Pop+0x26>
 8001294:	0c15      	lsrs	r5, r2, #16
 8001296:	b297      	uxth	r7, r2
 8001298:	19eb      	adds	r3, r5, r7
 800129a:	2b10      	cmp	r3, #16
 800129c:	d8d3      	bhi.n	8001246 <_Unwind_VRS_Pop+0x26>
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	071e      	lsls	r6, r3, #28
 80012a2:	f100 80b7 	bmi.w	8001414 <_Unwind_VRS_Pop+0x1f4>
 80012a6:	ae22      	add	r6, sp, #136	; 0x88
 80012a8:	4630      	mov	r0, r6
 80012aa:	f000 f925 	bl	80014f8 <__gnu_Unwind_Save_WMMXD>
 80012ae:	00ed      	lsls	r5, r5, #3
 80012b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012b2:	b15f      	cbz	r7, 80012cc <_Unwind_VRS_Pop+0xac>
 80012b4:	3d04      	subs	r5, #4
 80012b6:	4603      	mov	r3, r0
 80012b8:	1971      	adds	r1, r6, r5
 80012ba:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80012be:	f853 2b04 	ldr.w	r2, [r3], #4
 80012c2:	4283      	cmp	r3, r0
 80012c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80012c8:	d1f9      	bne.n	80012be <_Unwind_VRS_Pop+0x9e>
 80012ca:	4618      	mov	r0, r3
 80012cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80012ce:	4630      	mov	r0, r6
 80012d0:	f000 f8f0 	bl	80014b4 <__gnu_Unwind_Restore_WMMXD>
 80012d4:	2000      	movs	r0, #0
 80012d6:	e7b7      	b.n	8001248 <_Unwind_VRS_Pop+0x28>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1b4      	bne.n	8001246 <_Unwind_VRS_Pop+0x26>
 80012dc:	2701      	movs	r7, #1
 80012de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80012e0:	b296      	uxth	r6, r2
 80012e2:	1d20      	adds	r0, r4, #4
 80012e4:	fa07 f103 	lsl.w	r1, r7, r3
 80012e8:	4231      	tst	r1, r6
 80012ea:	f103 0301 	add.w	r3, r3, #1
 80012ee:	d002      	beq.n	80012f6 <_Unwind_VRS_Pop+0xd6>
 80012f0:	6829      	ldr	r1, [r5, #0]
 80012f2:	3504      	adds	r5, #4
 80012f4:	6001      	str	r1, [r0, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	f100 0004 	add.w	r0, r0, #4
 80012fc:	d1f2      	bne.n	80012e4 <_Unwind_VRS_Pop+0xc4>
 80012fe:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001302:	d13b      	bne.n	800137c <_Unwind_VRS_Pop+0x15c>
 8001304:	63a5      	str	r5, [r4, #56]	; 0x38
 8001306:	e79f      	b.n	8001248 <_Unwind_VRS_Pop+0x28>
 8001308:	2b05      	cmp	r3, #5
 800130a:	d19c      	bne.n	8001246 <_Unwind_VRS_Pop+0x26>
 800130c:	1977      	adds	r7, r6, r5
 800130e:	2f20      	cmp	r7, #32
 8001310:	d899      	bhi.n	8001246 <_Unwind_VRS_Pop+0x26>
 8001312:	2e0f      	cmp	r6, #15
 8001314:	d966      	bls.n	80013e4 <_Unwind_VRS_Pop+0x1c4>
 8001316:	462f      	mov	r7, r5
 8001318:	2d00      	cmp	r5, #0
 800131a:	d13a      	bne.n	8001392 <_Unwind_VRS_Pop+0x172>
 800131c:	462a      	mov	r2, r5
 800131e:	2700      	movs	r7, #0
 8001320:	2a00      	cmp	r2, #0
 8001322:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001324:	dd72      	ble.n	800140c <_Unwind_VRS_Pop+0x1ec>
 8001326:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800132a:	4601      	mov	r1, r0
 800132c:	a844      	add	r0, sp, #272	; 0x110
 800132e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001332:	388c      	subs	r0, #140	; 0x8c
 8001334:	f851 5b04 	ldr.w	r5, [r1], #4
 8001338:	4291      	cmp	r1, r2
 800133a:	f840 5f04 	str.w	r5, [r0, #4]!
 800133e:	d1f9      	bne.n	8001334 <_Unwind_VRS_Pop+0x114>
 8001340:	4608      	mov	r0, r1
 8001342:	b197      	cbz	r7, 800136a <_Unwind_VRS_Pop+0x14a>
 8001344:	2e10      	cmp	r6, #16
 8001346:	4632      	mov	r2, r6
 8001348:	bf38      	it	cc
 800134a:	2210      	movcc	r2, #16
 800134c:	a944      	add	r1, sp, #272	; 0x110
 800134e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001352:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001356:	0079      	lsls	r1, r7, #1
 8001358:	3a04      	subs	r2, #4
 800135a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800135e:	f850 5b04 	ldr.w	r5, [r0], #4
 8001362:	4288      	cmp	r0, r1
 8001364:	f842 5f04 	str.w	r5, [r2, #4]!
 8001368:	d1f9      	bne.n	800135e <_Unwind_VRS_Pop+0x13e>
 800136a:	2b01      	cmp	r3, #1
 800136c:	d048      	beq.n	8001400 <_Unwind_VRS_Pop+0x1e0>
 800136e:	2e0f      	cmp	r6, #15
 8001370:	63a1      	str	r1, [r4, #56]	; 0x38
 8001372:	d933      	bls.n	80013dc <_Unwind_VRS_Pop+0x1bc>
 8001374:	b117      	cbz	r7, 800137c <_Unwind_VRS_Pop+0x15c>
 8001376:	a802      	add	r0, sp, #8
 8001378:	f000 f894 	bl	80014a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800137c:	2000      	movs	r0, #0
 800137e:	e763      	b.n	8001248 <_Unwind_VRS_Pop+0x28>
 8001380:	2e0f      	cmp	r6, #15
 8001382:	f63f af60 	bhi.w	8001246 <_Unwind_VRS_Pop+0x26>
 8001386:	2700      	movs	r7, #0
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	07d1      	lsls	r1, r2, #31
 800138c:	d417      	bmi.n	80013be <_Unwind_VRS_Pop+0x19e>
 800138e:	2f00      	cmp	r7, #0
 8001390:	d060      	beq.n	8001454 <_Unwind_VRS_Pop+0x234>
 8001392:	6822      	ldr	r2, [r4, #0]
 8001394:	0751      	lsls	r1, r2, #29
 8001396:	d445      	bmi.n	8001424 <_Unwind_VRS_Pop+0x204>
 8001398:	2b01      	cmp	r3, #1
 800139a:	d04d      	beq.n	8001438 <_Unwind_VRS_Pop+0x218>
 800139c:	2e0f      	cmp	r6, #15
 800139e:	d806      	bhi.n	80013ae <_Unwind_VRS_Pop+0x18e>
 80013a0:	a822      	add	r0, sp, #136	; 0x88
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	f000 f87a 	bl	800149c <__gnu_Unwind_Save_VFP_D>
 80013a8:	9b01      	ldr	r3, [sp, #4]
 80013aa:	2f00      	cmp	r7, #0
 80013ac:	d0b6      	beq.n	800131c <_Unwind_VRS_Pop+0xfc>
 80013ae:	a802      	add	r0, sp, #8
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f000 f87b 	bl	80014ac <__gnu_Unwind_Save_VFP_D_16_to_31>
 80013b6:	9b01      	ldr	r3, [sp, #4]
 80013b8:	f1c6 0210 	rsb	r2, r6, #16
 80013bc:	e7b0      	b.n	8001320 <_Unwind_VRS_Pop+0x100>
 80013be:	f022 0101 	bic.w	r1, r2, #1
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	6021      	str	r1, [r4, #0]
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	4620      	mov	r0, r4
 80013ca:	d03b      	beq.n	8001444 <_Unwind_VRS_Pop+0x224>
 80013cc:	f022 0203 	bic.w	r2, r2, #3
 80013d0:	f840 2b48 	str.w	r2, [r0], #72
 80013d4:	f000 f85a 	bl	800148c <__gnu_Unwind_Save_VFP>
 80013d8:	9b01      	ldr	r3, [sp, #4]
 80013da:	e7d8      	b.n	800138e <_Unwind_VRS_Pop+0x16e>
 80013dc:	a822      	add	r0, sp, #136	; 0x88
 80013de:	f000 f859 	bl	8001494 <__gnu_Unwind_Restore_VFP_D>
 80013e2:	e7c7      	b.n	8001374 <_Unwind_VRS_Pop+0x154>
 80013e4:	2f10      	cmp	r7, #16
 80013e6:	d9ce      	bls.n	8001386 <_Unwind_VRS_Pop+0x166>
 80013e8:	3f10      	subs	r7, #16
 80013ea:	e7cd      	b.n	8001388 <_Unwind_VRS_Pop+0x168>
 80013ec:	f023 0310 	bic.w	r3, r3, #16
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	f000 f8aa 	bl	8001550 <__gnu_Unwind_Save_WMMXC>
 80013fc:	9a01      	ldr	r2, [sp, #4]
 80013fe:	e72d      	b.n	800125c <_Unwind_VRS_Pop+0x3c>
 8001400:	3104      	adds	r1, #4
 8001402:	63a1      	str	r1, [r4, #56]	; 0x38
 8001404:	a822      	add	r0, sp, #136	; 0x88
 8001406:	f000 f83d 	bl	8001484 <__gnu_Unwind_Restore_VFP>
 800140a:	e7b7      	b.n	800137c <_Unwind_VRS_Pop+0x15c>
 800140c:	2f00      	cmp	r7, #0
 800140e:	d199      	bne.n	8001344 <_Unwind_VRS_Pop+0x124>
 8001410:	4601      	mov	r1, r0
 8001412:	e7aa      	b.n	800136a <_Unwind_VRS_Pop+0x14a>
 8001414:	f023 0308 	bic.w	r3, r3, #8
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800141e:	f000 f86b 	bl	80014f8 <__gnu_Unwind_Save_WMMXD>
 8001422:	e740      	b.n	80012a6 <_Unwind_VRS_Pop+0x86>
 8001424:	4620      	mov	r0, r4
 8001426:	f022 0204 	bic.w	r2, r2, #4
 800142a:	f840 2bd0 	str.w	r2, [r0], #208
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	f000 f83c 	bl	80014ac <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	e7af      	b.n	8001398 <_Unwind_VRS_Pop+0x178>
 8001438:	a822      	add	r0, sp, #136	; 0x88
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f000 f826 	bl	800148c <__gnu_Unwind_Save_VFP>
 8001440:	9b01      	ldr	r3, [sp, #4]
 8001442:	e7b9      	b.n	80013b8 <_Unwind_VRS_Pop+0x198>
 8001444:	f041 0102 	orr.w	r1, r1, #2
 8001448:	f840 1b48 	str.w	r1, [r0], #72
 800144c:	f000 f826 	bl	800149c <__gnu_Unwind_Save_VFP_D>
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	e79c      	b.n	800138e <_Unwind_VRS_Pop+0x16e>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d003      	beq.n	8001460 <_Unwind_VRS_Pop+0x240>
 8001458:	2e0f      	cmp	r6, #15
 800145a:	f63f af5f 	bhi.w	800131c <_Unwind_VRS_Pop+0xfc>
 800145e:	e79f      	b.n	80013a0 <_Unwind_VRS_Pop+0x180>
 8001460:	a822      	add	r0, sp, #136	; 0x88
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f000 f812 	bl	800148c <__gnu_Unwind_Save_VFP>
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	e757      	b.n	800131c <_Unwind_VRS_Pop+0xfc>

0800146c <__restore_core_regs>:
 800146c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001470:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001474:	469c      	mov	ip, r3
 8001476:	46a6      	mov	lr, r4
 8001478:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800147c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001480:	46e5      	mov	sp, ip
 8001482:	bd00      	pop	{pc}

08001484 <__gnu_Unwind_Restore_VFP>:
 8001484:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <__gnu_Unwind_Save_VFP>:
 800148c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <__gnu_Unwind_Restore_VFP_D>:
 8001494:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <__gnu_Unwind_Save_VFP_D>:
 800149c:	ec80 0b20 	vstmia	r0, {d0-d15}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80014a4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80014ac:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop

080014b4 <__gnu_Unwind_Restore_WMMXD>:
 80014b4:	ecf0 0102 	ldfe	f0, [r0], #8
 80014b8:	ecf0 1102 	ldfe	f1, [r0], #8
 80014bc:	ecf0 2102 	ldfe	f2, [r0], #8
 80014c0:	ecf0 3102 	ldfe	f3, [r0], #8
 80014c4:	ecf0 4102 	ldfe	f4, [r0], #8
 80014c8:	ecf0 5102 	ldfe	f5, [r0], #8
 80014cc:	ecf0 6102 	ldfe	f6, [r0], #8
 80014d0:	ecf0 7102 	ldfe	f7, [r0], #8
 80014d4:	ecf0 8102 	ldfp	f0, [r0], #8
 80014d8:	ecf0 9102 	ldfp	f1, [r0], #8
 80014dc:	ecf0 a102 	ldfp	f2, [r0], #8
 80014e0:	ecf0 b102 	ldfp	f3, [r0], #8
 80014e4:	ecf0 c102 	ldfp	f4, [r0], #8
 80014e8:	ecf0 d102 	ldfp	f5, [r0], #8
 80014ec:	ecf0 e102 	ldfp	f6, [r0], #8
 80014f0:	ecf0 f102 	ldfp	f7, [r0], #8
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <__gnu_Unwind_Save_WMMXD>:
 80014f8:	ece0 0102 	stfe	f0, [r0], #8
 80014fc:	ece0 1102 	stfe	f1, [r0], #8
 8001500:	ece0 2102 	stfe	f2, [r0], #8
 8001504:	ece0 3102 	stfe	f3, [r0], #8
 8001508:	ece0 4102 	stfe	f4, [r0], #8
 800150c:	ece0 5102 	stfe	f5, [r0], #8
 8001510:	ece0 6102 	stfe	f6, [r0], #8
 8001514:	ece0 7102 	stfe	f7, [r0], #8
 8001518:	ece0 8102 	stfp	f0, [r0], #8
 800151c:	ece0 9102 	stfp	f1, [r0], #8
 8001520:	ece0 a102 	stfp	f2, [r0], #8
 8001524:	ece0 b102 	stfp	f3, [r0], #8
 8001528:	ece0 c102 	stfp	f4, [r0], #8
 800152c:	ece0 d102 	stfp	f5, [r0], #8
 8001530:	ece0 e102 	stfp	f6, [r0], #8
 8001534:	ece0 f102 	stfp	f7, [r0], #8
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop

0800153c <__gnu_Unwind_Restore_WMMXC>:
 800153c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001540:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001544:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001548:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <__gnu_Unwind_Save_WMMXC>:
 8001550:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001554:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001558:	fca0 a101 	stc2	1, cr10, [r0], #4
 800155c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <_Unwind_RaiseException>:
 8001564:	46ec      	mov	ip, sp
 8001566:	b500      	push	{lr}
 8001568:	e92d 5000 	stmdb	sp!, {ip, lr}
 800156c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001578:	a901      	add	r1, sp, #4
 800157a:	f7ff fbed 	bl	8000d58 <__gnu_Unwind_RaiseException>
 800157e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001582:	b012      	add	sp, #72	; 0x48
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <_Unwind_Resume>:
 8001588:	46ec      	mov	ip, sp
 800158a:	b500      	push	{lr}
 800158c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001590:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e92d 000c 	stmdb	sp!, {r2, r3}
 800159c:	a901      	add	r1, sp, #4
 800159e:	f7ff fc15 	bl	8000dcc <__gnu_Unwind_Resume>
 80015a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015a6:	b012      	add	sp, #72	; 0x48
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <_Unwind_Resume_or_Rethrow>:
 80015ac:	46ec      	mov	ip, sp
 80015ae:	b500      	push	{lr}
 80015b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015c0:	a901      	add	r1, sp, #4
 80015c2:	f7ff fc25 	bl	8000e10 <__gnu_Unwind_Resume_or_Rethrow>
 80015c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015ca:	b012      	add	sp, #72	; 0x48
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <_Unwind_ForcedUnwind>:
 80015d0:	46ec      	mov	ip, sp
 80015d2:	b500      	push	{lr}
 80015d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015e4:	ab01      	add	r3, sp, #4
 80015e6:	f7ff fbe7 	bl	8000db8 <__gnu_Unwind_ForcedUnwind>
 80015ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015ee:	b012      	add	sp, #72	; 0x48
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <_Unwind_Backtrace>:
 80015f4:	46ec      	mov	ip, sp
 80015f6:	b500      	push	{lr}
 80015f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001608:	aa01      	add	r2, sp, #4
 800160a:	f7ff fc61 	bl	8000ed0 <__gnu_Unwind_Backtrace>
 800160e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001612:	b012      	add	sp, #72	; 0x48
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <next_unwind_byte>:
 8001618:	7a02      	ldrb	r2, [r0, #8]
 800161a:	b91a      	cbnz	r2, 8001624 <next_unwind_byte+0xc>
 800161c:	7a43      	ldrb	r3, [r0, #9]
 800161e:	b943      	cbnz	r3, 8001632 <next_unwind_byte+0x1a>
 8001620:	20b0      	movs	r0, #176	; 0xb0
 8001622:	4770      	bx	lr
 8001624:	6803      	ldr	r3, [r0, #0]
 8001626:	3a01      	subs	r2, #1
 8001628:	7202      	strb	r2, [r0, #8]
 800162a:	021a      	lsls	r2, r3, #8
 800162c:	6002      	str	r2, [r0, #0]
 800162e:	0e18      	lsrs	r0, r3, #24
 8001630:	4770      	bx	lr
 8001632:	2103      	movs	r1, #3
 8001634:	6842      	ldr	r2, [r0, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	b410      	push	{r4}
 800163a:	7243      	strb	r3, [r0, #9]
 800163c:	6813      	ldr	r3, [r2, #0]
 800163e:	1d14      	adds	r4, r2, #4
 8001640:	7201      	strb	r1, [r0, #8]
 8001642:	021a      	lsls	r2, r3, #8
 8001644:	6044      	str	r4, [r0, #4]
 8001646:	6002      	str	r2, [r0, #0]
 8001648:	bc10      	pop	{r4}
 800164a:	0e18      	lsrs	r0, r3, #24
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <_Unwind_GetGR.constprop.0>:
 8001650:	2300      	movs	r3, #0
 8001652:	b500      	push	{lr}
 8001654:	b085      	sub	sp, #20
 8001656:	aa03      	add	r2, sp, #12
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	220c      	movs	r2, #12
 800165e:	f7ff fbe9 	bl	8000e34 <_Unwind_VRS_Get>
 8001662:	9803      	ldr	r0, [sp, #12]
 8001664:	b005      	add	sp, #20
 8001666:	f85d fb04 	ldr.w	pc, [sp], #4
 800166a:	bf00      	nop

0800166c <unwind_UCB_from_context>:
 800166c:	e7f0      	b.n	8001650 <_Unwind_GetGR.constprop.0>
 800166e:	bf00      	nop

08001670 <__gnu_unwind_execute>:
 8001670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001674:	4606      	mov	r6, r0
 8001676:	460f      	mov	r7, r1
 8001678:	f04f 0800 	mov.w	r8, #0
 800167c:	b085      	sub	sp, #20
 800167e:	4638      	mov	r0, r7
 8001680:	f7ff ffca 	bl	8001618 <next_unwind_byte>
 8001684:	28b0      	cmp	r0, #176	; 0xb0
 8001686:	4604      	mov	r4, r0
 8001688:	d023      	beq.n	80016d2 <__gnu_unwind_execute+0x62>
 800168a:	0605      	lsls	r5, r0, #24
 800168c:	d427      	bmi.n	80016de <__gnu_unwind_execute+0x6e>
 800168e:	2300      	movs	r3, #0
 8001690:	f10d 090c 	add.w	r9, sp, #12
 8001694:	4619      	mov	r1, r3
 8001696:	0085      	lsls	r5, r0, #2
 8001698:	220d      	movs	r2, #13
 800169a:	f8cd 9000 	str.w	r9, [sp]
 800169e:	4630      	mov	r0, r6
 80016a0:	f7ff fbc8 	bl	8000e34 <_Unwind_VRS_Get>
 80016a4:	b2ed      	uxtb	r5, r5
 80016a6:	9b03      	ldr	r3, [sp, #12]
 80016a8:	0660      	lsls	r0, r4, #25
 80016aa:	f105 0504 	add.w	r5, r5, #4
 80016ae:	bf4c      	ite	mi
 80016b0:	1b5d      	submi	r5, r3, r5
 80016b2:	18ed      	addpl	r5, r5, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	220d      	movs	r2, #13
 80016b8:	4619      	mov	r1, r3
 80016ba:	f8cd 9000 	str.w	r9, [sp]
 80016be:	4630      	mov	r0, r6
 80016c0:	9503      	str	r5, [sp, #12]
 80016c2:	f7ff fbdd 	bl	8000e80 <_Unwind_VRS_Set>
 80016c6:	4638      	mov	r0, r7
 80016c8:	f7ff ffa6 	bl	8001618 <next_unwind_byte>
 80016cc:	28b0      	cmp	r0, #176	; 0xb0
 80016ce:	4604      	mov	r4, r0
 80016d0:	d1db      	bne.n	800168a <__gnu_unwind_execute+0x1a>
 80016d2:	f1b8 0f00 	cmp.w	r8, #0
 80016d6:	f000 8094 	beq.w	8001802 <__gnu_unwind_execute+0x192>
 80016da:	2000      	movs	r0, #0
 80016dc:	e01c      	b.n	8001718 <__gnu_unwind_execute+0xa8>
 80016de:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80016e2:	2b80      	cmp	r3, #128	; 0x80
 80016e4:	d05c      	beq.n	80017a0 <__gnu_unwind_execute+0x130>
 80016e6:	2b90      	cmp	r3, #144	; 0x90
 80016e8:	d019      	beq.n	800171e <__gnu_unwind_execute+0xae>
 80016ea:	2ba0      	cmp	r3, #160	; 0xa0
 80016ec:	d02c      	beq.n	8001748 <__gnu_unwind_execute+0xd8>
 80016ee:	2bb0      	cmp	r3, #176	; 0xb0
 80016f0:	d03e      	beq.n	8001770 <__gnu_unwind_execute+0x100>
 80016f2:	2bc0      	cmp	r3, #192	; 0xc0
 80016f4:	d06b      	beq.n	80017ce <__gnu_unwind_execute+0x15e>
 80016f6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80016fa:	2bd0      	cmp	r3, #208	; 0xd0
 80016fc:	d10b      	bne.n	8001716 <__gnu_unwind_execute+0xa6>
 80016fe:	f000 0207 	and.w	r2, r0, #7
 8001702:	3201      	adds	r2, #1
 8001704:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001708:	2305      	movs	r3, #5
 800170a:	2101      	movs	r1, #1
 800170c:	4630      	mov	r0, r6
 800170e:	f7ff fd87 	bl	8001220 <_Unwind_VRS_Pop>
 8001712:	2800      	cmp	r0, #0
 8001714:	d0b3      	beq.n	800167e <__gnu_unwind_execute+0xe>
 8001716:	2009      	movs	r0, #9
 8001718:	b005      	add	sp, #20
 800171a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800171e:	f000 030d 	and.w	r3, r0, #13
 8001722:	2b0d      	cmp	r3, #13
 8001724:	d0f7      	beq.n	8001716 <__gnu_unwind_execute+0xa6>
 8001726:	2300      	movs	r3, #0
 8001728:	ad03      	add	r5, sp, #12
 800172a:	f000 020f 	and.w	r2, r0, #15
 800172e:	4619      	mov	r1, r3
 8001730:	9500      	str	r5, [sp, #0]
 8001732:	4630      	mov	r0, r6
 8001734:	f7ff fb7e 	bl	8000e34 <_Unwind_VRS_Get>
 8001738:	2300      	movs	r3, #0
 800173a:	9500      	str	r5, [sp, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	220d      	movs	r2, #13
 8001740:	4630      	mov	r0, r6
 8001742:	f7ff fb9d 	bl	8000e80 <_Unwind_VRS_Set>
 8001746:	e79a      	b.n	800167e <__gnu_unwind_execute+0xe>
 8001748:	43c3      	mvns	r3, r0
 800174a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	411a      	asrs	r2, r3
 8001754:	2300      	movs	r3, #0
 8001756:	0701      	lsls	r1, r0, #28
 8001758:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800175c:	bf48      	it	mi
 800175e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001762:	4619      	mov	r1, r3
 8001764:	4630      	mov	r0, r6
 8001766:	f7ff fd5b 	bl	8001220 <_Unwind_VRS_Pop>
 800176a:	2800      	cmp	r0, #0
 800176c:	d1d3      	bne.n	8001716 <__gnu_unwind_execute+0xa6>
 800176e:	e786      	b.n	800167e <__gnu_unwind_execute+0xe>
 8001770:	28b1      	cmp	r0, #177	; 0xb1
 8001772:	d057      	beq.n	8001824 <__gnu_unwind_execute+0x1b4>
 8001774:	28b2      	cmp	r0, #178	; 0xb2
 8001776:	d068      	beq.n	800184a <__gnu_unwind_execute+0x1da>
 8001778:	28b3      	cmp	r0, #179	; 0xb3
 800177a:	f000 8095 	beq.w	80018a8 <__gnu_unwind_execute+0x238>
 800177e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001782:	2bb4      	cmp	r3, #180	; 0xb4
 8001784:	d0c7      	beq.n	8001716 <__gnu_unwind_execute+0xa6>
 8001786:	2301      	movs	r3, #1
 8001788:	f000 0207 	and.w	r2, r0, #7
 800178c:	441a      	add	r2, r3
 800178e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001792:	4619      	mov	r1, r3
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff fd43 	bl	8001220 <_Unwind_VRS_Pop>
 800179a:	2800      	cmp	r0, #0
 800179c:	d1bb      	bne.n	8001716 <__gnu_unwind_execute+0xa6>
 800179e:	e76e      	b.n	800167e <__gnu_unwind_execute+0xe>
 80017a0:	4638      	mov	r0, r7
 80017a2:	f7ff ff39 	bl	8001618 <next_unwind_byte>
 80017a6:	0224      	lsls	r4, r4, #8
 80017a8:	4304      	orrs	r4, r0
 80017aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80017ae:	d0b2      	beq.n	8001716 <__gnu_unwind_execute+0xa6>
 80017b0:	2300      	movs	r3, #0
 80017b2:	0124      	lsls	r4, r4, #4
 80017b4:	b2a2      	uxth	r2, r4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4630      	mov	r0, r6
 80017ba:	f7ff fd31 	bl	8001220 <_Unwind_VRS_Pop>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d1a9      	bne.n	8001716 <__gnu_unwind_execute+0xa6>
 80017c2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80017c6:	bf18      	it	ne
 80017c8:	f04f 0801 	movne.w	r8, #1
 80017cc:	e757      	b.n	800167e <__gnu_unwind_execute+0xe>
 80017ce:	28c6      	cmp	r0, #198	; 0xc6
 80017d0:	d07d      	beq.n	80018ce <__gnu_unwind_execute+0x25e>
 80017d2:	28c7      	cmp	r0, #199	; 0xc7
 80017d4:	f000 8086 	beq.w	80018e4 <__gnu_unwind_execute+0x274>
 80017d8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80017dc:	2bc0      	cmp	r3, #192	; 0xc0
 80017de:	f000 8094 	beq.w	800190a <__gnu_unwind_execute+0x29a>
 80017e2:	28c8      	cmp	r0, #200	; 0xc8
 80017e4:	f000 809f 	beq.w	8001926 <__gnu_unwind_execute+0x2b6>
 80017e8:	28c9      	cmp	r0, #201	; 0xc9
 80017ea:	d194      	bne.n	8001716 <__gnu_unwind_execute+0xa6>
 80017ec:	4638      	mov	r0, r7
 80017ee:	f7ff ff13 	bl	8001618 <next_unwind_byte>
 80017f2:	0302      	lsls	r2, r0, #12
 80017f4:	f000 000f 	and.w	r0, r0, #15
 80017f8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80017fc:	3001      	adds	r0, #1
 80017fe:	4302      	orrs	r2, r0
 8001800:	e782      	b.n	8001708 <__gnu_unwind_execute+0x98>
 8001802:	ac03      	add	r4, sp, #12
 8001804:	4643      	mov	r3, r8
 8001806:	220e      	movs	r2, #14
 8001808:	4641      	mov	r1, r8
 800180a:	9400      	str	r4, [sp, #0]
 800180c:	4630      	mov	r0, r6
 800180e:	f7ff fb11 	bl	8000e34 <_Unwind_VRS_Get>
 8001812:	9400      	str	r4, [sp, #0]
 8001814:	4630      	mov	r0, r6
 8001816:	4643      	mov	r3, r8
 8001818:	220f      	movs	r2, #15
 800181a:	4641      	mov	r1, r8
 800181c:	f7ff fb30 	bl	8000e80 <_Unwind_VRS_Set>
 8001820:	4640      	mov	r0, r8
 8001822:	e779      	b.n	8001718 <__gnu_unwind_execute+0xa8>
 8001824:	4638      	mov	r0, r7
 8001826:	f7ff fef7 	bl	8001618 <next_unwind_byte>
 800182a:	2800      	cmp	r0, #0
 800182c:	f43f af73 	beq.w	8001716 <__gnu_unwind_execute+0xa6>
 8001830:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001834:	f47f af6f 	bne.w	8001716 <__gnu_unwind_execute+0xa6>
 8001838:	4602      	mov	r2, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4630      	mov	r0, r6
 800183e:	f7ff fcef 	bl	8001220 <_Unwind_VRS_Pop>
 8001842:	2800      	cmp	r0, #0
 8001844:	f47f af67 	bne.w	8001716 <__gnu_unwind_execute+0xa6>
 8001848:	e719      	b.n	800167e <__gnu_unwind_execute+0xe>
 800184a:	2300      	movs	r3, #0
 800184c:	f10d 090c 	add.w	r9, sp, #12
 8001850:	220d      	movs	r2, #13
 8001852:	4619      	mov	r1, r3
 8001854:	f8cd 9000 	str.w	r9, [sp]
 8001858:	4630      	mov	r0, r6
 800185a:	f7ff faeb 	bl	8000e34 <_Unwind_VRS_Get>
 800185e:	4638      	mov	r0, r7
 8001860:	f7ff feda 	bl	8001618 <next_unwind_byte>
 8001864:	0602      	lsls	r2, r0, #24
 8001866:	f04f 0402 	mov.w	r4, #2
 800186a:	d50c      	bpl.n	8001886 <__gnu_unwind_execute+0x216>
 800186c:	9b03      	ldr	r3, [sp, #12]
 800186e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001872:	40a0      	lsls	r0, r4
 8001874:	4403      	add	r3, r0
 8001876:	4638      	mov	r0, r7
 8001878:	9303      	str	r3, [sp, #12]
 800187a:	f7ff fecd 	bl	8001618 <next_unwind_byte>
 800187e:	0603      	lsls	r3, r0, #24
 8001880:	f104 0407 	add.w	r4, r4, #7
 8001884:	d4f2      	bmi.n	800186c <__gnu_unwind_execute+0x1fc>
 8001886:	2300      	movs	r3, #0
 8001888:	9903      	ldr	r1, [sp, #12]
 800188a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800188e:	40a2      	lsls	r2, r4
 8001890:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001894:	188c      	adds	r4, r1, r2
 8001896:	f8cd 9000 	str.w	r9, [sp]
 800189a:	4619      	mov	r1, r3
 800189c:	220d      	movs	r2, #13
 800189e:	4630      	mov	r0, r6
 80018a0:	9403      	str	r4, [sp, #12]
 80018a2:	f7ff faed 	bl	8000e80 <_Unwind_VRS_Set>
 80018a6:	e6ea      	b.n	800167e <__gnu_unwind_execute+0xe>
 80018a8:	4638      	mov	r0, r7
 80018aa:	f7ff feb5 	bl	8001618 <next_unwind_byte>
 80018ae:	2301      	movs	r3, #1
 80018b0:	0301      	lsls	r1, r0, #12
 80018b2:	f000 000f 	and.w	r0, r0, #15
 80018b6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80018ba:	18c2      	adds	r2, r0, r3
 80018bc:	430a      	orrs	r2, r1
 80018be:	4630      	mov	r0, r6
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff fcad 	bl	8001220 <_Unwind_VRS_Pop>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f47f af25 	bne.w	8001716 <__gnu_unwind_execute+0xa6>
 80018cc:	e6d7      	b.n	800167e <__gnu_unwind_execute+0xe>
 80018ce:	4638      	mov	r0, r7
 80018d0:	f7ff fea2 	bl	8001618 <next_unwind_byte>
 80018d4:	0301      	lsls	r1, r0, #12
 80018d6:	f000 000f 	and.w	r0, r0, #15
 80018da:	2303      	movs	r3, #3
 80018dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80018e0:	1c42      	adds	r2, r0, #1
 80018e2:	e7eb      	b.n	80018bc <__gnu_unwind_execute+0x24c>
 80018e4:	4638      	mov	r0, r7
 80018e6:	f7ff fe97 	bl	8001618 <next_unwind_byte>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	f43f af13 	beq.w	8001716 <__gnu_unwind_execute+0xa6>
 80018f0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80018f4:	f47f af0f 	bne.w	8001716 <__gnu_unwind_execute+0xa6>
 80018f8:	4602      	mov	r2, r0
 80018fa:	2104      	movs	r1, #4
 80018fc:	4630      	mov	r0, r6
 80018fe:	f7ff fc8f 	bl	8001220 <_Unwind_VRS_Pop>
 8001902:	2800      	cmp	r0, #0
 8001904:	f47f af07 	bne.w	8001716 <__gnu_unwind_execute+0xa6>
 8001908:	e6b9      	b.n	800167e <__gnu_unwind_execute+0xe>
 800190a:	2303      	movs	r3, #3
 800190c:	f000 020f 	and.w	r2, r0, #15
 8001910:	3201      	adds	r2, #1
 8001912:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001916:	4619      	mov	r1, r3
 8001918:	4630      	mov	r0, r6
 800191a:	f7ff fc81 	bl	8001220 <_Unwind_VRS_Pop>
 800191e:	2800      	cmp	r0, #0
 8001920:	f47f aef9 	bne.w	8001716 <__gnu_unwind_execute+0xa6>
 8001924:	e6ab      	b.n	800167e <__gnu_unwind_execute+0xe>
 8001926:	4638      	mov	r0, r7
 8001928:	f7ff fe76 	bl	8001618 <next_unwind_byte>
 800192c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001930:	f000 030f 	and.w	r3, r0, #15
 8001934:	3210      	adds	r2, #16
 8001936:	3301      	adds	r3, #1
 8001938:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800193c:	e6e4      	b.n	8001708 <__gnu_unwind_execute+0x98>
 800193e:	bf00      	nop

08001940 <__gnu_unwind_frame>:
 8001940:	b530      	push	{r4, r5, lr}
 8001942:	2403      	movs	r4, #3
 8001944:	460d      	mov	r5, r1
 8001946:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001948:	b085      	sub	sp, #20
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	f88d 400c 	strb.w	r4, [sp, #12]
 8001950:	79dc      	ldrb	r4, [r3, #7]
 8001952:	0212      	lsls	r2, r2, #8
 8001954:	3308      	adds	r3, #8
 8001956:	a901      	add	r1, sp, #4
 8001958:	4628      	mov	r0, r5
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	f7ff fe85 	bl	8001670 <__gnu_unwind_execute>
 8001966:	b005      	add	sp, #20
 8001968:	bd30      	pop	{r4, r5, pc}
 800196a:	bf00      	nop

0800196c <_Unwind_GetRegionStart>:
 800196c:	b508      	push	{r3, lr}
 800196e:	f7ff fe7d 	bl	800166c <unwind_UCB_from_context>
 8001972:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001974:	bd08      	pop	{r3, pc}
 8001976:	bf00      	nop

08001978 <_Unwind_GetLanguageSpecificData>:
 8001978:	b508      	push	{r3, lr}
 800197a:	f7ff fe77 	bl	800166c <unwind_UCB_from_context>
 800197e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001980:	79c3      	ldrb	r3, [r0, #7]
 8001982:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001986:	3008      	adds	r0, #8
 8001988:	bd08      	pop	{r3, pc}
 800198a:	bf00      	nop

0800198c <_Unwind_GetTextRelBase>:
 800198c:	b508      	push	{r3, lr}
 800198e:	f004 f9d3 	bl	8005d38 <abort>
 8001992:	bf00      	nop

08001994 <_Unwind_GetDataRelBase>:
 8001994:	b508      	push	{r3, lr}
 8001996:	f7ff fff9 	bl	800198c <_Unwind_GetTextRelBase>
 800199a:	bf00      	nop

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_InitTick+0x40>)
 80019a2:	7818      	ldrb	r0, [r3, #0]
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <HAL_InitTick+0x44>)
 80019ae:	6810      	ldr	r0, [r2, #0]
 80019b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b4:	f000 f88e 	bl	8001ad4 <HAL_SYSTICK_Config>
 80019b8:	b968      	cbnz	r0, 80019d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	2c0f      	cmp	r4, #15
 80019bc:	d901      	bls.n	80019c2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80019c0:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c2:	2200      	movs	r2, #0
 80019c4:	4621      	mov	r1, r4
 80019c6:	f04f 30ff 	mov.w	r0, #4294967295
 80019ca:	f000 f843 	bl	8001a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_InitTick+0x48>)
 80019d0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80019d2:	2000      	movs	r0, #0
 80019d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000008 	.word	0x20000008
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_Init>:
{
 80019e8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_Init+0x20>)
 80019ec:	6813      	ldr	r3, [r2, #0]
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f81b 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff ffce 	bl	800199c <HAL_InitTick>
  HAL_MspInit();
 8001a00:	f003 f952 	bl	8004ca8 <HAL_MspInit>
}
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd08      	pop	{r3, pc}
 8001a08:	40022000 	.word	0x40022000

08001a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_IncTick+0x10>)
 8001a0e:	6811      	ldr	r1, [r2, #0]
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_IncTick+0x14>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	440b      	add	r3, r1
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20002888 	.word	0x20002888
 8001a20:	20000000 	.word	0x20000000

08001a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a24:	4b01      	ldr	r3, [pc, #4]	; (8001a2c <HAL_GetTick+0x8>)
 8001a26:	6818      	ldr	r0, [r3, #0]
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20002888 	.word	0x20002888

08001a30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a32:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a3c:	0200      	lsls	r0, r0, #8
 8001a3e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a42:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001a44:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001a48:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a4c:	60d0      	str	r0, [r2, #12]
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a54:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_NVIC_SetPriority+0x5c>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5e:	f1c3 0407 	rsb	r4, r3, #7
 8001a62:	2c04      	cmp	r4, #4
 8001a64:	bf28      	it	cs
 8001a66:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a68:	1d1d      	adds	r5, r3, #4
 8001a6a:	2d06      	cmp	r5, #6
 8001a6c:	d917      	bls.n	8001a9e <HAL_NVIC_SetPriority+0x4a>
 8001a6e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	2501      	movs	r5, #1
 8001a72:	fa05 f404 	lsl.w	r4, r5, r4
 8001a76:	3c01      	subs	r4, #1
 8001a78:	4021      	ands	r1, r4
 8001a7a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	fa05 f303 	lsl.w	r3, r5, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001a86:	2800      	cmp	r0, #0
 8001a88:	db0b      	blt.n	8001aa2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	0109      	lsls	r1, r1, #4
 8001a8c:	b2c9      	uxtb	r1, r1
 8001a8e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a92:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a96:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a9a:	bc30      	pop	{r4, r5}
 8001a9c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e7e6      	b.n	8001a70 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	f000 000f 	and.w	r0, r0, #15
 8001aa6:	0109      	lsls	r1, r1, #4
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_NVIC_SetPriority+0x60>)
 8001aac:	5419      	strb	r1, [r3, r0]
 8001aae:	e7f4      	b.n	8001a9a <HAL_NVIC_SetPriority+0x46>
 8001ab0:	e000ed00 	.word	0xe000ed00
 8001ab4:	e000ed14 	.word	0xe000ed14

08001ab8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	db08      	blt.n	8001ace <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abc:	0942      	lsrs	r2, r0, #5
 8001abe:	f000 001f 	and.w	r0, r0, #31
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ac8:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <HAL_NVIC_EnableIRQ+0x18>)
 8001aca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	3801      	subs	r0, #1
 8001ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001ada:	d20a      	bcs.n	8001af2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_SYSTICK_Config+0x24>)
 8001ade:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	21f0      	movs	r1, #240	; 0xf0
 8001ae2:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_SYSTICK_Config+0x28>)
 8001ae4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	2000      	movs	r0, #0
 8001aea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b02:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001b04:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001b06:	2401      	movs	r4, #1
 8001b08:	40b4      	lsls	r4, r6
 8001b0a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b0c:	6804      	ldr	r4, [r0, #0]
 8001b0e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b10:	6843      	ldr	r3, [r0, #4]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d005      	beq.n	8001b22 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001b16:	6803      	ldr	r3, [r0, #0]
 8001b18:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001b1a:	6803      	ldr	r3, [r0, #0]
 8001b1c:	60da      	str	r2, [r3, #12]
  }
}
 8001b1e:	bc70      	pop	{r4, r5, r6}
 8001b20:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001b22:	6803      	ldr	r3, [r0, #0]
 8001b24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	60d9      	str	r1, [r3, #12]
 8001b2a:	e7f8      	b.n	8001b1e <DMA_SetConfig+0x1e>

08001b2c <HAL_DMA_Init>:
  if(hdma == NULL)
 8001b2c:	b360      	cbz	r0, 8001b88 <HAL_DMA_Init+0x5c>
{
 8001b2e:	b410      	push	{r4}
 8001b30:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b32:	6800      	ldr	r0, [r0, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <HAL_DMA_Init+0x60>)
 8001b36:	4402      	add	r2, r0
 8001b38:	4915      	ldr	r1, [pc, #84]	; (8001b90 <HAL_DMA_Init+0x64>)
 8001b3a:	fba1 1202 	umull	r1, r2, r1, r2
 8001b3e:	0912      	lsrs	r2, r2, #4
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_DMA_Init+0x68>)
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001b4e:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b50:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8001b54:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001b58:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b5c:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	68dc      	ldr	r4, [r3, #12]
 8001b60:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b64:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	695c      	ldr	r4, [r3, #20]
 8001b68:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6e:	69dc      	ldr	r4, [r3, #28]
 8001b70:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001b72:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8001b74:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	2000      	movs	r0, #0
 8001b78:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001b80:	f883 0020 	strb.w	r0, [r3, #32]
}
 8001b84:	bc10      	pop	{r4}
 8001b86:	4770      	bx	lr
    return HAL_ERROR;
 8001b88:	2001      	movs	r0, #1
 8001b8a:	4770      	bx	lr
 8001b8c:	bffdfff8 	.word	0xbffdfff8
 8001b90:	cccccccd 	.word	0xcccccccd
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_DMA_Start_IT>:
{
 8001b98:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001b9a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001b9e:	2c01      	cmp	r4, #1
 8001ba0:	d032      	beq.n	8001c08 <HAL_DMA_Start_IT+0x70>
 8001ba2:	2401      	movs	r4, #1
 8001ba4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001bac:	2c01      	cmp	r4, #1
 8001bae:	d004      	beq.n	8001bba <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
 8001bba:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001bc6:	6825      	ldr	r5, [r4, #0]
 8001bc8:	6828      	ldr	r0, [r5, #0]
 8001bca:	f020 0001 	bic.w	r0, r0, #1
 8001bce:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff ff95 	bl	8001b00 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001bd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bd8:	b15b      	cbz	r3, 8001bf2 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bda:	6822      	ldr	r2, [r4, #0]
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f043 030e 	orr.w	r3, r3, #14
 8001be2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2000      	movs	r0, #0
 8001bf0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf2:	6822      	ldr	r2, [r4, #0]
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f023 0304 	bic.w	r3, r3, #4
 8001bfa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bfc:	6822      	ldr	r2, [r4, #0]
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	f043 030a 	orr.w	r3, r3, #10
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e7ed      	b.n	8001be4 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001c08:	2002      	movs	r0, #2
}
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}

08001c0c <HAL_DMA_Abort_IT>:
{  
 8001c0c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c0e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c16:	2304      	movs	r3, #4
 8001c18:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1e:	6802      	ldr	r2, [r0, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 030e 	bic.w	r3, r3, #14
 8001c26:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c28:	6802      	ldr	r2, [r0, #0]
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_DMA_Abort_IT+0x90>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d014      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x58>
 8001c3a:	3214      	adds	r2, #20
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01f      	beq.n	8001c80 <HAL_DMA_Abort_IT+0x74>
 8001c40:	3214      	adds	r2, #20
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01e      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x78>
 8001c46:	3214      	adds	r2, #20
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01e      	beq.n	8001c8a <HAL_DMA_Abort_IT+0x7e>
 8001c4c:	3214      	adds	r2, #20
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01e      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x84>
 8001c52:	3214      	adds	r2, #20
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d002      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x52>
 8001c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5c:	e003      	b.n	8001c66 <HAL_DMA_Abort_IT+0x5a>
 8001c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c62:	e000      	b.n	8001c66 <HAL_DMA_Abort_IT+0x5a>
 8001c64:	2201      	movs	r2, #1
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_DMA_Abort_IT+0x94>)
 8001c68:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001c70:	2300      	movs	r3, #0
 8001c72:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c78:	b16b      	cbz	r3, 8001c96 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001c7a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c80:	2210      	movs	r2, #16
 8001c82:	e7f0      	b.n	8001c66 <HAL_DMA_Abort_IT+0x5a>
 8001c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c88:	e7ed      	b.n	8001c66 <HAL_DMA_Abort_IT+0x5a>
 8001c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c8e:	e7ea      	b.n	8001c66 <HAL_DMA_Abort_IT+0x5a>
 8001c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c94:	e7e7      	b.n	8001c66 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2000      	movs	r0, #0
}
 8001c98:	bd08      	pop	{r3, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40020008 	.word	0x40020008
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <HAL_DMA_IRQHandler>:
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001ca8:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001caa:	6804      	ldr	r4, [r0, #0]
 8001cac:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	408b      	lsls	r3, r1
 8001cb4:	421a      	tst	r2, r3
 8001cb6:	d036      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x82>
 8001cb8:	f015 0f04 	tst.w	r5, #4
 8001cbc:	d033      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x82>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f013 0f20 	tst.w	r3, #32
 8001cc4:	d103      	bne.n	8001cce <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cce:	6803      	ldr	r3, [r0, #0]
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <HAL_DMA_IRQHandler+0x13c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d014      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x5c>
 8001cd6:	3214      	adds	r2, #20
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d019      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
 8001cdc:	3214      	adds	r2, #20
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x70>
 8001ce2:	3214      	adds	r2, #20
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x76>
 8001ce8:	3214      	adds	r2, #20
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x7c>
 8001cee:	3214      	adds	r2, #20
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d002      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x56>
 8001cf4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cf8:	e003      	b.n	8001d02 <HAL_DMA_IRQHandler+0x5e>
 8001cfa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_IRQHandler+0x5e>
 8001d00:	2204      	movs	r2, #4
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_DMA_IRQHandler+0x140>)
 8001d04:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d067      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x138>
      hdma->XferHalfCpltCallback(hdma);
 8001d0c:	4798      	blx	r3
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	e7f6      	b.n	8001d02 <HAL_DMA_IRQHandler+0x5e>
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d18:	e7f3      	b.n	8001d02 <HAL_DMA_IRQHandler+0x5e>
 8001d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1e:	e7f0      	b.n	8001d02 <HAL_DMA_IRQHandler+0x5e>
 8001d20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d24:	e7ed      	b.n	8001d02 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d26:	2302      	movs	r3, #2
 8001d28:	408b      	lsls	r3, r1
 8001d2a:	421a      	tst	r2, r3
 8001d2c:	d03b      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x102>
 8001d2e:	f015 0f02 	tst.w	r5, #2
 8001d32:	d038      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	f013 0f20 	tst.w	r3, #32
 8001d3a:	d106      	bne.n	8001d4a <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	f023 030a 	bic.w	r3, r3, #10
 8001d42:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d4a:	6803      	ldr	r3, [r0, #0]
 8001d4c:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <HAL_DMA_IRQHandler+0x13c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d014      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
 8001d52:	3214      	adds	r2, #20
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xec>
 8001d58:	3214      	adds	r2, #20
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0xf0>
 8001d5e:	3214      	adds	r2, #20
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01a      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xf6>
 8001d64:	3214      	adds	r2, #20
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xfc>
 8001d6a:	3214      	adds	r2, #20
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d002      	beq.n	8001d76 <HAL_DMA_IRQHandler+0xd2>
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	e003      	b.n	8001d7e <HAL_DMA_IRQHandler+0xda>
 8001d76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_IRQHandler+0xda>
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_DMA_IRQHandler+0x140>)
 8001d80:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001d82:	2300      	movs	r3, #0
 8001d84:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d8a:	b33b      	cbz	r3, 8001ddc <HAL_DMA_IRQHandler+0x138>
      hdma->XferCpltCallback(hdma);
 8001d8c:	4798      	blx	r3
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d90:	2220      	movs	r2, #32
 8001d92:	e7f4      	b.n	8001d7e <HAL_DMA_IRQHandler+0xda>
 8001d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d98:	e7f1      	b.n	8001d7e <HAL_DMA_IRQHandler+0xda>
 8001d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9e:	e7ee      	b.n	8001d7e <HAL_DMA_IRQHandler+0xda>
 8001da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da4:	e7eb      	b.n	8001d7e <HAL_DMA_IRQHandler+0xda>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001da6:	2308      	movs	r3, #8
 8001da8:	fa03 f101 	lsl.w	r1, r3, r1
 8001dac:	420a      	tst	r2, r1
 8001dae:	d015      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x138>
 8001db0:	f015 0f08 	tst.w	r5, #8
 8001db4:	d012      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x138>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f023 030e 	bic.w	r3, r3, #14
 8001dbc:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dbe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001dc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	fa03 f202 	lsl.w	r2, r3, r2
 8001dc8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dca:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001dd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dd8:	b103      	cbz	r3, 8001ddc <HAL_DMA_IRQHandler+0x138>
      hdma->XferErrorCallback(hdma);
 8001dda:	4798      	blx	r3
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
 8001dde:	bf00      	nop
 8001de0:	40020008 	.word	0x40020008
 8001de4:	40020000 	.word	0x40020000

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dec:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001dee:	4634      	mov	r4, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df0:	e071      	b.n	8001ed6 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df2:	2d00      	cmp	r5, #0
 8001df4:	f000 80a2 	beq.w	8001f3c <HAL_GPIO_Init+0x154>
 8001df8:	2d01      	cmp	r5, #1
 8001dfa:	d100      	bne.n	8001dfe <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dfc:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dfe:	2bff      	cmp	r3, #255	; 0xff
 8001e00:	f200 80b0 	bhi.w	8001f64 <HAL_GPIO_Init+0x17c>
 8001e04:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	f200 80af 	bhi.w	8001f6a <HAL_GPIO_Init+0x182>
 8001e0c:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e0e:	f8de 2000 	ldr.w	r2, [lr]
 8001e12:	270f      	movs	r7, #15
 8001e14:	40af      	lsls	r7, r5
 8001e16:	ea22 0207 	bic.w	r2, r2, r7
 8001e1a:	fa06 f505 	lsl.w	r5, r6, r5
 8001e1e:	432a      	orrs	r2, r5
 8001e20:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e24:	684a      	ldr	r2, [r1, #4]
 8001e26:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001e2a:	d053      	beq.n	8001ed4 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4a64      	ldr	r2, [pc, #400]	; (8001fc0 <HAL_GPIO_Init+0x1d8>)
 8001e2e:	6995      	ldr	r5, [r2, #24]
 8001e30:	f045 0501 	orr.w	r5, r5, #1
 8001e34:	6195      	str	r5, [r2, #24]
 8001e36:	6992      	ldr	r2, [r2, #24]
 8001e38:	f002 0201 	and.w	r2, r2, #1
 8001e3c:	9201      	str	r2, [sp, #4]
 8001e3e:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001e40:	08a5      	lsrs	r5, r4, #2
 8001e42:	1caf      	adds	r7, r5, #2
 8001e44:	4a5f      	ldr	r2, [pc, #380]	; (8001fc4 <HAL_GPIO_Init+0x1dc>)
 8001e46:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4a:	f004 0703 	and.w	r7, r4, #3
 8001e4e:	00bf      	lsls	r7, r7, #2
 8001e50:	f04f 0e0f 	mov.w	lr, #15
 8001e54:	fa0e fe07 	lsl.w	lr, lr, r7
 8001e58:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e5c:	f8df e174 	ldr.w	lr, [pc, #372]	; 8001fd4 <HAL_GPIO_Init+0x1ec>
 8001e60:	4570      	cmp	r0, lr
 8001e62:	f000 8089 	beq.w	8001f78 <HAL_GPIO_Init+0x190>
 8001e66:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e6a:	4570      	cmp	r0, lr
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_GPIO_Init+0x196>
 8001e70:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e74:	4570      	cmp	r0, lr
 8001e76:	f000 8085 	beq.w	8001f84 <HAL_GPIO_Init+0x19c>
 8001e7a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e7e:	4570      	cmp	r0, lr
 8001e80:	d077      	beq.n	8001f72 <HAL_GPIO_Init+0x18a>
 8001e82:	f04f 0e04 	mov.w	lr, #4
 8001e86:	fa0e f707 	lsl.w	r7, lr, r7
 8001e8a:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8c:	3502      	adds	r5, #2
 8001e8e:	4f4d      	ldr	r7, [pc, #308]	; (8001fc4 <HAL_GPIO_Init+0x1dc>)
 8001e90:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e94:	684a      	ldr	r2, [r1, #4]
 8001e96:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001e9a:	d076      	beq.n	8001f8a <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4d4a      	ldr	r5, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001e9e:	682a      	ldr	r2, [r5, #0]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	684a      	ldr	r2, [r1, #4]
 8001ea6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001eaa:	d074      	beq.n	8001f96 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eac:	4d46      	ldr	r5, [pc, #280]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001eae:	686a      	ldr	r2, [r5, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb4:	684a      	ldr	r2, [r1, #4]
 8001eb6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8001eba:	d072      	beq.n	8001fa2 <HAL_GPIO_Init+0x1ba>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ebc:	4d42      	ldr	r5, [pc, #264]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001ebe:	68aa      	ldr	r2, [r5, #8]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	684a      	ldr	r2, [r1, #4]
 8001ec6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001eca:	d070      	beq.n	8001fae <HAL_GPIO_Init+0x1c6>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ecc:	4d3e      	ldr	r5, [pc, #248]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001ece:	68ea      	ldr	r2, [r5, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001ed4:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	680b      	ldr	r3, [r1, #0]
 8001ed8:	fa33 f204 	lsrs.w	r2, r3, r4
 8001edc:	d06d      	beq.n	8001fba <HAL_GPIO_Init+0x1d2>
    ioposition = (0x01uL << position);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1f5      	bne.n	8001ed4 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 8001ee8:	684d      	ldr	r5, [r1, #4]
 8001eea:	2d12      	cmp	r5, #18
 8001eec:	d030      	beq.n	8001f50 <HAL_GPIO_Init+0x168>
 8001eee:	d80b      	bhi.n	8001f08 <HAL_GPIO_Init+0x120>
 8001ef0:	2d02      	cmp	r5, #2
 8001ef2:	d02a      	beq.n	8001f4a <HAL_GPIO_Init+0x162>
 8001ef4:	f67f af7d 	bls.w	8001df2 <HAL_GPIO_Init+0xa>
 8001ef8:	2d03      	cmp	r5, #3
 8001efa:	d02f      	beq.n	8001f5c <HAL_GPIO_Init+0x174>
 8001efc:	2d11      	cmp	r5, #17
 8001efe:	f47f af7e 	bne.w	8001dfe <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f02:	68ce      	ldr	r6, [r1, #12]
 8001f04:	3604      	adds	r6, #4
          break;
 8001f06:	e77a      	b.n	8001dfe <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8001f08:	4f30      	ldr	r7, [pc, #192]	; (8001fcc <HAL_GPIO_Init+0x1e4>)
 8001f0a:	42bd      	cmp	r5, r7
 8001f0c:	d016      	beq.n	8001f3c <HAL_GPIO_Init+0x154>
 8001f0e:	d90c      	bls.n	8001f2a <HAL_GPIO_Init+0x142>
 8001f10:	4f2f      	ldr	r7, [pc, #188]	; (8001fd0 <HAL_GPIO_Init+0x1e8>)
 8001f12:	42bd      	cmp	r5, r7
 8001f14:	d012      	beq.n	8001f3c <HAL_GPIO_Init+0x154>
 8001f16:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001f1a:	42bd      	cmp	r5, r7
 8001f1c:	d00e      	beq.n	8001f3c <HAL_GPIO_Init+0x154>
 8001f1e:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001f22:	42bd      	cmp	r5, r7
 8001f24:	f47f af6b 	bne.w	8001dfe <HAL_GPIO_Init+0x16>
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x154>
 8001f2a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001f2e:	42bd      	cmp	r5, r7
 8001f30:	d004      	beq.n	8001f3c <HAL_GPIO_Init+0x154>
 8001f32:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001f36:	42bd      	cmp	r5, r7
 8001f38:	f47f af61 	bne.w	8001dfe <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f3c:	688d      	ldr	r5, [r1, #8]
 8001f3e:	b17d      	cbz	r5, 8001f60 <HAL_GPIO_Init+0x178>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f40:	2d01      	cmp	r5, #1
 8001f42:	d008      	beq.n	8001f56 <HAL_GPIO_Init+0x16e>
            GPIOx->BRR = ioposition;
 8001f44:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f46:	2608      	movs	r6, #8
 8001f48:	e759      	b.n	8001dfe <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4a:	68ce      	ldr	r6, [r1, #12]
 8001f4c:	3608      	adds	r6, #8
          break;
 8001f4e:	e756      	b.n	8001dfe <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f50:	68ce      	ldr	r6, [r1, #12]
 8001f52:	360c      	adds	r6, #12
          break;
 8001f54:	e753      	b.n	8001dfe <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8001f56:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2608      	movs	r6, #8
 8001f5a:	e750      	b.n	8001dfe <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	e74e      	b.n	8001dfe <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f60:	2604      	movs	r6, #4
 8001f62:	e74c      	b.n	8001dfe <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f64:	f100 0e04 	add.w	lr, r0, #4
 8001f68:	e74d      	b.n	8001e06 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f6a:	f1a4 0508 	sub.w	r5, r4, #8
 8001f6e:	00ad      	lsls	r5, r5, #2
 8001f70:	e74d      	b.n	8001e0e <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f72:	f04f 0e03 	mov.w	lr, #3
 8001f76:	e786      	b.n	8001e86 <HAL_GPIO_Init+0x9e>
 8001f78:	f04f 0e00 	mov.w	lr, #0
 8001f7c:	e783      	b.n	8001e86 <HAL_GPIO_Init+0x9e>
 8001f7e:	f04f 0e01 	mov.w	lr, #1
 8001f82:	e780      	b.n	8001e86 <HAL_GPIO_Init+0x9e>
 8001f84:	f04f 0e02 	mov.w	lr, #2
 8001f88:	e77d      	b.n	8001e86 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8a:	4d0f      	ldr	r5, [pc, #60]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001f8c:	682a      	ldr	r2, [r5, #0]
 8001f8e:	ea22 0203 	bic.w	r2, r2, r3
 8001f92:	602a      	str	r2, [r5, #0]
 8001f94:	e786      	b.n	8001ea4 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f96:	4d0c      	ldr	r5, [pc, #48]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001f98:	686a      	ldr	r2, [r5, #4]
 8001f9a:	ea22 0203 	bic.w	r2, r2, r3
 8001f9e:	606a      	str	r2, [r5, #4]
 8001fa0:	e788      	b.n	8001eb4 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4d09      	ldr	r5, [pc, #36]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001fa4:	68aa      	ldr	r2, [r5, #8]
 8001fa6:	ea22 0203 	bic.w	r2, r2, r3
 8001faa:	60aa      	str	r2, [r5, #8]
 8001fac:	e78a      	b.n	8001ec4 <HAL_GPIO_Init+0xdc>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fae:	4d06      	ldr	r5, [pc, #24]	; (8001fc8 <HAL_GPIO_Init+0x1e0>)
 8001fb0:	68ea      	ldr	r2, [r5, #12]
 8001fb2:	ea22 0303 	bic.w	r3, r2, r3
 8001fb6:	60eb      	str	r3, [r5, #12]
 8001fb8:	e78c      	b.n	8001ed4 <HAL_GPIO_Init+0xec>
  }
}
 8001fba:	b003      	add	sp, #12
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010400 	.word	0x40010400
 8001fcc:	10210000 	.word	0x10210000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	40010800 	.word	0x40010800

08001fd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd8:	b912      	cbnz	r2, 8001fe0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fda:	0409      	lsls	r1, r1, #16
 8001fdc:	6101      	str	r1, [r0, #16]
 8001fde:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001fe0:	6101      	str	r1, [r0, #16]
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001fe4:	68c3      	ldr	r3, [r0, #12]
 8001fe6:	420b      	tst	r3, r1
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fea:	6101      	str	r1, [r0, #16]
 8001fec:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	6141      	str	r1, [r0, #20]
 8001ff0:	4770      	bx	lr
	...

08001ff4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <RCC_Delay+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <RCC_Delay+0x28>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0a5b      	lsrs	r3, r3, #9
 8002002:	fb00 f003 	mul.w	r0, r0, r3
 8002006:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8002008:	bf00      	nop
  }
  while (Delay --);
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	9201      	str	r2, [sp, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <RCC_Delay+0x14>
}
 8002014:	b002      	add	sp, #8
 8002016:	4770      	bx	lr
 8002018:	20000008 	.word	0x20000008
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	f000 81f5 	beq.w	8002410 <HAL_RCC_OscConfig+0x3f0>
{
 8002026:	b570      	push	{r4, r5, r6, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	f013 0f01 	tst.w	r3, #1
 8002032:	d03d      	beq.n	80020b0 <HAL_RCC_OscConfig+0x90>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002034:	4bab      	ldr	r3, [pc, #684]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d02e      	beq.n	800209e <HAL_RCC_OscConfig+0x7e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002040:	4ba8      	ldr	r3, [pc, #672]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d023      	beq.n	8002094 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	6863      	ldr	r3, [r4, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d051      	beq.n	80020f8 <HAL_RCC_OscConfig+0xd8>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d155      	bne.n	8002104 <HAL_RCC_OscConfig+0xe4>
 8002058:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800205c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800206e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d060      	beq.n	8002138 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002076:	f7ff fcd5 	bl	8001a24 <HAL_GetTick>
 800207a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207c:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002084:	d114      	bne.n	80020b0 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002086:	f7ff fccd 	bl	8001a24 <HAL_GetTick>
 800208a:	1b40      	subs	r0, r0, r5
 800208c:	2864      	cmp	r0, #100	; 0x64
 800208e:	d9f5      	bls.n	800207c <HAL_RCC_OscConfig+0x5c>
            return HAL_TIMEOUT;
 8002090:	2003      	movs	r0, #3
 8002092:	e1c2      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002094:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800209c:	d0d6      	beq.n	800204c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020a6:	d003      	beq.n	80020b0 <HAL_RCC_OscConfig+0x90>
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 81b2 	beq.w	8002414 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	f013 0f02 	tst.w	r3, #2
 80020b6:	d065      	beq.n	8002184 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b8:	4b8a      	ldr	r3, [pc, #552]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f013 0f0c 	tst.w	r3, #12
 80020c0:	d04e      	beq.n	8002160 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d043      	beq.n	8002156 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d079      	beq.n	80021c8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80020d4:	2201      	movs	r2, #1
 80020d6:	4b84      	ldr	r3, [pc, #528]	; (80022e8 <HAL_RCC_OscConfig+0x2c8>)
 80020d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020da:	f7ff fca3 	bl	8001a24 <HAL_GetTick>
 80020de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f013 0f02 	tst.w	r3, #2
 80020e8:	d165      	bne.n	80021b6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff fc9b 	bl	8001a24 <HAL_GetTick>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e190      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	4a7a      	ldr	r2, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e7b5      	b.n	8002070 <HAL_RCC_OscConfig+0x50>
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d009      	beq.n	800211e <HAL_RCC_OscConfig+0xfe>
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e7a8      	b.n	8002070 <HAL_RCC_OscConfig+0x50>
 800211e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002122:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e79b      	b.n	8002070 <HAL_RCC_OscConfig+0x50>
        tickstart = HAL_GetTick();
 8002138:	f7ff fc74 	bl	8001a24 <HAL_GetTick>
 800213c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002146:	d0b3      	beq.n	80020b0 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fc6c 	bl	8001a24 <HAL_GetTick>
 800214c:	1b40      	subs	r0, r0, r5
 800214e:	2864      	cmp	r0, #100	; 0x64
 8002150:	d9f5      	bls.n	800213e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002152:	2003      	movs	r0, #3
 8002154:	e161      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800215e:	d1b6      	bne.n	80020ce <HAL_RCC_OscConfig+0xae>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002160:	4b60      	ldr	r3, [pc, #384]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f013 0f02 	tst.w	r3, #2
 8002168:	d004      	beq.n	8002174 <HAL_RCC_OscConfig+0x154>
 800216a:	6923      	ldr	r3, [r4, #16]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
 8002172:	e152      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4a5b      	ldr	r2, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800217c:	6961      	ldr	r1, [r4, #20]
 800217e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002182:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	f013 0f08 	tst.w	r3, #8
 800218a:	d032      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	69a3      	ldr	r3, [r4, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06e      	beq.n	8002270 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_LSI_ENABLE();
 8002192:	2201      	movs	r2, #1
 8002194:	4b55      	ldr	r3, [pc, #340]	; (80022ec <HAL_RCC_OscConfig+0x2cc>)
 8002196:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002198:	f7ff fc44 	bl	8001a24 <HAL_GetTick>
 800219c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f013 0f02 	tst.w	r3, #2
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fc3c 	bl	8001a24 <HAL_GetTick>
 80021ac:	1b40      	subs	r0, r0, r5
 80021ae:	2802      	cmp	r0, #2
 80021b0:	d9f5      	bls.n	800219e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80021b2:	2003      	movs	r0, #3
 80021b4:	e131      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021be:	6961      	ldr	r1, [r4, #20]
 80021c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e7dd      	b.n	8002184 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80021c8:	2200      	movs	r2, #0
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_OscConfig+0x2c8>)
 80021cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ce:	f7ff fc29 	bl	8001a24 <HAL_GetTick>
 80021d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f013 0f02 	tst.w	r3, #2
 80021dc:	d0d2      	beq.n	8002184 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fc21 	bl	8001a24 <HAL_GetTick>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	2802      	cmp	r0, #2
 80021e6:	d9f5      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80021e8:	2003      	movs	r0, #3
 80021ea:	e116      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f7ff ff01 	bl	8001ff4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f013 0f04 	tst.w	r3, #4
 80021f8:	f000 8098 	beq.w	800232c <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002204:	d146      	bne.n	8002294 <HAL_RCC_OscConfig+0x274>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800220e:	61da      	str	r2, [r3, #28]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800221a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x2d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002224:	d038      	beq.n	8002298 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	68e3      	ldr	r3, [r4, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d049      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2a0>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d14d      	bne.n	80022cc <HAL_RCC_OscConfig+0x2ac>
 8002230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002234:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002238:	6a1a      	ldr	r2, [r3, #32]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	621a      	str	r2, [r3, #32]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002248:	68e3      	ldr	r3, [r4, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d05c      	beq.n	8002308 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 800224e:	f7ff fbe9 	bl	8001a24 <HAL_GetTick>
 8002252:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f013 0f02 	tst.w	r3, #2
 800225c:	d165      	bne.n	800232a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff fbe1 	bl	8001a24 <HAL_GetTick>
 8002262:	1b80      	subs	r0, r0, r6
 8002264:	f241 3388 	movw	r3, #5000	; 0x1388
 8002268:	4298      	cmp	r0, r3
 800226a:	d9f3      	bls.n	8002254 <HAL_RCC_OscConfig+0x234>
          return HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
 800226e:	e0d4      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_LSI_DISABLE();
 8002270:	2200      	movs	r2, #0
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x2cc>)
 8002274:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002276:	f7ff fbd5 	bl	8001a24 <HAL_GetTick>
 800227a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f013 0f02 	tst.w	r3, #2
 8002284:	d0b5      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002286:	f7ff fbcd 	bl	8001a24 <HAL_GetTick>
 800228a:	1b40      	subs	r0, r0, r5
 800228c:	2802      	cmp	r0, #2
 800228e:	d9f5      	bls.n	800227c <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8002290:	2003      	movs	r0, #3
 8002292:	e0c2      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8002294:	2500      	movs	r5, #0
 8002296:	e7c1      	b.n	800221c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x2d0>)
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022a2:	f7ff fbbf 	bl	8001a24 <HAL_GetTick>
 80022a6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x2d0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022b0:	d1b9      	bne.n	8002226 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fbb7 	bl	8001a24 <HAL_GetTick>
 80022b6:	1b80      	subs	r0, r0, r6
 80022b8:	2864      	cmp	r0, #100	; 0x64
 80022ba:	d9f5      	bls.n	80022a8 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 80022bc:	2003      	movs	r0, #3
 80022be:	e0ac      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80022c2:	6a13      	ldr	r3, [r2, #32]
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e7bd      	b.n	8002248 <HAL_RCC_OscConfig+0x228>
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d011      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2d4>
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_RCC_OscConfig+0x2c4>)
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	621a      	str	r2, [r3, #32]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	621a      	str	r2, [r3, #32]
 80022e2:	e7b1      	b.n	8002248 <HAL_RCC_OscConfig+0x228>
 80022e4:	40021000 	.word	0x40021000
 80022e8:	42420000 	.word	0x42420000
 80022ec:	42420480 	.word	0x42420480
 80022f0:	40007000 	.word	0x40007000
 80022f4:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	f042 0204 	orr.w	r2, r2, #4
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	621a      	str	r2, [r3, #32]
 8002306:	e79f      	b.n	8002248 <HAL_RCC_OscConfig+0x228>
      tickstart = HAL_GetTick();
 8002308:	f7ff fb8c 	bl	8001a24 <HAL_GetTick>
 800230c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f013 0f02 	tst.w	r3, #2
 8002316:	d008      	beq.n	800232a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7ff fb84 	bl	8001a24 <HAL_GetTick>
 800231c:	1b80      	subs	r0, r0, r6
 800231e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002322:	4298      	cmp	r0, r3
 8002324:	d9f3      	bls.n	800230e <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8002326:	2003      	movs	r0, #3
 8002328:	e077      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 800232a:	b9e5      	cbnz	r5, 8002366 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232c:	69e3      	ldr	r3, [r4, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d072      	beq.n	8002418 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002332:	4a3d      	ldr	r2, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 8002334:	6852      	ldr	r2, [r2, #4]
 8002336:	f002 020c 	and.w	r2, r2, #12
 800233a:	2a08      	cmp	r2, #8
 800233c:	d056      	beq.n	80023ec <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233e:	2b02      	cmp	r3, #2
 8002340:	d017      	beq.n	8002372 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8002342:	2200      	movs	r2, #0
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_OscConfig+0x40c>)
 8002346:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002348:	f7ff fb6c 	bl	8001a24 <HAL_GetTick>
 800234c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002356:	d047      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff fb64 	bl	8001a24 <HAL_GetTick>
 800235c:	1b00      	subs	r0, r0, r4
 800235e:	2802      	cmp	r0, #2
 8002360:	d9f5      	bls.n	800234e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	e059      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 8002368:	69d3      	ldr	r3, [r2, #28]
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	61d3      	str	r3, [r2, #28]
 8002370:	e7dc      	b.n	800232c <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8002372:	2200      	movs	r2, #0
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_OscConfig+0x40c>)
 8002376:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002378:	f7ff fb54 	bl	8001a24 <HAL_GetTick>
 800237c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002386:	d006      	beq.n	8002396 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7ff fb4c 	bl	8001a24 <HAL_GetTick>
 800238c:	1b40      	subs	r0, r0, r5
 800238e:	2802      	cmp	r0, #2
 8002390:	d9f5      	bls.n	800237e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002392:	2003      	movs	r0, #3
 8002394:	e041      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002396:	6a23      	ldr	r3, [r4, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d01a      	beq.n	80023d4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239e:	4922      	ldr	r1, [pc, #136]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 80023a0:	684b      	ldr	r3, [r1, #4]
 80023a2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80023a6:	6a22      	ldr	r2, [r4, #32]
 80023a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80023aa:	4302      	orrs	r2, r0
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80023b0:	2201      	movs	r2, #1
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <HAL_RCC_OscConfig+0x40c>)
 80023b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023b6:	f7ff fb35 	bl	8001a24 <HAL_GetTick>
 80023ba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023c4:	d10e      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7ff fb2d 	bl	8001a24 <HAL_GetTick>
 80023ca:	1b00      	subs	r0, r0, r4
 80023cc:	2802      	cmp	r0, #2
 80023ce:	d9f5      	bls.n	80023bc <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80023d0:	2003      	movs	r0, #3
 80023d2:	e022      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 80023d6:	6853      	ldr	r3, [r2, #4]
 80023d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023dc:	68a1      	ldr	r1, [r4, #8]
 80023de:	430b      	orrs	r3, r1
 80023e0:	6053      	str	r3, [r2, #4]
 80023e2:	e7dc      	b.n	800239e <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 80023e4:	2000      	movs	r0, #0
 80023e6:	e018      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e016      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d016      	beq.n	800241e <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x408>)
 80023f2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80023f8:	6a22      	ldr	r2, [r4, #32]
 80023fa:	4291      	cmp	r1, r2
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002402:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002406:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d00a      	beq.n	8002422 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
 800240e:	e004      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002410:	2001      	movs	r0, #1
 8002412:	4770      	bx	lr
        return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002418:	2000      	movs	r0, #0
}
 800241a:	b002      	add	sp, #8
 800241c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e7fb      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002422:	2000      	movs	r0, #0
 8002424:	e7f9      	b.n	800241a <HAL_RCC_OscConfig+0x3fa>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420060 	.word	0x42420060

08002430 <HAL_RCC_GetSysClockFreq>:
{
 8002430:	b510      	push	{r4, lr}
 8002432:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002434:	4c15      	ldr	r4, [pc, #84]	; (800248c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002436:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800243a:	f10d 0e18 	add.w	lr, sp, #24
 800243e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002442:	8a23      	ldrh	r3, [r4, #16]
 8002444:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_RCC_GetSysClockFreq+0x60>)
 800244a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800244c:	f003 020c 	and.w	r2, r3, #12
 8002450:	2a08      	cmp	r2, #8
 8002452:	d118      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002454:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002458:	4472      	add	r2, lr
 800245a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800245e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002462:	d103      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <HAL_RCC_GetSysClockFreq+0x64>)
 8002466:	fb00 f002 	mul.w	r0, r0, r2
 800246a:	e00d      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_RCC_GetSysClockFreq+0x60>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002474:	4473      	add	r3, lr
 8002476:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247a:	4807      	ldr	r0, [pc, #28]	; (8002498 <HAL_RCC_GetSysClockFreq+0x68>)
 800247c:	fb00 f002 	mul.w	r0, r0, r2
 8002480:	fbb0 f0f3 	udiv	r0, r0, r3
 8002484:	e000      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002488:	b006      	add	sp, #24
 800248a:	bd10      	pop	{r4, pc}
 800248c:	08005de8 	.word	0x08005de8
 8002490:	40021000 	.word	0x40021000
 8002494:	003d0900 	.word	0x003d0900
 8002498:	007a1200 	.word	0x007a1200

0800249c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800249c:	2800      	cmp	r0, #0
 800249e:	f000 80a3 	beq.w	80025e8 <HAL_RCC_ClockConfig+0x14c>
{
 80024a2:	b570      	push	{r4, r5, r6, lr}
 80024a4:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a6:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x154>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	428b      	cmp	r3, r1
 80024b0:	d20c      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <HAL_RCC_ClockConfig+0x154>)
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4299      	cmp	r1, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	f013 0f02 	tst.w	r3, #2
 80024d2:	d017      	beq.n	8002504 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	f013 0f04 	tst.w	r3, #4
 80024d8:	d004      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024da:	4a46      	ldr	r2, [pc, #280]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 80024dc:	6853      	ldr	r3, [r2, #4]
 80024de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024e2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	f013 0f08 	tst.w	r3, #8
 80024ea:	d004      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4a41      	ldr	r2, [pc, #260]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 80024ee:	6853      	ldr	r3, [r2, #4]
 80024f0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f6:	4a3f      	ldr	r2, [pc, #252]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 80024f8:	6853      	ldr	r3, [r2, #4]
 80024fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fe:	68a0      	ldr	r0, [r4, #8]
 8002500:	4303      	orrs	r3, r0
 8002502:	6053      	str	r3, [r2, #4]
 8002504:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f013 0f01 	tst.w	r3, #1
 800250c:	d031      	beq.n	8002572 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002514:	2b02      	cmp	r3, #2
 8002516:	d025      	beq.n	8002564 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	4a36      	ldr	r2, [pc, #216]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	f012 0f02 	tst.w	r2, #2
 8002520:	d064      	beq.n	80025ec <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4934      	ldr	r1, [pc, #208]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 8002524:	684a      	ldr	r2, [r1, #4]
 8002526:	f022 0203 	bic.w	r2, r2, #3
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800252e:	f7ff fa79 	bl	8001a24 <HAL_GetTick>
 8002532:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	6862      	ldr	r2, [r4, #4]
 800253e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002542:	d016      	beq.n	8002572 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff fa6e 	bl	8001a24 <HAL_GetTick>
 8002548:	1b80      	subs	r0, r0, r6
 800254a:	f241 3388 	movw	r3, #5000	; 0x1388
 800254e:	4298      	cmp	r0, r3
 8002550:	d9f0      	bls.n	8002534 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002552:	2003      	movs	r0, #3
 8002554:	bd70      	pop	{r4, r5, r6, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800255e:	d1e0      	bne.n	8002522 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002560:	2001      	movs	r0, #1
 8002562:	bd70      	pop	{r4, r5, r6, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800256c:	d1d9      	bne.n	8002522 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800256e:	2001      	movs	r0, #1
 8002570:	bd70      	pop	{r4, r5, r6, pc}
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <HAL_RCC_ClockConfig+0x154>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	429d      	cmp	r5, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_RCC_ClockConfig+0x154>)
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	f023 0307 	bic.w	r3, r3, #7
 8002586:	432b      	orrs	r3, r5
 8002588:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	429d      	cmp	r5, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8002594:	2001      	movs	r0, #1
}
 8002596:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f013 0f04 	tst.w	r3, #4
 800259e:	d006      	beq.n	80025ae <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 80025a2:	6853      	ldr	r3, [r2, #4]
 80025a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025a8:	68e1      	ldr	r1, [r4, #12]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	f013 0f08 	tst.w	r3, #8
 80025b4:	d007      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025b6:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 80025b8:	6853      	ldr	r3, [r2, #4]
 80025ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025be:	6921      	ldr	r1, [r4, #16]
 80025c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025c4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c6:	f7ff ff33 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x158>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x15c>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	40d8      	lsrs	r0, r3
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_ClockConfig+0x160>)
 80025da:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_ClockConfig+0x164>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	f7ff f9dc 	bl	800199c <HAL_InitTick>
  return HAL_OK;
 80025e4:	2000      	movs	r0, #0
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
 80025ea:	4770      	bx	lr
        return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08006228 	.word	0x08006228
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000004 	.word	0x20000004

08002604 <HAL_RCC_GetHCLKFreq>:
}
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <HAL_RCC_GetHCLKFreq+0x8>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000008 	.word	0x20000008

08002610 <HAL_RCC_GetPCLK1Freq>:
{
 8002610:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002612:	f7ff fff7 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800261e:	4a03      	ldr	r2, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
}
 8002622:	40d8      	lsrs	r0, r3
 8002624:	bd08      	pop	{r3, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	08006238 	.word	0x08006238

08002630 <HAL_RCC_GetPCLK2Freq>:
{
 8002630:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002632:	f7ff ffe7 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800263e:	4a03      	ldr	r2, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
}
 8002642:	40d8      	lsrs	r0, r3
 8002644:	bd08      	pop	{r3, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	08006238 	.word	0x08006238

08002650 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002650:	6802      	ldr	r2, [r0, #0]
 8002652:	68d3      	ldr	r3, [r2, #12]
 8002654:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002658:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800265a:	2320      	movs	r3, #32
 800265c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8002660:	4770      	bx	lr

08002662 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002662:	6802      	ldr	r2, [r0, #0]
 8002664:	68d3      	ldr	r3, [r2, #12]
 8002666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800266a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266c:	6802      	ldr	r2, [r0, #0]
 800266e:	6953      	ldr	r3, [r2, #20]
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002676:	2320      	movs	r3, #32
 8002678:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800267c:	4770      	bx	lr

0800267e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800267e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b21      	cmp	r3, #33	; 0x21
 8002686:	d001      	beq.n	800268c <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002688:	2002      	movs	r0, #2
 800268a:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800268c:	6883      	ldr	r3, [r0, #8]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d017      	beq.n	80026c4 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002694:	6802      	ldr	r2, [r0, #0]
 8002696:	6a03      	ldr	r3, [r0, #32]
 8002698:	1c59      	adds	r1, r3, #1
 800269a:	6201      	str	r1, [r0, #32]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 80026a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80026aa:	b9db      	cbnz	r3, 80026e4 <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ac:	6802      	ldr	r2, [r0, #0]
 80026ae:	68d3      	ldr	r3, [r2, #12]
 80026b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026b6:	6802      	ldr	r2, [r0, #0]
 80026b8:	68d3      	ldr	r3, [r2, #12]
 80026ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026be:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80026c0:	2000      	movs	r0, #0
 80026c2:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026c4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026c6:	6802      	ldr	r2, [r0, #0]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ce:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026d0:	6903      	ldr	r3, [r0, #16]
 80026d2:	b91b      	cbnz	r3, 80026dc <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 80026d4:	6a03      	ldr	r3, [r0, #32]
 80026d6:	3302      	adds	r3, #2
 80026d8:	6203      	str	r3, [r0, #32]
 80026da:	e7e1      	b.n	80026a0 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 80026dc:	6a03      	ldr	r3, [r0, #32]
 80026de:	3301      	adds	r3, #1
 80026e0:	6203      	str	r3, [r0, #32]
 80026e2:	e7dd      	b.n	80026a0 <UART_Transmit_IT+0x22>
    return HAL_OK;
 80026e4:	2000      	movs	r0, #0
  }
}
 80026e6:	4770      	bx	lr

080026e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	6802      	ldr	r2, [r0, #0]
 80026ee:	6913      	ldr	r3, [r2, #16]
 80026f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f4:	68c1      	ldr	r1, [r0, #12]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026fa:	6883      	ldr	r3, [r0, #8]
 80026fc:	6902      	ldr	r2, [r0, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	6942      	ldr	r2, [r0, #20]
 8002702:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8002704:	6801      	ldr	r1, [r0, #0]
 8002706:	68ca      	ldr	r2, [r1, #12]
 8002708:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800270c:	f022 020c 	bic.w	r2, r2, #12
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002714:	6802      	ldr	r2, [r0, #0]
 8002716:	6953      	ldr	r3, [r2, #20]
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	6981      	ldr	r1, [r0, #24]
 800271e:	430b      	orrs	r3, r1
 8002720:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002722:	6802      	ldr	r2, [r0, #0]
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <UART_SetConfig+0xc4>)
 8002726:	429a      	cmp	r2, r3
 8002728:	d01f      	beq.n	800276a <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800272a:	f7ff ff71 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800272e:	6821      	ldr	r1, [r4, #0]
 8002730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002734:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002738:	6863      	ldr	r3, [r4, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002740:	4d1b      	ldr	r5, [pc, #108]	; (80027b0 <UART_SetConfig+0xc8>)
 8002742:	fba5 3200 	umull	r3, r2, r5, r0
 8002746:	0954      	lsrs	r4, r2, #5
 8002748:	2264      	movs	r2, #100	; 0x64
 800274a:	fb02 0214 	mls	r2, r2, r4, r0
 800274e:	0113      	lsls	r3, r2, #4
 8002750:	3332      	adds	r3, #50	; 0x32
 8002752:	fba5 2303 	umull	r2, r3, r5, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800275c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	4413      	add	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
 8002768:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800276a:	f7ff ff61 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800276e:	6821      	ldr	r1, [r4, #0]
 8002770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002774:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002780:	4d0b      	ldr	r5, [pc, #44]	; (80027b0 <UART_SetConfig+0xc8>)
 8002782:	fba5 3200 	umull	r3, r2, r5, r0
 8002786:	0954      	lsrs	r4, r2, #5
 8002788:	2264      	movs	r2, #100	; 0x64
 800278a:	fb02 0214 	mls	r2, r2, r4, r0
 800278e:	0113      	lsls	r3, r2, #4
 8002790:	3332      	adds	r3, #50	; 0x32
 8002792:	fba5 2303 	umull	r2, r3, r5, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800279c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	4413      	add	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
 80027a8:	bd38      	pop	{r3, r4, r5, pc}
 80027aa:	bf00      	nop
 80027ac:	40013800 	.word	0x40013800
 80027b0:	51eb851f 	.word	0x51eb851f

080027b4 <UART_WaitOnFlagUntilTimeout>:
{
 80027b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b8:	4605      	mov	r5, r0
 80027ba:	460f      	mov	r7, r1
 80027bc:	4616      	mov	r6, r2
 80027be:	4698      	mov	r8, r3
 80027c0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c2:	682b      	ldr	r3, [r5, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ea37 0303 	bics.w	r3, r7, r3
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	42b3      	cmp	r3, r6
 80027d2:	d11e      	bne.n	8002812 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80027d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80027d8:	d0f3      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027da:	b12c      	cbz	r4, 80027e8 <UART_WaitOnFlagUntilTimeout+0x34>
 80027dc:	f7ff f922 	bl	8001a24 <HAL_GetTick>
 80027e0:	eba0 0008 	sub.w	r0, r0, r8
 80027e4:	4284      	cmp	r4, r0
 80027e6:	d2ec      	bcs.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027e8:	682a      	ldr	r2, [r5, #0]
 80027ea:	68d3      	ldr	r3, [r2, #12]
 80027ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027f0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f2:	682a      	ldr	r2, [r5, #0]
 80027f4:	6953      	ldr	r3, [r2, #20]
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80027fc:	2320      	movs	r3, #32
 80027fe:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002806:	2300      	movs	r3, #0
 8002808:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800280c:	2003      	movs	r0, #3
 800280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002812:	2000      	movs	r0, #0
}
 8002814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002818 <HAL_UART_Init>:
  if (huart == NULL)
 8002818:	b358      	cbz	r0, 8002872 <HAL_UART_Init+0x5a>
{
 800281a:	b510      	push	{r4, lr}
 800281c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800281e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002822:	b30b      	cbz	r3, 8002868 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002824:	2324      	movs	r3, #36	; 0x24
 8002826:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	68d3      	ldr	r3, [r2, #12]
 800282e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002832:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff ff57 	bl	80026e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	6913      	ldr	r3, [r2, #16]
 800283e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002842:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	6953      	ldr	r3, [r2, #20]
 8002848:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800284c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	68d3      	ldr	r3, [r2, #12]
 8002852:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002856:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	2000      	movs	r0, #0
 800285a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800285c:	2320      	movs	r3, #32
 800285e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002862:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002866:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002868:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800286c:	f002 fa3e 	bl	8004cec <HAL_UART_MspInit>
 8002870:	e7d8      	b.n	8002824 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002872:	2001      	movs	r0, #1
 8002874:	4770      	bx	lr

08002876 <HAL_UART_Transmit>:
{
 8002876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800287e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b20      	cmp	r3, #32
 8002886:	d004      	beq.n	8002892 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
}
 800288a:	4618      	mov	r0, r3
 800288c:	b002      	add	sp, #8
 800288e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002892:	4604      	mov	r4, r0
 8002894:	460d      	mov	r5, r1
 8002896:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002898:	2900      	cmp	r1, #0
 800289a:	d055      	beq.n	8002948 <HAL_UART_Transmit+0xd2>
 800289c:	2a00      	cmp	r2, #0
 800289e:	d055      	beq.n	800294c <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 80028a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Transmit+0x36>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e7ee      	b.n	800288a <HAL_UART_Transmit+0x14>
 80028ac:	2301      	movs	r3, #1
 80028ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b6:	2321      	movs	r3, #33	; 0x21
 80028b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80028bc:	f7ff f8b2 	bl	8001a24 <HAL_GetTick>
 80028c0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80028c2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80028c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028ca:	e010      	b.n	80028ee <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028cc:	9600      	str	r6, [sp, #0]
 80028ce:	463b      	mov	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff ff6d 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d138      	bne.n	8002950 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028de:	6822      	ldr	r2, [r4, #0]
 80028e0:	882b      	ldrh	r3, [r5, #0]
 80028e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028e8:	6923      	ldr	r3, [r4, #16]
 80028ea:	b9cb      	cbnz	r3, 8002920 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80028ec:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80028ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b1bb      	cbz	r3, 8002924 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80028f4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	d0e2      	beq.n	80028cc <HAL_UART_Transmit+0x56>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002906:	9600      	str	r6, [sp, #0]
 8002908:	463b      	mov	r3, r7
 800290a:	2200      	movs	r2, #0
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff ff50 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 8002914:	b9f0      	cbnz	r0, 8002954 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	782a      	ldrb	r2, [r5, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	3501      	adds	r5, #1
 800291e:	e7e6      	b.n	80028ee <HAL_UART_Transmit+0x78>
          pData += 1U;
 8002920:	3501      	adds	r5, #1
 8002922:	e7e4      	b.n	80028ee <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002924:	9600      	str	r6, [sp, #0]
 8002926:	463b      	mov	r3, r7
 8002928:	2200      	movs	r2, #0
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4620      	mov	r0, r4
 800292e:	f7ff ff41 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	b108      	cbz	r0, 800293a <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e7a7      	b.n	800288a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 800293a:	2220      	movs	r2, #32
 800293c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002940:	2200      	movs	r2, #0
 8002942:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002946:	e7a0      	b.n	800288a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e79e      	b.n	800288a <HAL_UART_Transmit+0x14>
 800294c:	2301      	movs	r3, #1
 800294e:	e79c      	b.n	800288a <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e79a      	b.n	800288a <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e798      	b.n	800288a <HAL_UART_Transmit+0x14>

08002958 <HAL_UART_Transmit_DMA>:
{
 8002958:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800295a:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800295e:	b2e4      	uxtb	r4, r4
 8002960:	2c20      	cmp	r4, #32
 8002962:	d001      	beq.n	8002968 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8002964:	2002      	movs	r0, #2
 8002966:	bd38      	pop	{r3, r4, r5, pc}
    if ((pData == NULL) || (Size == 0U))
 8002968:	2900      	cmp	r1, #0
 800296a:	d031      	beq.n	80029d0 <HAL_UART_Transmit_DMA+0x78>
 800296c:	2a00      	cmp	r2, #0
 800296e:	d031      	beq.n	80029d4 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8002970:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_UART_Transmit_DMA+0x24>
 8002978:	2002      	movs	r0, #2
}
 800297a:	bd38      	pop	{r3, r4, r5, pc}
 800297c:	4613      	mov	r3, r2
 800297e:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8002980:	2201      	movs	r2, #1
 8002982:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8002986:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002988:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800298a:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	2500      	movs	r5, #0
 800298e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002990:	2221      	movs	r2, #33	; 0x21
 8002992:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002996:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002998:	480f      	ldr	r0, [pc, #60]	; (80029d8 <HAL_UART_Transmit_DMA+0x80>)
 800299a:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800299c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800299e:	480f      	ldr	r0, [pc, #60]	; (80029dc <HAL_UART_Transmit_DMA+0x84>)
 80029a0:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80029a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029a4:	480e      	ldr	r0, [pc, #56]	; (80029e0 <HAL_UART_Transmit_DMA+0x88>)
 80029a6:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 80029a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029aa:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80029ac:	6822      	ldr	r2, [r4, #0]
 80029ae:	3204      	adds	r2, #4
 80029b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80029b2:	f7ff f8f1 	bl	8001b98 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029bc:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80029be:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	6953      	ldr	r3, [r2, #20]
 80029c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ca:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80029cc:	4628      	mov	r0, r5
 80029ce:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80029d0:	2001      	movs	r0, #1
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
 80029d4:	2001      	movs	r0, #1
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	08002a8d 	.word	0x08002a8d
 80029dc:	08002ad9 	.word	0x08002ad9
 80029e0:	08002bcd 	.word	0x08002bcd

080029e4 <HAL_UART_Receive_DMA>:
{
 80029e4:	b530      	push	{r4, r5, lr}
 80029e6:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80029e8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80029ec:	b2e4      	uxtb	r4, r4
 80029ee:	2c20      	cmp	r4, #32
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY;
 80029f2:	2002      	movs	r0, #2
}
 80029f4:	b003      	add	sp, #12
 80029f6:	bd30      	pop	{r4, r5, pc}
    if ((pData == NULL) || (Size == 0U))
 80029f8:	2900      	cmp	r1, #0
 80029fa:	d03d      	beq.n	8002a78 <HAL_UART_Receive_DMA+0x94>
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d03d      	beq.n	8002a7c <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 8002a00:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_Receive_DMA+0x28>
 8002a08:	2002      	movs	r0, #2
 8002a0a:	e7f3      	b.n	80029f4 <HAL_UART_Receive_DMA+0x10>
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	460a      	mov	r2, r1
 8002a10:	4604      	mov	r4, r0
 8002a12:	2101      	movs	r1, #1
 8002a14:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002a18:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002a1a:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	2500      	movs	r5, #0
 8002a1e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a20:	2122      	movs	r1, #34	; 0x22
 8002a22:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a26:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002a28:	4815      	ldr	r0, [pc, #84]	; (8002a80 <HAL_UART_Receive_DMA+0x9c>)
 8002a2a:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a2e:	4815      	ldr	r0, [pc, #84]	; (8002a84 <HAL_UART_Receive_DMA+0xa0>)
 8002a30:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a34:	4814      	ldr	r0, [pc, #80]	; (8002a88 <HAL_UART_Receive_DMA+0xa4>)
 8002a36:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8002a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a3a:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a3c:	6821      	ldr	r1, [r4, #0]
 8002a3e:	3104      	adds	r1, #4
 8002a40:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a42:	f7ff f8a9 	bl	8001b98 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002a46:	9501      	str	r5, [sp, #4]
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	9201      	str	r2, [sp, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	9201      	str	r2, [sp, #4]
 8002a52:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8002a54:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	6822      	ldr	r2, [r4, #0]
 8002a62:	6953      	ldr	r3, [r2, #20]
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	6953      	ldr	r3, [r2, #20]
 8002a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a72:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002a74:	4628      	mov	r0, r5
 8002a76:	e7bd      	b.n	80029f4 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e7bb      	b.n	80029f4 <HAL_UART_Receive_DMA+0x10>
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e7b9      	b.n	80029f4 <HAL_UART_Receive_DMA+0x10>
 8002a80:	08002ae3 	.word	0x08002ae3
 8002a84:	08002bc1 	.word	0x08002bc1
 8002a88:	08002bcd 	.word	0x08002bcd

08002a8c <UART_DMATransmitCplt>:
{
 8002a8c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a90:	6802      	ldr	r2, [r0, #0]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	f012 0f20 	tst.w	r2, #32
 8002a98:	d10c      	bne.n	8002ab4 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0x00U;
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	694a      	ldr	r2, [r1, #20]
 8002aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa6:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68d3      	ldr	r3, [r2, #12]
 8002aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab0:	60d3      	str	r3, [r2, #12]
 8002ab2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 fca9 	bl	800440c <HAL_UART_TxCpltCallback>
 8002aba:	bd08      	pop	{r3, pc}

08002abc <UART_EndTransmit_IT>:
{
 8002abc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002abe:	6801      	ldr	r1, [r0, #0]
 8002ac0:	68cb      	ldr	r3, [r1, #12]
 8002ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac6:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002ace:	f001 fc9d 	bl	800440c <HAL_UART_TxCpltCallback>
}
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	bd08      	pop	{r3, pc}

08002ad6 <HAL_UART_TxHalfCpltCallback>:
{
 8002ad6:	4770      	bx	lr

08002ad8 <UART_DMATxHalfCplt>:
{
 8002ad8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002ada:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002adc:	f7ff fffb 	bl	8002ad6 <HAL_UART_TxHalfCpltCallback>
 8002ae0:	bd08      	pop	{r3, pc}

08002ae2 <UART_DMAReceiveCplt>:
{
 8002ae2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	f012 0f20 	tst.w	r2, #32
 8002aee:	d113      	bne.n	8002b18 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8002af0:	2200      	movs	r2, #0
 8002af2:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	68ca      	ldr	r2, [r1, #12]
 8002af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afc:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	694a      	ldr	r2, [r1, #20]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	694a      	ldr	r2, [r1, #20]
 8002b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b10:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 fc87 	bl	800442c <HAL_UART_RxCpltCallback>
 8002b1e:	bd08      	pop	{r3, pc}

08002b20 <UART_Receive_IT>:
{
 8002b20:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b22:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b22      	cmp	r3, #34	; 0x22
 8002b2a:	d001      	beq.n	8002b30 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	bd08      	pop	{r3, pc}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b30:	6883      	ldr	r3, [r0, #8]
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b36:	d00f      	beq.n	8002b58 <UART_Receive_IT+0x38>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b38:	6903      	ldr	r3, [r0, #16]
 8002b3a:	bb0b      	cbnz	r3, 8002b80 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	6282      	str	r2, [r0, #40]	; 0x28
 8002b42:	6802      	ldr	r2, [r0, #0]
 8002b44:	6852      	ldr	r2, [r2, #4]
 8002b46:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002b48:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002b52:	b1f3      	cbz	r3, 8002b92 <UART_Receive_IT+0x72>
    return HAL_OK;
 8002b54:	2000      	movs	r0, #0
}
 8002b56:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002b58:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b5a:	6903      	ldr	r3, [r0, #16]
 8002b5c:	b943      	cbnz	r3, 8002b70 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b5e:	6803      	ldr	r3, [r0, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b66:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002b68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	6283      	str	r3, [r0, #40]	; 0x28
 8002b6e:	e7eb      	b.n	8002b48 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b70:	6803      	ldr	r3, [r0, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002b78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	6283      	str	r3, [r0, #40]	; 0x28
 8002b7e:	e7e3      	b.n	8002b48 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002b82:	1c53      	adds	r3, r2, #1
 8002b84:	6283      	str	r3, [r0, #40]	; 0x28
 8002b86:	6803      	ldr	r3, [r0, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8e:	7013      	strb	r3, [r2, #0]
 8002b90:	e7da      	b.n	8002b48 <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	68d3      	ldr	r3, [r2, #12]
 8002b96:	f023 0320 	bic.w	r3, r3, #32
 8002b9a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b9c:	6802      	ldr	r2, [r0, #0]
 8002b9e:	68d3      	ldr	r3, [r2, #12]
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba6:	6802      	ldr	r2, [r0, #0]
 8002ba8:	6953      	ldr	r3, [r2, #20]
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002bb6:	f001 fc39 	bl	800442c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002bba:	2000      	movs	r0, #0
 8002bbc:	bd08      	pop	{r3, pc}

08002bbe <HAL_UART_RxHalfCpltCallback>:
{
 8002bbe:	4770      	bx	lr

08002bc0 <UART_DMARxHalfCplt>:
{
 8002bc0:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8002bc2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002bc4:	f7ff fffb 	bl	8002bbe <HAL_UART_RxHalfCpltCallback>
 8002bc8:	bd08      	pop	{r3, pc}

08002bca <HAL_UART_ErrorCallback>:
{
 8002bca:	4770      	bx	lr

08002bcc <UART_DMAError>:
{
 8002bcc:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bce:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bd4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b21      	cmp	r3, #33	; 0x21
 8002bdc:	d010      	beq.n	8002c00 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002be6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b22      	cmp	r3, #34	; 0x22
 8002bee:	d011      	beq.n	8002c14 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bf2:	f043 0310 	orr.w	r3, r3, #16
 8002bf6:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff ffe6 	bl	8002bca <HAL_UART_ErrorCallback>
 8002bfe:	bd10      	pop	{r4, pc}
 8002c00:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	d0ea      	beq.n	8002bde <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7ff fd1f 	bl	8002650 <UART_EndTxTransfer>
 8002c12:	e7e4      	b.n	8002bde <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	d0eb      	beq.n	8002bf0 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff fd20 	bl	8002662 <UART_EndRxTransfer>
 8002c22:	e7e5      	b.n	8002bf0 <UART_DMAError+0x24>

08002c24 <HAL_UART_IRQHandler>:
{
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c28:	6802      	ldr	r2, [r0, #0]
 8002c2a:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2c:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c2e:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002c30:	f013 000f 	ands.w	r0, r3, #15
 8002c34:	d105      	bne.n	8002c42 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c36:	f013 0f20 	tst.w	r3, #32
 8002c3a:	d002      	beq.n	8002c42 <HAL_UART_IRQHandler+0x1e>
 8002c3c:	f011 0f20 	tst.w	r1, #32
 8002c40:	d153      	bne.n	8002cea <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d067      	beq.n	8002d16 <HAL_UART_IRQHandler+0xf2>
 8002c46:	f012 0201 	ands.w	r2, r2, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_UART_IRQHandler+0x2e>
 8002c4c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002c50:	d061      	beq.n	8002d16 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c52:	f013 0f01 	tst.w	r3, #1
 8002c56:	d006      	beq.n	8002c66 <HAL_UART_IRQHandler+0x42>
 8002c58:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c60:	f040 0001 	orr.w	r0, r0, #1
 8002c64:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c66:	f013 0f04 	tst.w	r3, #4
 8002c6a:	d004      	beq.n	8002c76 <HAL_UART_IRQHandler+0x52>
 8002c6c:	b11a      	cbz	r2, 8002c76 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c70:	f040 0002 	orr.w	r0, r0, #2
 8002c74:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c76:	f013 0f02 	tst.w	r3, #2
 8002c7a:	d004      	beq.n	8002c86 <HAL_UART_IRQHandler+0x62>
 8002c7c:	b11a      	cbz	r2, 8002c86 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c80:	f040 0004 	orr.w	r0, r0, #4
 8002c84:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c86:	f013 0f08 	tst.w	r3, #8
 8002c8a:	d004      	beq.n	8002c96 <HAL_UART_IRQHandler+0x72>
 8002c8c:	b11a      	cbz	r2, 8002c96 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c98:	2a00      	cmp	r2, #0
 8002c9a:	d048      	beq.n	8002d2e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c9c:	f013 0f20 	tst.w	r3, #32
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x84>
 8002ca2:	f011 0f20 	tst.w	r1, #32
 8002ca6:	d124      	bne.n	8002cf2 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002cb2:	f012 0f08 	tst.w	r2, #8
 8002cb6:	d100      	bne.n	8002cba <HAL_UART_IRQHandler+0x96>
 8002cb8:	b33b      	cbz	r3, 8002d0a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fcd1 	bl	8002662 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002cc8:	d01b      	beq.n	8002d02 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cd4:	b18b      	cbz	r3, 8002cfa <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_UART_IRQHandler+0x11c>)
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002cdc:	f7fe ff96 	bl	8001c0c <HAL_DMA_Abort_IT>
 8002ce0:	b328      	cbz	r0, 8002d2e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ce2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002ce4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ce6:	4798      	blx	r3
 8002ce8:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff ff18 	bl	8002b20 <UART_Receive_IT>
      return;
 8002cf0:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ff14 	bl	8002b20 <UART_Receive_IT>
 8002cf8:	e7d6      	b.n	8002ca8 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff ff65 	bl	8002bca <HAL_UART_ErrorCallback>
 8002d00:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7ff ff61 	bl	8002bca <HAL_UART_ErrorCallback>
 8002d08:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff ff5d 	bl	8002bca <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002d14:	bd10      	pop	{r4, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d1a:	d002      	beq.n	8002d22 <HAL_UART_IRQHandler+0xfe>
 8002d1c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d20:	d106      	bne.n	8002d30 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d26:	d002      	beq.n	8002d2e <HAL_UART_IRQHandler+0x10a>
 8002d28:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_IRQHandler+0x114>
 8002d2e:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fca4 	bl	800267e <UART_Transmit_IT>
    return;
 8002d36:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff febf 	bl	8002abc <UART_EndTransmit_IT>
    return;
 8002d3e:	e7f6      	b.n	8002d2e <HAL_UART_IRQHandler+0x10a>
 8002d40:	08002d45 	.word	0x08002d45

08002d44 <UART_DMAAbortOnError>:
{
 8002d44:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d46:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d4c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002d4e:	f7ff ff3c 	bl	8002bca <HAL_UART_ErrorCallback>
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <_Z11cobs_encodePKhjPh>:
/* Stuffs "length" bytes of data at the location pointed to by
 * "input", writing the output to the location pointed to by
 * "output". Returns the number of bytes written to "output".
 */
size_t cobs_encode(const uint8_t * input, size_t length_input, uint8_t * output)
{
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	4607      	mov	r7, r0
    size_t read_index = 0;
    size_t write_index = 1;
    size_t code_index = 0;
    uint8_t code = 1;
 8002d58:	2401      	movs	r4, #1
    size_t code_index = 0;
 8002d5a:	2600      	movs	r6, #0
    size_t write_index = 1;
 8002d5c:	4620      	mov	r0, r4
    size_t read_index = 0;
 8002d5e:	4633      	mov	r3, r6
 8002d60:	e008      	b.n	8002d74 <_Z11cobs_encodePKhjPh+0x20>
            code_index = write_index++;
            read_index++;
        }
        else
        {
            output[write_index++] = input[read_index++];
 8002d62:	f100 0e01 	add.w	lr, r0, #1
 8002d66:	3301      	adds	r3, #1
 8002d68:	5415      	strb	r5, [r2, r0]
            code++;
 8002d6a:	3401      	adds	r4, #1
 8002d6c:	b2e4      	uxtb	r4, r4
            if(code == 0xFF)
 8002d6e:	2cff      	cmp	r4, #255	; 0xff
 8002d70:	d00b      	beq.n	8002d8a <_Z11cobs_encodePKhjPh+0x36>
            output[write_index++] = input[read_index++];
 8002d72:	4670      	mov	r0, lr
    while(read_index < length_input)
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d20d      	bcs.n	8002d94 <_Z11cobs_encodePKhjPh+0x40>
        if(input[read_index] == 0)
 8002d78:	5cfd      	ldrb	r5, [r7, r3]
 8002d7a:	2d00      	cmp	r5, #0
 8002d7c:	d1f1      	bne.n	8002d62 <_Z11cobs_encodePKhjPh+0xe>
            output[code_index] = code;
 8002d7e:	5594      	strb	r4, [r2, r6]
            read_index++;
 8002d80:	3301      	adds	r3, #1
            code_index = write_index++;
 8002d82:	4606      	mov	r6, r0
 8002d84:	3001      	adds	r0, #1
            code = 1;
 8002d86:	2401      	movs	r4, #1
 8002d88:	e7f4      	b.n	8002d74 <_Z11cobs_encodePKhjPh+0x20>
            {
                output[code_index] = code;
 8002d8a:	5594      	strb	r4, [r2, r6]
                code = 1;
                code_index = write_index++;
 8002d8c:	3002      	adds	r0, #2
 8002d8e:	4676      	mov	r6, lr
                code = 1;
 8002d90:	2401      	movs	r4, #1
 8002d92:	e7ef      	b.n	8002d74 <_Z11cobs_encodePKhjPh+0x20>
            }
        }
    }

    output[code_index] = code;
 8002d94:	5594      	strb	r4, [r2, r6]

    return write_index;
}
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002d98:	7903      	ldrb	r3, [r0, #4]
 8002d9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002d9c:	7943      	ldrb	r3, [r0, #5]
 8002d9e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002da0:	7983      	ldrb	r3, [r0, #6]
 8002da2:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002da4:	79c3      	ldrb	r3, [r0, #7]
 8002da6:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002da8:	7a03      	ldrb	r3, [r0, #8]
 8002daa:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002dac:	7a43      	ldrb	r3, [r0, #9]
 8002dae:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002db0:	7a83      	ldrb	r3, [r0, #10]
 8002db2:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002db4:	7ac3      	ldrb	r3, [r0, #11]
 8002db6:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8002db8:	2008      	movs	r0, #8
 8002dba:	4770      	bx	lr

08002dbc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002dbc:	780b      	ldrb	r3, [r1, #0]
 8002dbe:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dc0:	784a      	ldrb	r2, [r1, #1]
 8002dc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002dc6:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dc8:	788a      	ldrb	r2, [r1, #2]
 8002dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dce:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dd0:	78ca      	ldrb	r2, [r1, #3]
 8002dd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dd6:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002dd8:	790b      	ldrb	r3, [r1, #4]
 8002dda:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ddc:	794a      	ldrb	r2, [r1, #5]
 8002dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002de2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002de4:	798a      	ldrb	r2, [r1, #6]
 8002de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dea:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dec:	79ca      	ldrb	r2, [r1, #7]
 8002dee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002df2:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8002df4:	2008      	movs	r0, #8
 8002df6:	4770      	bx	lr

08002df8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002df8:	4800      	ldr	r0, [pc, #0]	; (8002dfc <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8002dfa:	4770      	bx	lr
 8002dfc:	08006210 	.word	0x08006210

08002e00 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002e00:	4800      	ldr	r0, [pc, #0]	; (8002e04 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8002e02:	4770      	bx	lr
 8002e04:	080061ec 	.word	0x080061ec

08002e08 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002e08:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002e0a:	780b      	ldrb	r3, [r1, #0]
 8002e0c:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e0e:	784a      	ldrb	r2, [r1, #1]
 8002e10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e14:	8083      	strh	r3, [r0, #4]

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
 8002e16:	2400      	movs	r4, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8002e18:	4623      	mov	r3, r4
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d806      	bhi.n	8002e2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x24>
      var |= (arr[i] << (8 * i));
 8002e1e:	18ca      	adds	r2, r1, r3
 8002e20:	7892      	ldrb	r2, [r2, #2]
 8002e22:	00dd      	lsls	r5, r3, #3
 8002e24:	40aa      	lsls	r2, r5
 8002e26:	4314      	orrs	r4, r2
    for (size_t i = 0; i < sizeof(V); i++)
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7f6      	b.n	8002e1a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12>
 8002e2c:	2306      	movs	r3, #6
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002e2e:	1da2      	adds	r2, r4, #6
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d204      	bcs.n	8002e3e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x36>
          inbuffer[k-1]=inbuffer[k];
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	5ccd      	ldrb	r5, [r1, r3]
 8002e38:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	e7f7      	b.n	8002e2e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002e3e:	3405      	adds	r4, #5
 8002e40:	2300      	movs	r3, #0
 8002e42:	550b      	strb	r3, [r1, r4]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002e44:	1d4c      	adds	r4, r1, #5
 8002e46:	6084      	str	r4, [r0, #8]
    var = 0;
 8002e48:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d806      	bhi.n	8002e5c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x54>
      var |= (arr[i] << (8 * i));
 8002e4e:	188c      	adds	r4, r1, r2
 8002e50:	5ce4      	ldrb	r4, [r4, r3]
 8002e52:	00dd      	lsls	r5, r3, #3
 8002e54:	40ac      	lsls	r4, r5
 8002e56:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8002e58:	3301      	adds	r3, #1
 8002e5a:	e7f6      	b.n	8002e4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x42>
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8002e5c:	1d14      	adds	r4, r2, #4
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002e5e:	4623      	mov	r3, r4
 8002e60:	19a2      	adds	r2, r4, r6
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d204      	bcs.n	8002e70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	5ccd      	ldrb	r5, [r1, r3]
 8002e6a:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	e7f7      	b.n	8002e60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x58>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002e70:	1e55      	subs	r5, r2, #1
 8002e72:	2300      	movs	r3, #0
 8002e74:	554b      	strb	r3, [r1, r5]
      this->message_type = (char *)(inbuffer + offset-1);
 8002e76:	3c01      	subs	r4, #1
 8002e78:	440c      	add	r4, r1
 8002e7a:	60c4      	str	r4, [r0, #12]
    var = 0;
 8002e7c:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d806      	bhi.n	8002e90 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
      var |= (arr[i] << (8 * i));
 8002e82:	188c      	adds	r4, r1, r2
 8002e84:	5ce4      	ldrb	r4, [r4, r3]
 8002e86:	00dd      	lsls	r5, r3, #3
 8002e88:	40ac      	lsls	r4, r5
 8002e8a:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	e7f6      	b.n	8002e7e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8002e90:	3204      	adds	r2, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002e92:	4613      	mov	r3, r2
 8002e94:	1994      	adds	r4, r2, r6
 8002e96:	42a3      	cmp	r3, r4
 8002e98:	d204      	bcs.n	8002ea4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
          inbuffer[k-1]=inbuffer[k];
 8002e9a:	1e5c      	subs	r4, r3, #1
 8002e9c:	5ccd      	ldrb	r5, [r1, r3]
 8002e9e:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e7f7      	b.n	8002e94 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002ea4:	1e63      	subs	r3, r4, #1
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	54cd      	strb	r5, [r1, r3]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	440a      	add	r2, r1
 8002eae:	6102      	str	r2, [r0, #16]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eb0:	5d0b      	ldrb	r3, [r1, r4]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eb2:	1c62      	adds	r2, r4, #1
 8002eb4:	5c8a      	ldrb	r2, [r1, r2]
 8002eb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eba:	1ca2      	adds	r2, r4, #2
 8002ebc:	5c8a      	ldrb	r2, [r1, r2]
 8002ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ec2:	1ce2      	adds	r2, r4, #3
 8002ec4:	5c8a      	ldrb	r2, [r1, r2]
 8002ec6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 8002eca:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8002ecc:	1d20      	adds	r0, r4, #4
 8002ece:	bc70      	pop	{r4, r5, r6}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002ed4:	4800      	ldr	r0, [pc, #0]	; (8002ed8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8002ed6:	4770      	bx	lr
 8002ed8:	08006194 	.word	0x08006194

08002edc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002edc:	4800      	ldr	r0, [pc, #0]	; (8002ee0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8002ede:	4770      	bx	lr
 8002ee0:	08006170 	.word	0x08006170

08002ee4 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002ee4:	b470      	push	{r4, r5, r6}
 8002ee6:	4606      	mov	r6, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002ee8:	780b      	ldrb	r3, [r1, #0]
 8002eea:	7103      	strb	r3, [r0, #4]
    var = 0;
 8002eec:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d807      	bhi.n	8002f04 <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
 8002ef4:	1c58      	adds	r0, r3, #1
      var |= (arr[i] << (8 * i));
 8002ef6:	5c0c      	ldrb	r4, [r1, r0]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	fa04 f303 	lsl.w	r3, r4, r3
 8002efe:	431a      	orrs	r2, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8002f00:	4603      	mov	r3, r0
 8002f02:	e7f5      	b.n	8002ef0 <_ZN14rosserial_msgs3Log11deserializeEPh+0xc>
 8002f04:	2305      	movs	r3, #5
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002f06:	1d50      	adds	r0, r2, #5
 8002f08:	4283      	cmp	r3, r0
 8002f0a:	d204      	bcs.n	8002f16 <_ZN14rosserial_msgs3Log11deserializeEPh+0x32>
          inbuffer[k-1]=inbuffer[k];
 8002f0c:	1e5c      	subs	r4, r3, #1
 8002f0e:	5ccd      	ldrb	r5, [r1, r3]
 8002f10:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002f12:	3301      	adds	r3, #1
 8002f14:	e7f7      	b.n	8002f06 <_ZN14rosserial_msgs3Log11deserializeEPh+0x22>
      }
      inbuffer[offset+length_msg-1]=0;
 8002f16:	3204      	adds	r2, #4
 8002f18:	2300      	movs	r3, #0
 8002f1a:	548b      	strb	r3, [r1, r2]
      this->msg = (char *)(inbuffer + offset-1);
 8002f1c:	3104      	adds	r1, #4
 8002f1e:	60b1      	str	r1, [r6, #8]
      offset += length_msg;
     return offset;
    }
 8002f20:	bc70      	pop	{r4, r5, r6}
 8002f22:	4770      	bx	lr

08002f24 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002f24:	4800      	ldr	r0, [pc, #0]	; (8002f28 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8002f26:	4770      	bx	lr
 8002f28:	0800615c 	.word	0x0800615c

08002f2c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002f2c:	4800      	ldr	r0, [pc, #0]	; (8002f30 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8002f2e:	4770      	bx	lr
 8002f30:	08006138 	.word	0x08006138

08002f34 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8002f34:	4800      	ldr	r0, [pc, #0]	; (8002f38 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8002f36:	4770      	bx	lr
 8002f38:	08005dfc 	.word	0x08005dfc

08002f3c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002f3c:	4800      	ldr	r0, [pc, #0]	; (8002f40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8002f3e:	4770      	bx	lr
 8002f40:	08006114 	.word	0x08006114

08002f44 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8002f44:	b410      	push	{r4}
 8002f46:	6882      	ldr	r2, [r0, #8]
 8002f48:	68c3      	ldr	r3, [r0, #12]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002f4a:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002f4c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8002f50:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002f52:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8002f56:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002f58:	0e12      	lsrs	r2, r2, #24
 8002f5a:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002f5c:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002f5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f62:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002f64:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002f68:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002f6a:	0e1b      	lsrs	r3, r3, #24
 8002f6c:	71cb      	strb	r3, [r1, #7]
 8002f6e:	6902      	ldr	r2, [r0, #16]
 8002f70:	6943      	ldr	r3, [r0, #20]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002f72:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002f74:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8002f78:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002f7a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8002f7e:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002f80:	0e12      	lsrs	r2, r2, #24
 8002f82:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002f84:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002f86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f8a:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002f8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002f90:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002f92:	0e1b      	lsrs	r3, r3, #24
 8002f94:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->y);
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002f96:	6982      	ldr	r2, [r0, #24]
 8002f98:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002f9a:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002f9c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8002fa0:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002fa2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8002fa6:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002fa8:	0e12      	lsrs	r2, r2, #24
 8002faa:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002fac:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002fae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002fb2:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002fb4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002fb8:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002fba:	0e1b      	lsrs	r3, r3, #24
 8002fbc:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      return offset;
    }
 8002fbe:	2018      	movs	r0, #24
 8002fc0:	bc10      	pop	{r4}
 8002fc2:	4770      	bx	lr

08002fc4 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fc4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fc8:	780a      	ldrb	r2, [r1, #0]
 8002fca:	2300      	movs	r3, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fcc:	784e      	ldrb	r6, [r1, #1]
 8002fce:	2500      	movs	r5, #0
 8002fd0:	0234      	lsls	r4, r6, #8
 8002fd2:	4322      	orrs	r2, r4
 8002fd4:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fd6:	788e      	ldrb	r6, [r1, #2]
 8002fd8:	2500      	movs	r5, #0
 8002fda:	0434      	lsls	r4, r6, #16
 8002fdc:	4322      	orrs	r2, r4
 8002fde:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fe0:	78ce      	ldrb	r6, [r1, #3]
 8002fe2:	0a35      	lsrs	r5, r6, #8
 8002fe4:	0634      	lsls	r4, r6, #24
 8002fe6:	4322      	orrs	r2, r4
 8002fe8:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fea:	2400      	movs	r4, #0
 8002fec:	790d      	ldrb	r5, [r1, #4]
 8002fee:	4322      	orrs	r2, r4
 8002ff0:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ff2:	f891 8005 	ldrb.w	r8, [r1, #5]
 8002ff6:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8002ffa:	4322      	orrs	r2, r4
 8002ffc:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ffe:	f891 8006 	ldrb.w	r8, [r1, #6]
 8003002:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8003006:	4322      	orrs	r2, r4
 8003008:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800300a:	f891 8007 	ldrb.w	r8, [r1, #7]
 800300e:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8003012:	4322      	orrs	r2, r4
 8003014:	433b      	orrs	r3, r7
 8003016:	e9c0 2302 	strd	r2, r3, [r0, #8]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800301a:	7a0e      	ldrb	r6, [r1, #8]
 800301c:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800301e:	f891 8009 	ldrb.w	r8, [r1, #9]
 8003022:	2300      	movs	r3, #0
 8003024:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8003028:	4316      	orrs	r6, r2
 800302a:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800302c:	f891 800a 	ldrb.w	r8, [r1, #10]
 8003030:	2300      	movs	r3, #0
 8003032:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003036:	4316      	orrs	r6, r2
 8003038:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800303a:	f891 800b 	ldrb.w	r8, [r1, #11]
 800303e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8003042:	ea4f 6208 	mov.w	r2, r8, lsl #24
 8003046:	4316      	orrs	r6, r2
 8003048:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800304a:	7b0b      	ldrb	r3, [r1, #12]
 800304c:	4326      	orrs	r6, r4
 800304e:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003050:	f891 800d 	ldrb.w	r8, [r1, #13]
 8003054:	ea4f 2308 	mov.w	r3, r8, lsl #8
 8003058:	4326      	orrs	r6, r4
 800305a:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800305c:	f891 800e 	ldrb.w	r8, [r1, #14]
 8003060:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8003064:	4326      	orrs	r6, r4
 8003066:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003068:	f891 800f 	ldrb.w	r8, [r1, #15]
 800306c:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8003070:	4622      	mov	r2, r4
      this->y = u_y.real;
 8003072:	4332      	orrs	r2, r6
 8003074:	433b      	orrs	r3, r7
 8003076:	e9c0 2304 	strd	r2, r3, [r0, #16]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800307a:	7c0e      	ldrb	r6, [r1, #16]
 800307c:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800307e:	f891 8011 	ldrb.w	r8, [r1, #17]
 8003082:	2300      	movs	r3, #0
 8003084:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8003088:	4316      	orrs	r6, r2
 800308a:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800308c:	f891 8012 	ldrb.w	r8, [r1, #18]
 8003090:	2300      	movs	r3, #0
 8003092:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003096:	4316      	orrs	r6, r2
 8003098:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800309a:	f891 8013 	ldrb.w	r8, [r1, #19]
 800309e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80030a2:	ea4f 6208 	mov.w	r2, r8, lsl #24
 80030a6:	4316      	orrs	r6, r2
 80030a8:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80030aa:	7d0b      	ldrb	r3, [r1, #20]
 80030ac:	4326      	orrs	r6, r4
 80030ae:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80030b0:	f891 8015 	ldrb.w	r8, [r1, #21]
 80030b4:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80030b8:	4326      	orrs	r6, r4
 80030ba:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030bc:	f891 8016 	ldrb.w	r8, [r1, #22]
 80030c0:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80030c4:	4326      	orrs	r6, r4
 80030c6:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030c8:	f891 8017 	ldrb.w	r8, [r1, #23]
 80030cc:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80030d0:	4622      	mov	r2, r4
      this->z = u_z.real;
 80030d2:	4332      	orrs	r2, r6
 80030d4:	433b      	orrs	r3, r7
 80030d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
      offset += sizeof(this->z);
     return offset;
    }
 80030da:	2018      	movs	r0, #24
 80030dc:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80030e0:	4770      	bx	lr
	...

080030e4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80030e4:	4800      	ldr	r0, [pc, #0]	; (80030e8 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 80030e6:	4770      	bx	lr
 80030e8:	080060fc 	.word	0x080060fc

080030ec <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80030ec:	4800      	ldr	r0, [pc, #0]	; (80030f0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 80030ee:	4770      	bx	lr
 80030f0:	080060d8 	.word	0x080060d8

080030f4 <_ZN13geometry_msgs5Twist7getTypeEv>:
      offset += this->linear.deserialize(inbuffer + offset);
      offset += this->angular.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Twist"; };
 80030f4:	4800      	ldr	r0, [pc, #0]	; (80030f8 <_ZN13geometry_msgs5Twist7getTypeEv+0x4>)
 80030f6:	4770      	bx	lr
 80030f8:	080060c4 	.word	0x080060c4

080030fc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80030fc:	4800      	ldr	r0, [pc, #0]	; (8003100 <_ZN13geometry_msgs5Twist6getMD5Ev+0x4>)
 80030fe:	4770      	bx	lr
 8003100:	080060a0 	.word	0x080060a0

08003104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 8003104:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8003108:	5cc0      	ldrb	r0, [r0, r3]
 800310a:	4770      	bx	lr

0800310c <_Z41__static_initialization_and_destruction_0ii>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800310c:	2801      	cmp	r0, #1
 800310e:	d000      	beq.n	8003112 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003110:	4770      	bx	lr
 8003112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003116:	4299      	cmp	r1, r3
 8003118:	d1fa      	bne.n	8003110 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800311a:	b410      	push	{r4}
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 800311c:	4945      	ldr	r1, [pc, #276]	; (8003234 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800311e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	f241 0202 	movw	r2, #4098	; 0x1002
 800312c:	528b      	strh	r3, [r1, r2]
 800312e:	f241 0204 	movw	r2, #4100	; 0x1004
 8003132:	528b      	strh	r3, [r1, r2]
 8003134:	f241 0206 	movw	r2, #4102	; 0x1006
 8003138:	528b      	strh	r3, [r1, r2]
 800313a:	4a3f      	ldr	r2, [pc, #252]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800313c:	f1a2 04ec 	sub.w	r4, r2, #236	; 0xec
 8003140:	f241 0008 	movw	r0, #4104	; 0x1008
 8003144:	500c      	str	r4, [r1, r0]
  NodeHandle_() : configured_(false)
 8003146:	483d      	ldr	r0, [pc, #244]	; (800323c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003148:	f842 0cac 	str.w	r0, [r2, #-172]

class STM32Hardware
{
public:
	STM32Hardware() :
			com(&serial)
 800314c:	f842 1ca8 	str.w	r1, [r2, #-168]
 8003150:	f241 0148 	movw	r1, #4168	; 0x1048
 8003154:	5453      	strb	r3, [r2, r1]
      strings_length(0), strings(NULL)
 8003156:	483a      	ldr	r0, [pc, #232]	; (8003240 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003158:	f241 015c 	movw	r1, #4188	; 0x105c
 800315c:	5050      	str	r0, [r2, r1]
 800315e:	f502 5183 	add.w	r1, r2, #4192	; 0x1060
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	f241 0168 	movw	r1, #4200	; 0x1068
 8003168:	5053      	str	r3, [r2, r1]
 800316a:	f241 016c 	movw	r1, #4204	; 0x106c
 800316e:	5053      	str	r3, [r2, r1]
 8003170:	f241 0174 	movw	r1, #4212	; 0x1074
 8003174:	5053      	str	r3, [r2, r1]
 8003176:	f241 0178 	movw	r1, #4216	; 0x1078
 800317a:	5053      	str	r3, [r2, r1]
 800317c:	f502 5284 	add.w	r2, r2, #4224	; 0x1080
 8003180:	6013      	str	r3, [r2, #0]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003182:	2b18      	cmp	r3, #24
 8003184:	d809      	bhi.n	800319a <_Z41__static_initialization_and_destruction_0ii+0x8e>
      publishers[i] = 0;
 8003186:	f203 4106 	addw	r1, r3, #1030	; 0x406
 800318a:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800318c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003190:	2100      	movs	r1, #0
 8003192:	f842 1cac 	str.w	r1, [r2, #-172]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003196:	3301      	adds	r3, #1
 8003198:	e7f3      	b.n	8003182 <_Z41__static_initialization_and_destruction_0ii+0x76>
 800319a:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800319c:	2b18      	cmp	r3, #24
 800319e:	d809      	bhi.n	80031b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>
      subscribers[i] = 0;
 80031a0:	f203 411e 	addw	r1, r3, #1054	; 0x41e
 80031a4:	4a24      	ldr	r2, [pc, #144]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80031a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80031aa:	2100      	movs	r1, #0
 80031ac:	f842 1ca8 	str.w	r1, [r2, #-168]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031b0:	3301      	adds	r3, #1
 80031b2:	e7f3      	b.n	800319c <_Z41__static_initialization_and_destruction_0ii+0x90>
 80031b4:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ba:	d206      	bcs.n	80031ca <_Z41__static_initialization_and_destruction_0ii+0xbe>
      message_in[i] = 0;
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80031be:	441a      	add	r2, r3
 80031c0:	2100      	movs	r1, #0
 80031c2:	f802 1c94 	strb.w	r1, [r2, #-148]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80031c6:	3301      	adds	r3, #1
 80031c8:	e7f5      	b.n	80031b6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80031ca:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80031cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d0:	d206      	bcs.n	80031e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>
      message_out[i] = 0;
 80031d2:	4a19      	ldr	r2, [pc, #100]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80031d4:	441a      	add	r2, r3
 80031d6:	2100      	movs	r1, #0
 80031d8:	f882 176c 	strb.w	r1, [r2, #1900]	; 0x76c
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80031dc:	3301      	adds	r3, #1
 80031de:	e7f5      	b.n	80031cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
    spin_timeout_ = 0;
 80031e0:	2200      	movs	r2, #0
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80031e4:	f843 2c98 	str.w	r2, [r3, #-152]
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
    cb_(cb),
    endpoint_(endpoint)
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80031ec:	f843 2c70 	str.w	r2, [r3, #-112]
      angular()
 80031f0:	4a16      	ldr	r2, [pc, #88]	; (800324c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80031f2:	f843 2c60 	str.w	r2, [r3, #-96]
      z(0)
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80031f8:	f843 2c58 	str.w	r2, [r3, #-88]
 80031fc:	2000      	movs	r0, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	e943 0114 	strd	r0, r1, [r3, #-80]	; 0x50
 8003204:	e943 0112 	strd	r0, r1, [r3, #-72]	; 0x48
 8003208:	e943 0110 	strd	r0, r1, [r3, #-64]	; 0x40
 800320c:	f843 2c38 	str.w	r2, [r3, #-56]
 8003210:	e943 010c 	strd	r0, r1, [r3, #-48]	; 0x30
 8003214:	e943 010a 	strd	r0, r1, [r3, #-40]	; 0x28
 8003218:	e943 0108 	strd	r0, r1, [r3, #-32]
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800321e:	f843 2c18 	str.w	r2, [r3, #-24]
 8003222:	2201      	movs	r2, #1
 8003224:	f843 2c14 	str.w	r2, [r3, #-20]
  {
    topic_ = topic_name;
 8003228:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800322a:	f843 2c68 	str.w	r2, [r3, #-104]
 800322e:	bc10      	pop	{r4}
 8003230:	e76e      	b.n	8003110 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8003232:	bf00      	nop
 8003234:	20000530 	.word	0x20000530
 8003238:	20001628 	.word	0x20001628
 800323c:	0800607c 	.word	0x0800607c
 8003240:	08006034 	.word	0x08006034
 8003244:	20002720 	.word	0x20002720
 8003248:	08006090 	.word	0x08006090
 800324c:	08006064 	.word	0x08006064
 8003250:	0800604c 	.word	0x0800604c
 8003254:	08003271 	.word	0x08003271
 8003258:	08006220 	.word	0x08006220

0800325c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 800325c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800325e:	4770      	bx	lr

08003260 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  }
 8003260:	4800      	ldr	r0, [pc, #0]	; (8003264 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv+0x4>)
 8003262:	4770      	bx	lr
 8003264:	080060c4 	.word	0x080060c4

08003268 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  }
 8003268:	4800      	ldr	r0, [pc, #0]	; (800326c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev+0x4>)
 800326a:	4770      	bx	lr
 800326c:	080060a0 	.word	0x080060a0

08003270 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE>:
void cmd_vel_callback( const geometry_msgs::Twist& msg){
 8003270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		speed_drv1 = msg.linear.x + msg.angular.z/2;
 8003274:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
 8003278:	2200      	movs	r2, #0
 800327a:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb8>)
 800327c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8003280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003284:	f7fd f92c 	bl	80004e0 <__aeabi_dmul>
 8003288:	4606      	mov	r6, r0
 800328a:	460f      	mov	r7, r1
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4640      	mov	r0, r8
 8003292:	4649      	mov	r1, r9
 8003294:	f7fc ff72 	bl	800017c <__adddf3>
 8003298:	f7fd fb34 	bl	8000904 <__aeabi_d2f>
 800329c:	4605      	mov	r5, r0
 800329e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8003330 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc0>
 80032a2:	f84a 0c10 	str.w	r0, [sl, #-16]
		speed_drv2 = -msg.linear.x +  msg.angular.z/2 ;
 80032a6:	4642      	mov	r2, r8
 80032a8:	464b      	mov	r3, r9
 80032aa:	4630      	mov	r0, r6
 80032ac:	4639      	mov	r1, r7
 80032ae:	f7fc ff63 	bl	8000178 <__aeabi_dsub>
 80032b2:	f7fd fb27 	bl	8000904 <__aeabi_d2f>
 80032b6:	4604      	mov	r4, r0
 80032b8:	f84a 0c0c 	str.w	r0, [sl, #-12]
		if (speed_drv1 > 1.0) speed_drv1 = 1.0;
 80032bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80032c0:	4628      	mov	r0, r5
 80032c2:	f7fd fbdb 	bl	8000a7c <__aeabi_fcmpgt>
 80032c6:	b118      	cbz	r0, 80032d0 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x60>
 80032c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80032cc:	f84a 2c10 	str.w	r2, [sl, #-16]
		if (speed_drv1 < -1.0) speed_drv1 = -1.0;
 80032d0:	4916      	ldr	r1, [pc, #88]	; (800332c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xbc>)
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc0>)
 80032d4:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80032d8:	f7fd fbb2 	bl	8000a40 <__aeabi_fcmplt>
 80032dc:	b9c8      	cbnz	r0, 8003312 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xa2>
		if (speed_drv2 > 1.0) speed_drv2 = 1.0;
 80032de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7fd fbca 	bl	8000a7c <__aeabi_fcmpgt>
 80032e8:	b120      	cbz	r0, 80032f4 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x84>
 80032ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc0>)
 80032f0:	f843 2c0c 	str.w	r2, [r3, #-12]
		if (speed_drv2 < -1.0) speed_drv2 = -1.0;
 80032f4:	490d      	ldr	r1, [pc, #52]	; (800332c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xbc>)
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc0>)
 80032f8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 80032fc:	f7fd fba0 	bl	8000a40 <__aeabi_fcmplt>
 8003300:	b960      	cbnz	r0, 800331c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xac>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003308:	480a      	ldr	r0, [pc, #40]	; (8003334 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc4>)
 800330a:	f7fe fe65 	bl	8001fd8 <HAL_GPIO_WritePin>
 800330e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (speed_drv1 < -1.0) speed_drv1 = -1.0;
 8003312:	4a06      	ldr	r2, [pc, #24]	; (800332c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xbc>)
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc0>)
 8003316:	f843 2c10 	str.w	r2, [r3, #-16]
 800331a:	e7e0      	b.n	80032de <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x6e>
		if (speed_drv2 < -1.0) speed_drv2 = -1.0;
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xbc>)
 800331e:	4b04      	ldr	r3, [pc, #16]	; (8003330 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xc0>)
 8003320:	f843 2c0c 	str.w	r2, [r3, #-12]
 8003324:	e7ed      	b.n	8003302 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x92>
 8003326:	bf00      	nop
 8003328:	3fe00000 	.word	0x3fe00000
 800332c:	bf800000 	.word	0xbf800000
 8003330:	20002720 	.word	0x20002720
 8003334:	40011000 	.word	0x40011000

08003338 <_ZL12MX_GPIO_Initv>:
{
 8003338:	b530      	push	{r4, r5, lr}
 800333a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	2400      	movs	r4, #0
 800333e:	9404      	str	r4, [sp, #16]
 8003340:	9405      	str	r4, [sp, #20]
 8003342:	9406      	str	r4, [sp, #24]
 8003344:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <_ZL12MX_GPIO_Initv+0x84>)
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	f042 0210 	orr.w	r2, r2, #16
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	f002 0210 	and.w	r2, r2, #16
 8003356:	9200      	str	r2, [sp, #0]
 8003358:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	f002 0220 	and.w	r2, r2, #32
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	f042 0204 	orr.w	r2, r2, #4
 8003372:	619a      	str	r2, [r3, #24]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	f002 0204 	and.w	r2, r2, #4
 800337a:	9202      	str	r2, [sp, #8]
 800337c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	f042 0208 	orr.w	r2, r2, #8
 8003384:	619a      	str	r2, [r3, #24]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	9303      	str	r3, [sp, #12]
 800338e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003390:	4d0b      	ldr	r5, [pc, #44]	; (80033c0 <_ZL12MX_GPIO_Initv+0x88>)
 8003392:	2201      	movs	r2, #1
 8003394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003398:	4628      	mov	r0, r5
 800339a:	f7fe fe1d 	bl	8001fd8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800339e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2302      	movs	r3, #2
 80033ac:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ae:	a904      	add	r1, sp, #16
 80033b0:	4628      	mov	r0, r5
 80033b2:	f7fe fd19 	bl	8001de8 <HAL_GPIO_Init>
}
 80033b6:	b009      	add	sp, #36	; 0x24
 80033b8:	bd30      	pop	{r4, r5, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40011000 	.word	0x40011000

080033c4 <_ZL11MX_DMA_Initv>:
{
 80033c4:	b500      	push	{lr}
 80033c6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <_ZL11MX_DMA_Initv+0x40>)
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	615a      	str	r2, [r3, #20]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80033dc:	2200      	movs	r2, #0
 80033de:	4611      	mov	r1, r2
 80033e0:	200e      	movs	r0, #14
 80033e2:	f7fe fb37 	bl	8001a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80033e6:	200e      	movs	r0, #14
 80033e8:	f7fe fb66 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	4611      	mov	r1, r2
 80033f0:	200f      	movs	r0, #15
 80033f2:	f7fe fb2f 	bl	8001a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80033f6:	200f      	movs	r0, #15
 80033f8:	f7fe fb5e 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
}
 80033fc:	b003      	add	sp, #12
 80033fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000

08003408 <_ZL19MX_USART1_UART_Initv>:
{
 8003408:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800340a:	480d      	ldr	r0, [pc, #52]	; (8003440 <_ZL19MX_USART1_UART_Initv+0x38>)
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <_ZL19MX_USART1_UART_Initv+0x3c>)
 800340e:	f840 3cec 	str.w	r3, [r0, #-236]
  huart1.Init.BaudRate = 57600;
 8003412:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003416:	f840 3ce8 	str.w	r3, [r0, #-232]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800341a:	2300      	movs	r3, #0
 800341c:	f840 3ce4 	str.w	r3, [r0, #-228]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003420:	f840 3ce0 	str.w	r3, [r0, #-224]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003424:	f840 3cdc 	str.w	r3, [r0, #-220]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003428:	220c      	movs	r2, #12
 800342a:	f840 2cd8 	str.w	r2, [r0, #-216]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	f840 3cd4 	str.w	r3, [r0, #-212]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003432:	f840 3cd0 	str.w	r3, [r0, #-208]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003436:	38ec      	subs	r0, #236	; 0xec
 8003438:	f7ff f9ee 	bl	8002818 <HAL_UART_Init>
 800343c:	bd08      	pop	{r3, pc}
 800343e:	bf00      	nop
 8003440:	20001628 	.word	0x20001628
 8003444:	40013800 	.word	0x40013800

08003448 <_ZL19MX_USART2_UART_Initv>:
{
 8003448:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800344a:	480a      	ldr	r0, [pc, #40]	; (8003474 <_ZL19MX_USART2_UART_Initv+0x2c>)
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <_ZL19MX_USART2_UART_Initv+0x30>)
 800344e:	f840 3c08 	str.w	r3, [r0, #-8]
  huart2.Init.BaudRate = 115200;
 8003452:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003456:	f840 3c04 	str.w	r3, [r0, #-4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800345a:	2300      	movs	r3, #0
 800345c:	6003      	str	r3, [r0, #0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800345e:	6043      	str	r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003460:	6083      	str	r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003462:	220c      	movs	r2, #12
 8003464:	60c2      	str	r2, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003466:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003468:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800346a:	3808      	subs	r0, #8
 800346c:	f7ff f9d4 	bl	8002818 <HAL_UART_Init>
 8003470:	bd08      	pop	{r3, pc}
 8003472:	bf00      	nop
 8003474:	20002720 	.word	0x20002720
 8003478:	40004400 	.word	0x40004400

0800347c <_ZL19MX_USART3_UART_Initv>:
{
 800347c:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800347e:	4809      	ldr	r0, [pc, #36]	; (80034a4 <_ZL19MX_USART3_UART_Initv+0x28>)
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <_ZL19MX_USART3_UART_Initv+0x2c>)
 8003482:	6383      	str	r3, [r0, #56]	; 0x38
  huart3.Init.BaudRate = 115200;
 8003484:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003488:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800348a:	2300      	movs	r3, #0
 800348c:	6403      	str	r3, [r0, #64]	; 0x40
  huart3.Init.StopBits = UART_STOPBITS_1;
 800348e:	6443      	str	r3, [r0, #68]	; 0x44
  huart3.Init.Parity = UART_PARITY_NONE;
 8003490:	6483      	str	r3, [r0, #72]	; 0x48
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003492:	220c      	movs	r2, #12
 8003494:	64c2      	str	r2, [r0, #76]	; 0x4c
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003496:	6503      	str	r3, [r0, #80]	; 0x50
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	6543      	str	r3, [r0, #84]	; 0x54
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800349a:	3038      	adds	r0, #56	; 0x38
 800349c:	f7ff f9bc 	bl	8002818 <HAL_UART_Init>
 80034a0:	bd08      	pop	{r3, pc}
 80034a2:	bf00      	nop
 80034a4:	20002720 	.word	0x20002720
 80034a8:	40004800 	.word	0x40004800

080034ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	4606      	mov	r6, r0
 80034b0:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80034b2:	7903      	ldrb	r3, [r0, #4]
 80034b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80034b6:	8883      	ldrh	r3, [r0, #4]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 80034bc:	6880      	ldr	r0, [r0, #8]
 80034be:	f7fc fe4f 	bl	8000160 <strlen>
 80034c2:	4607      	mov	r7, r0
    for (size_t i = 0; i < sizeof(V); i++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d806      	bhi.n	80034d8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x2c>
      arr[i] = (var >> (8 * i));
 80034ca:	1c99      	adds	r1, r3, #2
 80034cc:	00da      	lsls	r2, r3, #3
 80034ce:	fa27 f202 	lsr.w	r2, r7, r2
 80034d2:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 80034d4:	3301      	adds	r3, #1
 80034d6:	e7f6      	b.n	80034c6 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x1a>
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80034d8:	463a      	mov	r2, r7
 80034da:	68b1      	ldr	r1, [r6, #8]
 80034dc:	1da0      	adds	r0, r4, #6
 80034de:	f002 f943 	bl	8005768 <memcpy>
      offset += length_topic_name;
 80034e2:	3706      	adds	r7, #6
      uint32_t length_message_type = strlen(this->message_type);
 80034e4:	68f0      	ldr	r0, [r6, #12]
 80034e6:	f7fc fe3b 	bl	8000160 <strlen>
 80034ea:	4605      	mov	r5, r0
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d806      	bhi.n	8003500 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x54>
      arr[i] = (var >> (8 * i));
 80034f2:	18f9      	adds	r1, r7, r3
 80034f4:	00da      	lsls	r2, r3, #3
 80034f6:	fa25 f202 	lsr.w	r2, r5, r2
 80034fa:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 80034fc:	3301      	adds	r3, #1
 80034fe:	e7f6      	b.n	80034ee <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x42>
      offset += 4;
 8003500:	3704      	adds	r7, #4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003502:	462a      	mov	r2, r5
 8003504:	68f1      	ldr	r1, [r6, #12]
 8003506:	19e0      	adds	r0, r4, r7
 8003508:	f002 f92e 	bl	8005768 <memcpy>
      offset += length_message_type;
 800350c:	443d      	add	r5, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 800350e:	6930      	ldr	r0, [r6, #16]
 8003510:	f7fc fe26 	bl	8000160 <strlen>
 8003514:	4607      	mov	r7, r0
 8003516:	2300      	movs	r3, #0
 8003518:	2b03      	cmp	r3, #3
 800351a:	d806      	bhi.n	800352a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x7e>
      arr[i] = (var >> (8 * i));
 800351c:	18e9      	adds	r1, r5, r3
 800351e:	00da      	lsls	r2, r3, #3
 8003520:	fa27 f202 	lsr.w	r2, r7, r2
 8003524:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003526:	3301      	adds	r3, #1
 8003528:	e7f6      	b.n	8003518 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6c>
      offset += 4;
 800352a:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800352c:	463a      	mov	r2, r7
 800352e:	6931      	ldr	r1, [r6, #16]
 8003530:	1960      	adds	r0, r4, r5
 8003532:	f002 f919 	bl	8005768 <memcpy>
      offset += length_md5sum;
 8003536:	443d      	add	r5, r7
      u_buffer_size.real = this->buffer_size;
 8003538:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800353a:	5563      	strb	r3, [r4, r5]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800353c:	1c6a      	adds	r2, r5, #1
 800353e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003542:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003544:	1caa      	adds	r2, r5, #2
 8003546:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800354a:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800354c:	1cea      	adds	r2, r5, #3
 800354e:	0e1b      	lsrs	r3, r3, #24
 8003550:	54a3      	strb	r3, [r4, r2]
    }
 8003552:	1d28      	adds	r0, r5, #4
 8003554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003556 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8003556:	b570      	push	{r4, r5, r6, lr}
 8003558:	4606      	mov	r6, r0
 800355a:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800355c:	7903      	ldrb	r3, [r0, #4]
 800355e:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
 8003560:	6880      	ldr	r0, [r0, #8]
 8003562:	f7fc fdfd 	bl	8000160 <strlen>
 8003566:	4604      	mov	r4, r0
 8003568:	2300      	movs	r3, #0
 800356a:	2b03      	cmp	r3, #3
 800356c:	d806      	bhi.n	800357c <_ZNK14rosserial_msgs3Log9serializeEPh+0x26>
 800356e:	1c5a      	adds	r2, r3, #1
      arr[i] = (var >> (8 * i));
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	fa24 f303 	lsr.w	r3, r4, r3
 8003576:	54ab      	strb	r3, [r5, r2]
    for (size_t i = 0; i < sizeof(V); i++)
 8003578:	4613      	mov	r3, r2
 800357a:	e7f6      	b.n	800356a <_ZNK14rosserial_msgs3Log9serializeEPh+0x14>
      memcpy(outbuffer + offset, this->msg, length_msg);
 800357c:	4622      	mov	r2, r4
 800357e:	68b1      	ldr	r1, [r6, #8]
 8003580:	1d68      	adds	r0, r5, #5
 8003582:	f002 f8f1 	bl	8005768 <memcpy>
    }
 8003586:	1d60      	adds	r0, r4, #5
 8003588:	bd70      	pop	{r4, r5, r6, pc}

0800358a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800358a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800358e:	4606      	mov	r6, r0
 8003590:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003592:	7903      	ldrb	r3, [r0, #4]
 8003594:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003596:	7943      	ldrb	r3, [r0, #5]
 8003598:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800359a:	7983      	ldrb	r3, [r0, #6]
 800359c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800359e:	79c3      	ldrb	r3, [r0, #7]
 80035a0:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 80035a2:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 80035a4:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80035a6:	6873      	ldr	r3, [r6, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d211      	bcs.n	80035d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x46>
      u_intsi.real = this->ints[i];
 80035ac:	68f3      	ldr	r3, [r6, #12]
 80035ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80035b2:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80035b4:	1c61      	adds	r1, r4, #1
 80035b6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80035ba:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80035bc:	1ca1      	adds	r1, r4, #2
 80035be:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80035c2:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80035c4:	1ce1      	adds	r1, r4, #3
 80035c6:	0e1b      	lsrs	r3, r3, #24
 80035c8:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->ints[i]);
 80035ca:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80035cc:	3201      	adds	r2, #1
 80035ce:	e7ea      	b.n	80035a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1c>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80035d0:	7c33      	ldrb	r3, [r6, #16]
 80035d2:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80035d4:	1c63      	adds	r3, r4, #1
 80035d6:	7c72      	ldrb	r2, [r6, #17]
 80035d8:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80035da:	1ca3      	adds	r3, r4, #2
 80035dc:	7cb2      	ldrb	r2, [r6, #18]
 80035de:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80035e0:	1ce3      	adds	r3, r4, #3
 80035e2:	7cf2      	ldrb	r2, [r6, #19]
 80035e4:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->floats_length);
 80035e6:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 80035e8:	2200      	movs	r2, #0
 80035ea:	6933      	ldr	r3, [r6, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d211      	bcs.n	8003614 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8a>
      u_floatsi.real = this->floats[i];
 80035f0:	69b3      	ldr	r3, [r6, #24]
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80035f6:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80035f8:	1c61      	adds	r1, r4, #1
 80035fa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80035fe:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003600:	1ca1      	adds	r1, r4, #2
 8003602:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8003606:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003608:	1ce1      	adds	r1, r4, #3
 800360a:	0e1b      	lsrs	r3, r3, #24
 800360c:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->floats[i]);
 800360e:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 8003610:	3201      	adds	r2, #1
 8003612:	e7ea      	b.n	80035ea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x60>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003614:	7f33      	ldrb	r3, [r6, #28]
 8003616:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003618:	1c63      	adds	r3, r4, #1
 800361a:	7f72      	ldrb	r2, [r6, #29]
 800361c:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800361e:	1ca3      	adds	r3, r4, #2
 8003620:	7fb2      	ldrb	r2, [r6, #30]
 8003622:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003624:	1ce3      	adds	r3, r4, #3
 8003626:	7ff2      	ldrb	r2, [r6, #31]
 8003628:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->strings_length);
 800362a:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < strings_length; i++){
 800362c:	f04f 0800 	mov.w	r8, #0
 8003630:	e00a      	b.n	8003648 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      offset += 4;
 8003632:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003634:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003636:	463a      	mov	r2, r7
 8003638:	f853 1009 	ldr.w	r1, [r3, r9]
 800363c:	1928      	adds	r0, r5, r4
 800363e:	f002 f893 	bl	8005768 <memcpy>
      offset += length_stringsi;
 8003642:	443c      	add	r4, r7
      for( uint32_t i = 0; i < strings_length; i++){
 8003644:	f108 0801 	add.w	r8, r8, #1
 8003648:	69f3      	ldr	r3, [r6, #28]
 800364a:	4598      	cmp	r8, r3
 800364c:	d212      	bcs.n	8003674 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xea>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800364e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003650:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8003654:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003658:	f7fc fd82 	bl	8000160 <strlen>
 800365c:	4607      	mov	r7, r0
      varToArr(outbuffer + offset, length_stringsi);
 800365e:	4620      	mov	r0, r4
 8003660:	2300      	movs	r3, #0
 8003662:	2b03      	cmp	r3, #3
 8003664:	d8e5      	bhi.n	8003632 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      arr[i] = (var >> (8 * i));
 8003666:	18c1      	adds	r1, r0, r3
 8003668:	00da      	lsls	r2, r3, #3
 800366a:	fa27 f202 	lsr.w	r2, r7, r2
 800366e:	546a      	strb	r2, [r5, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003670:	3301      	adds	r3, #1
 8003672:	e7f6      	b.n	8003662 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xd8>
    }
 8003674:	4620      	mov	r0, r4
 8003676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800367a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800367a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367c:	4606      	mov	r6, r0
 800367e:	460d      	mov	r5, r1
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003680:	780c      	ldrb	r4, [r1, #0]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003682:	784b      	ldrb	r3, [r1, #1]
 8003684:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003688:	788b      	ldrb	r3, [r1, #2]
 800368a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800368e:	78cb      	ldrb	r3, [r1, #3]
 8003690:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      if(ints_lengthT > ints_length)
 8003694:	6843      	ldr	r3, [r0, #4]
 8003696:	429c      	cmp	r4, r3
 8003698:	d819      	bhi.n	80036ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x54>
      ints_length = ints_lengthT;
 800369a:	6074      	str	r4, [r6, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800369c:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 800369e:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80036a0:	6873      	ldr	r3, [r6, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d219      	bcs.n	80036da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x60>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036a6:	5d2b      	ldrb	r3, [r5, r4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036a8:	1c61      	adds	r1, r4, #1
 80036aa:	5c69      	ldrb	r1, [r5, r1]
 80036ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036b0:	1ca1      	adds	r1, r4, #2
 80036b2:	5c69      	ldrb	r1, [r5, r1]
 80036b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036b8:	1ce1      	adds	r1, r4, #3
 80036ba:	5c69      	ldrb	r1, [r5, r1]
 80036bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 80036c0:	60b3      	str	r3, [r6, #8]
      offset += sizeof(this->st_ints);
 80036c2:	3404      	adds	r4, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80036c4:	68f1      	ldr	r1, [r6, #12]
 80036c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 80036ca:	3201      	adds	r2, #1
 80036cc:	e7e8      	b.n	80036a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80036ce:	00a1      	lsls	r1, r4, #2
 80036d0:	68c0      	ldr	r0, [r0, #12]
 80036d2:	f002 f869 	bl	80057a8 <realloc>
 80036d6:	60f0      	str	r0, [r6, #12]
 80036d8:	e7df      	b.n	800369a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x20>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80036da:	5d2f      	ldrb	r7, [r5, r4]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80036dc:	1c63      	adds	r3, r4, #1
 80036de:	5ceb      	ldrb	r3, [r5, r3]
 80036e0:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80036e4:	1ca3      	adds	r3, r4, #2
 80036e6:	5ceb      	ldrb	r3, [r5, r3]
 80036e8:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80036ec:	1ce3      	adds	r3, r4, #3
 80036ee:	5ceb      	ldrb	r3, [r5, r3]
 80036f0:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 80036f4:	3404      	adds	r4, #4
      if(floats_lengthT > floats_length)
 80036f6:	6933      	ldr	r3, [r6, #16]
 80036f8:	429f      	cmp	r7, r3
 80036fa:	d818      	bhi.n	800372e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xb4>
      floats_length = floats_lengthT;
 80036fc:	6137      	str	r7, [r6, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80036fe:	2200      	movs	r2, #0
 8003700:	6933      	ldr	r3, [r6, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d219      	bcs.n	800373a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc0>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003706:	5d2b      	ldrb	r3, [r5, r4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003708:	1c61      	adds	r1, r4, #1
 800370a:	5c69      	ldrb	r1, [r5, r1]
 800370c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003710:	1ca1      	adds	r1, r4, #2
 8003712:	5c69      	ldrb	r1, [r5, r1]
 8003714:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003718:	1ce1      	adds	r1, r4, #3
 800371a:	5c69      	ldrb	r1, [r5, r1]
 800371c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8003720:	6173      	str	r3, [r6, #20]
      offset += sizeof(this->st_floats);
 8003722:	3404      	adds	r4, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003724:	69b1      	ldr	r1, [r6, #24]
 8003726:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 800372a:	3201      	adds	r2, #1
 800372c:	e7e8      	b.n	8003700 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x86>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800372e:	00b9      	lsls	r1, r7, #2
 8003730:	69b0      	ldr	r0, [r6, #24]
 8003732:	f002 f839 	bl	80057a8 <realloc>
 8003736:	61b0      	str	r0, [r6, #24]
 8003738:	e7e0      	b.n	80036fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x82>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800373a:	5d2f      	ldrb	r7, [r5, r4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800373c:	1c63      	adds	r3, r4, #1
 800373e:	5ceb      	ldrb	r3, [r5, r3]
 8003740:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003744:	1ca3      	adds	r3, r4, #2
 8003746:	5ceb      	ldrb	r3, [r5, r3]
 8003748:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800374c:	1ce3      	adds	r3, r4, #3
 800374e:	5ceb      	ldrb	r3, [r5, r3]
 8003750:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
 8003754:	3404      	adds	r4, #4
      if(strings_lengthT > strings_length)
 8003756:	69f3      	ldr	r3, [r6, #28]
 8003758:	429f      	cmp	r7, r3
 800375a:	d803      	bhi.n	8003764 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xea>
      strings_length = strings_lengthT;
 800375c:	61f7      	str	r7, [r6, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800375e:	f04f 0e00 	mov.w	lr, #0
 8003762:	e01b      	b.n	800379c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x122>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003764:	00b9      	lsls	r1, r7, #2
 8003766:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003768:	f002 f81e 	bl	80057a8 <realloc>
 800376c:	6270      	str	r0, [r6, #36]	; 0x24
 800376e:	e7f5      	b.n	800375c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe2>
      offset += 4;
 8003770:	3404      	adds	r4, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003772:	4623      	mov	r3, r4
 8003774:	18a0      	adds	r0, r4, r2
 8003776:	4283      	cmp	r3, r0
 8003778:	d204      	bcs.n	8003784 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10a>
          inbuffer[k-1]=inbuffer[k];
 800377a:	1e59      	subs	r1, r3, #1
 800377c:	5cef      	ldrb	r7, [r5, r3]
 800377e:	546f      	strb	r7, [r5, r1]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003780:	3301      	adds	r3, #1
 8003782:	e7f7      	b.n	8003774 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfa>
      inbuffer[offset+length_st_strings-1]=0;
 8003784:	1e43      	subs	r3, r0, #1
 8003786:	2200      	movs	r2, #0
 8003788:	54ea      	strb	r2, [r5, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 800378a:	3c01      	subs	r4, #1
 800378c:	192b      	adds	r3, r5, r4
 800378e:	6233      	str	r3, [r6, #32]
      offset += length_st_strings;
 8003790:	4604      	mov	r4, r0
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003792:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003794:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8003798:	f10e 0e01 	add.w	lr, lr, #1
 800379c:	69f3      	ldr	r3, [r6, #28]
 800379e:	459e      	cmp	lr, r3
 80037a0:	d20b      	bcs.n	80037ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x140>
      arrToVar(length_st_strings, (inbuffer + offset));
 80037a2:	4627      	mov	r7, r4
    var = 0;
 80037a4:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80037a6:	4613      	mov	r3, r2
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d8e1      	bhi.n	8003770 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      var |= (arr[i] << (8 * i));
 80037ac:	19e9      	adds	r1, r5, r7
 80037ae:	5cc9      	ldrb	r1, [r1, r3]
 80037b0:	00d8      	lsls	r0, r3, #3
 80037b2:	4081      	lsls	r1, r0
 80037b4:	430a      	orrs	r2, r1
    for (size_t i = 0; i < sizeof(V); i++)
 80037b6:	3301      	adds	r3, #1
 80037b8:	e7f6      	b.n	80037a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x12e>
    }
 80037ba:	4620      	mov	r0, r4
 80037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 80037c0:	b530      	push	{r4, r5, lr}
 80037c2:	b085      	sub	sp, #20
  {
    if (id >= 100 && !configured_)
 80037c4:	2963      	cmp	r1, #99	; 0x63
 80037c6:	dd04      	ble.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x12>
 80037c8:	f241 03f4 	movw	r3, #4340	; 0x10f4
 80037cc:	5cc3      	ldrb	r3, [r0, r3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d069      	beq.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xe6>
 80037d2:	460d      	mov	r5, r1
 80037d4:	4604      	mov	r4, r0
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f600 011f 	addw	r1, r0, #2079	; 0x81f
 80037de:	4610      	mov	r0, r2
 80037e0:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
 80037e2:	23ff      	movs	r3, #255	; 0xff
 80037e4:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 80037e8:	23fe      	movs	r3, #254	; 0xfe
 80037ea:	f884 3819 	strb.w	r3, [r4, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80037ee:	b2c3      	uxtb	r3, r0
 80037f0:	f884 381a 	strb.w	r3, [r4, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80037f4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80037f8:	f884 281b 	strb.w	r2, [r4, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80037fc:	4413      	add	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	f884 381c 	strb.w	r3, [r4, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003806:	f884 581d 	strb.w	r5, [r4, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800380a:	f345 2307 	sbfx	r3, r5, #8, #8
 800380e:	f884 381e 	strb.w	r3, [r4, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 8003812:	2305      	movs	r3, #5
    int chk = 0;
 8003814:	2200      	movs	r2, #0
    for (int i = 5; i < l + 7; i++)
 8003816:	1dc1      	adds	r1, r0, #7
 8003818:	428b      	cmp	r3, r1
 800381a:	da05      	bge.n	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x68>
      chk += message_out[i];
 800381c:	18e1      	adds	r1, r4, r3
 800381e:	f891 1818 	ldrb.w	r1, [r1, #2072]	; 0x818
 8003822:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8003824:	3301      	adds	r3, #1
 8003826:	e7f6      	b.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x56>
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 8003828:	f100 0508 	add.w	r5, r0, #8
 800382c:	4253      	negs	r3, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	b2db      	uxtb	r3, r3
 8003832:	bf58      	it	pl
 8003834:	425a      	negpl	r2, r3
 8003836:	43d2      	mvns	r2, r2
 8003838:	4421      	add	r1, r4
 800383a:	f881 2818 	strb.w	r2, [r1, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 800383e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003842:	dc20      	bgt.n	8003886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc6>
    {
      hardware_.write(message_out, l);
 8003844:	f604 0118 	addw	r1, r4, #2072	; 0x818
		return com->read();
	}

	void write(uint8_t* data, int length)
	{
		com->write(data, length);
 8003848:	6860      	ldr	r0, [r4, #4]
		return c;
	}

	inline void write(const uint8_t * const c, const int length)
	{
		if (length > BUF_SIZE || length < 1)
 800384a:	1e6b      	subs	r3, r5, #1
 800384c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003850:	d216      	bcs.n	8003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc0>
		{
			return;
		}

		while(!tx_cplt)
 8003852:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0fa      	beq.n	8003852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x92>
 800385c:	2300      	movs	r3, #0
		{

		}

		for (int i = 0; i < length; i++)
 800385e:	429d      	cmp	r5, r3
 8003860:	dd03      	ble.n	800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xaa>
		{
			tx_buf[i] = c[i];
 8003862:	5cca      	ldrb	r2, [r1, r3]
 8003864:	54c2      	strb	r2, [r0, r3]
		for (int i = 0; i < length; i++)
 8003866:	3301      	adds	r3, #1
 8003868:	e7f9      	b.n	800385e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x9e>
		}

		if(tx_cplt)
		{
			tx_cplt = false;
 800386a:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003872:	b2aa      	uxth	r2, r5
 8003874:	4601      	mov	r1, r0
 8003876:	f241 0308 	movw	r3, #4104	; 0x1008
 800387a:	58c0      	ldr	r0, [r0, r3]
 800387c:	f7ff f86c 	bl	8002958 <HAL_UART_Transmit_DMA>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 8003880:	4628      	mov	r0, r5
 8003882:	b005      	add	sp, #20
 8003884:	bd30      	pop	{r4, r5, pc}
      msg("")
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xec>)
 8003888:	9301      	str	r3, [sp, #4]

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 800388a:	2303      	movs	r3, #3
 800388c:	f88d 3008 	strb.w	r3, [sp, #8]
    l.msg = (char*)msg;
 8003890:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xf0>)
 8003892:	9303      	str	r3, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	aa01      	add	r2, sp, #4
 800389a:	2107      	movs	r1, #7
 800389c:	4620      	mov	r0, r4
 800389e:	4798      	blx	r3
      return -1;
 80038a0:	f04f 35ff 	mov.w	r5, #4294967295
 80038a4:	e7ec      	b.n	8003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc0>
      return 0;
 80038a6:	2500      	movs	r5, #0
 80038a8:	e7ea      	b.n	8003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc0>
 80038aa:	bf00      	nop
 80038ac:	0800601c 	.word	0x0800601c
 80038b0:	080061b0 	.word	0x080061b0

080038b4 <_ZNK13geometry_msgs5Twist9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80038b4:	b430      	push	{r4, r5}
 80038b6:	6902      	ldr	r2, [r0, #16]
 80038b8:	6943      	ldr	r3, [r0, #20]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80038ba:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80038bc:	f3c2 2507 	ubfx	r5, r2, #8, #8
 80038c0:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80038c2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80038c6:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80038c8:	0e12      	lsrs	r2, r2, #24
 80038ca:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80038cc:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80038ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038d2:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80038d4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80038d8:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80038da:	0e1b      	lsrs	r3, r3, #24
 80038dc:	71cb      	strb	r3, [r1, #7]
 80038de:	6982      	ldr	r2, [r0, #24]
 80038e0:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80038e2:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80038e4:	f3c2 2507 	ubfx	r5, r2, #8, #8
 80038e8:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80038ea:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80038ee:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80038f0:	0e12      	lsrs	r2, r2, #24
 80038f2:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80038f4:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80038f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038fa:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80038fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003900:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003902:	0e1b      	lsrs	r3, r3, #24
 8003904:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 8003906:	6a02      	ldr	r2, [r0, #32]
 8003908:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800390a:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800390c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8003910:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003912:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003916:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003918:	0e12      	lsrs	r2, r2, #24
 800391a:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800391c:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800391e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003922:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003924:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003928:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800392a:	0e1b      	lsrs	r3, r3, #24
 800392c:	75cb      	strb	r3, [r1, #23]
      offset += this->angular.serialize(outbuffer + offset);
 800392e:	f101 0318 	add.w	r3, r1, #24
 8003932:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003934:	6b42      	ldr	r2, [r0, #52]	; 0x34
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003936:	760c      	strb	r4, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003938:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800393c:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800393e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8003942:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003944:	0e24      	lsrs	r4, r4, #24
 8003946:	70dc      	strb	r4, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003948:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800394a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800394e:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003950:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003954:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003956:	0e12      	lsrs	r2, r2, #24
 8003958:	71da      	strb	r2, [r3, #7]
 800395a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800395c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800395e:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003960:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8003964:	725c      	strb	r4, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003966:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800396a:	729c      	strb	r4, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800396c:	0e09      	lsrs	r1, r1, #24
 800396e:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003970:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003972:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003976:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003978:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800397c:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800397e:	0e12      	lsrs	r2, r2, #24
 8003980:	73da      	strb	r2, [r3, #15]
      u_z.real = this->z;
 8003982:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003984:	6c42      	ldr	r2, [r0, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003986:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003988:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800398c:	7458      	strb	r0, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800398e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8003992:	7498      	strb	r0, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003994:	0e09      	lsrs	r1, r1, #24
 8003996:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003998:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800399a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800399e:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80039a0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80039a4:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80039a6:	0e12      	lsrs	r2, r2, #24
 80039a8:	75da      	strb	r2, [r3, #23]
    }
 80039aa:	2030      	movs	r0, #48	; 0x30
 80039ac:	bc30      	pop	{r4, r5}
 80039ae:	4770      	bx	lr

080039b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 80039b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039b4:	780c      	ldrb	r4, [r1, #0]
 80039b6:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039b8:	784e      	ldrb	r6, [r1, #1]
 80039ba:	2300      	movs	r3, #0
 80039bc:	0232      	lsls	r2, r6, #8
 80039be:	4314      	orrs	r4, r2
 80039c0:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039c2:	788e      	ldrb	r6, [r1, #2]
 80039c4:	2300      	movs	r3, #0
 80039c6:	0432      	lsls	r2, r6, #16
 80039c8:	4314      	orrs	r4, r2
 80039ca:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039cc:	78ce      	ldrb	r6, [r1, #3]
 80039ce:	0a33      	lsrs	r3, r6, #8
 80039d0:	0632      	lsls	r2, r6, #24
 80039d2:	4314      	orrs	r4, r2
 80039d4:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80039d6:	2200      	movs	r2, #0
 80039d8:	790b      	ldrb	r3, [r1, #4]
 80039da:	4314      	orrs	r4, r2
 80039dc:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80039de:	f891 8005 	ldrb.w	r8, [r1, #5]
 80039e2:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80039e6:	ea44 0802 	orr.w	r8, r4, r2
 80039ea:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039ee:	798e      	ldrb	r6, [r1, #6]
 80039f0:	0435      	lsls	r5, r6, #16
 80039f2:	ea48 0802 	orr.w	r8, r8, r2
 80039f6:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039fa:	79ce      	ldrb	r6, [r1, #7]
 80039fc:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 80039fe:	ea42 0408 	orr.w	r4, r2, r8
 8003a02:	ea45 0509 	orr.w	r5, r5, r9
 8003a06:	e9c0 4508 	strd	r4, r5, [r0, #32]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a0a:	f891 8008 	ldrb.w	r8, [r1, #8]
 8003a0e:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a12:	7a4e      	ldrb	r6, [r1, #9]
 8003a14:	2500      	movs	r5, #0
 8003a16:	0234      	lsls	r4, r6, #8
 8003a18:	ea48 0804 	orr.w	r8, r8, r4
 8003a1c:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a20:	7a8e      	ldrb	r6, [r1, #10]
 8003a22:	2500      	movs	r5, #0
 8003a24:	0434      	lsls	r4, r6, #16
 8003a26:	ea48 0804 	orr.w	r8, r8, r4
 8003a2a:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a2e:	7ace      	ldrb	r6, [r1, #11]
 8003a30:	0a35      	lsrs	r5, r6, #8
 8003a32:	0634      	lsls	r4, r6, #24
 8003a34:	ea48 0804 	orr.w	r8, r8, r4
 8003a38:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a3c:	7b0f      	ldrb	r7, [r1, #12]
 8003a3e:	ea48 0802 	orr.w	r8, r8, r2
 8003a42:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a46:	7b4e      	ldrb	r6, [r1, #13]
 8003a48:	0235      	lsls	r5, r6, #8
 8003a4a:	ea48 0802 	orr.w	r8, r8, r2
 8003a4e:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a52:	7b8e      	ldrb	r6, [r1, #14]
 8003a54:	0435      	lsls	r5, r6, #16
 8003a56:	ea48 0802 	orr.w	r8, r8, r2
 8003a5a:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a5e:	7bce      	ldrb	r6, [r1, #15]
 8003a60:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 8003a62:	ea42 0408 	orr.w	r4, r2, r8
 8003a66:	ea45 0509 	orr.w	r5, r5, r9
 8003a6a:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a6e:	f891 8010 	ldrb.w	r8, [r1, #16]
 8003a72:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a76:	7c4e      	ldrb	r6, [r1, #17]
 8003a78:	2500      	movs	r5, #0
 8003a7a:	0234      	lsls	r4, r6, #8
 8003a7c:	ea48 0804 	orr.w	r8, r8, r4
 8003a80:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a84:	7c8e      	ldrb	r6, [r1, #18]
 8003a86:	2500      	movs	r5, #0
 8003a88:	0434      	lsls	r4, r6, #16
 8003a8a:	ea48 0804 	orr.w	r8, r8, r4
 8003a8e:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a92:	7cce      	ldrb	r6, [r1, #19]
 8003a94:	0a35      	lsrs	r5, r6, #8
 8003a96:	0634      	lsls	r4, r6, #24
 8003a98:	ea48 0804 	orr.w	r8, r8, r4
 8003a9c:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003aa0:	7d0f      	ldrb	r7, [r1, #20]
 8003aa2:	ea48 0802 	orr.w	r8, r8, r2
 8003aa6:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003aaa:	7d4e      	ldrb	r6, [r1, #21]
 8003aac:	0235      	lsls	r5, r6, #8
 8003aae:	ea48 0802 	orr.w	r8, r8, r2
 8003ab2:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ab6:	7d8e      	ldrb	r6, [r1, #22]
 8003ab8:	0435      	lsls	r5, r6, #16
 8003aba:	ea48 0802 	orr.w	r8, r8, r2
 8003abe:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ac2:	7dce      	ldrb	r6, [r1, #23]
 8003ac4:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 8003ac6:	ea42 0408 	orr.w	r4, r2, r8
 8003aca:	ea45 0509 	orr.w	r5, r5, r9
 8003ace:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      offset += this->angular.deserialize(inbuffer + offset);
 8003ad2:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ad6:	7e0e      	ldrb	r6, [r1, #24]
 8003ad8:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ada:	f893 8001 	ldrb.w	r8, [r3, #1]
 8003ade:	2500      	movs	r5, #0
 8003ae0:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8003ae4:	ea46 0804 	orr.w	r8, r6, r4
 8003ae8:	ea47 0905 	orr.w	r9, r7, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003aec:	789e      	ldrb	r6, [r3, #2]
 8003aee:	2500      	movs	r5, #0
 8003af0:	0434      	lsls	r4, r6, #16
 8003af2:	ea48 0804 	orr.w	r8, r8, r4
 8003af6:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003afa:	78de      	ldrb	r6, [r3, #3]
 8003afc:	0a35      	lsrs	r5, r6, #8
 8003afe:	0634      	lsls	r4, r6, #24
 8003b00:	ea48 0804 	orr.w	r8, r8, r4
 8003b04:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b08:	f893 b004 	ldrb.w	fp, [r3, #4]
 8003b0c:	ea48 0802 	orr.w	r8, r8, r2
 8003b10:	ea49 090b 	orr.w	r9, r9, fp
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b14:	795e      	ldrb	r6, [r3, #5]
 8003b16:	0235      	lsls	r5, r6, #8
 8003b18:	ea48 0802 	orr.w	r8, r8, r2
 8003b1c:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b20:	799e      	ldrb	r6, [r3, #6]
 8003b22:	0435      	lsls	r5, r6, #16
 8003b24:	ea48 0802 	orr.w	r8, r8, r2
 8003b28:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b2c:	79de      	ldrb	r6, [r3, #7]
 8003b2e:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8003b30:	ea42 0408 	orr.w	r4, r2, r8
 8003b34:	ea45 0509 	orr.w	r5, r5, r9
 8003b38:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b3c:	f893 8008 	ldrb.w	r8, [r3, #8]
 8003b40:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b44:	7a5e      	ldrb	r6, [r3, #9]
 8003b46:	2500      	movs	r5, #0
 8003b48:	0234      	lsls	r4, r6, #8
 8003b4a:	ea48 0804 	orr.w	r8, r8, r4
 8003b4e:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b52:	7a9e      	ldrb	r6, [r3, #10]
 8003b54:	2500      	movs	r5, #0
 8003b56:	0434      	lsls	r4, r6, #16
 8003b58:	ea48 0804 	orr.w	r8, r8, r4
 8003b5c:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b60:	7ade      	ldrb	r6, [r3, #11]
 8003b62:	0a35      	lsrs	r5, r6, #8
 8003b64:	0634      	lsls	r4, r6, #24
 8003b66:	ea48 0804 	orr.w	r8, r8, r4
 8003b6a:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b6e:	7b1f      	ldrb	r7, [r3, #12]
 8003b70:	ea48 0802 	orr.w	r8, r8, r2
 8003b74:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b78:	7b5e      	ldrb	r6, [r3, #13]
 8003b7a:	0235      	lsls	r5, r6, #8
 8003b7c:	ea48 0802 	orr.w	r8, r8, r2
 8003b80:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b84:	7b9e      	ldrb	r6, [r3, #14]
 8003b86:	0435      	lsls	r5, r6, #16
 8003b88:	ea48 0802 	orr.w	r8, r8, r2
 8003b8c:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b90:	7bde      	ldrb	r6, [r3, #15]
 8003b92:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 8003b94:	ea42 0408 	orr.w	r4, r2, r8
 8003b98:	ea45 0509 	orr.w	r5, r5, r9
 8003b9c:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ba0:	f893 8010 	ldrb.w	r8, [r3, #16]
 8003ba4:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ba8:	7c5e      	ldrb	r6, [r3, #17]
 8003baa:	2500      	movs	r5, #0
 8003bac:	0234      	lsls	r4, r6, #8
 8003bae:	ea48 0804 	orr.w	r8, r8, r4
 8003bb2:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bb6:	7c9e      	ldrb	r6, [r3, #18]
 8003bb8:	2500      	movs	r5, #0
 8003bba:	0434      	lsls	r4, r6, #16
 8003bbc:	ea48 0804 	orr.w	r8, r8, r4
 8003bc0:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bc4:	7cde      	ldrb	r6, [r3, #19]
 8003bc6:	0a35      	lsrs	r5, r6, #8
 8003bc8:	0634      	lsls	r4, r6, #24
 8003bca:	ea48 0804 	orr.w	r8, r8, r4
 8003bce:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bd2:	7d1f      	ldrb	r7, [r3, #20]
 8003bd4:	ea48 0802 	orr.w	r8, r8, r2
 8003bd8:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bdc:	7d5e      	ldrb	r6, [r3, #21]
 8003bde:	0235      	lsls	r5, r6, #8
 8003be0:	ea48 0802 	orr.w	r8, r8, r2
 8003be4:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003be8:	7d9e      	ldrb	r6, [r3, #22]
 8003bea:	0435      	lsls	r5, r6, #16
 8003bec:	ea42 0408 	orr.w	r4, r2, r8
 8003bf0:	ea45 0509 	orr.w	r5, r5, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bf4:	7dde      	ldrb	r6, [r3, #23]
 8003bf6:	ea4f 6906 	mov.w	r9, r6, lsl #24
      this->z = u_z.real;
 8003bfa:	4314      	orrs	r4, r2
 8003bfc:	ea45 0509 	orr.w	r5, r5, r9
 8003c00:	e9c0 4514 	strd	r4, r5, [r0, #80]	; 0x50
    this->cb_(msg);
 8003c04:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003c06:	3010      	adds	r0, #16
 8003c08:	4798      	blx	r3
 8003c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c0e <_ZN13geometry_msgs5Twist11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8003c0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      offset += this->linear.deserialize(inbuffer + offset);
 8003c12:	f100 0e08 	add.w	lr, r0, #8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c16:	780c      	ldrb	r4, [r1, #0]
 8003c18:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c1a:	784e      	ldrb	r6, [r1, #1]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	0232      	lsls	r2, r6, #8
 8003c20:	4314      	orrs	r4, r2
 8003c22:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c24:	788e      	ldrb	r6, [r1, #2]
 8003c26:	2300      	movs	r3, #0
 8003c28:	0432      	lsls	r2, r6, #16
 8003c2a:	4314      	orrs	r4, r2
 8003c2c:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c2e:	78ce      	ldrb	r6, [r1, #3]
 8003c30:	0a33      	lsrs	r3, r6, #8
 8003c32:	0632      	lsls	r2, r6, #24
 8003c34:	4314      	orrs	r4, r2
 8003c36:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	790b      	ldrb	r3, [r1, #4]
 8003c3c:	4314      	orrs	r4, r2
 8003c3e:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c40:	f891 8005 	ldrb.w	r8, [r1, #5]
 8003c44:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8003c48:	ea44 0802 	orr.w	r8, r4, r2
 8003c4c:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c50:	798e      	ldrb	r6, [r1, #6]
 8003c52:	0435      	lsls	r5, r6, #16
 8003c54:	ea48 0802 	orr.w	r8, r8, r2
 8003c58:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c5c:	79ce      	ldrb	r6, [r1, #7]
 8003c5e:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8003c60:	ea42 0408 	orr.w	r4, r2, r8
 8003c64:	ea45 0509 	orr.w	r5, r5, r9
 8003c68:	e9c0 4504 	strd	r4, r5, [r0, #16]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c6c:	f891 8008 	ldrb.w	r8, [r1, #8]
 8003c70:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c74:	7a4e      	ldrb	r6, [r1, #9]
 8003c76:	2500      	movs	r5, #0
 8003c78:	0234      	lsls	r4, r6, #8
 8003c7a:	ea48 0804 	orr.w	r8, r8, r4
 8003c7e:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c82:	7a8e      	ldrb	r6, [r1, #10]
 8003c84:	2500      	movs	r5, #0
 8003c86:	0434      	lsls	r4, r6, #16
 8003c88:	ea48 0804 	orr.w	r8, r8, r4
 8003c8c:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c90:	7ace      	ldrb	r6, [r1, #11]
 8003c92:	0a35      	lsrs	r5, r6, #8
 8003c94:	0634      	lsls	r4, r6, #24
 8003c96:	ea48 0804 	orr.w	r8, r8, r4
 8003c9a:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c9e:	7b0f      	ldrb	r7, [r1, #12]
 8003ca0:	ea48 0802 	orr.w	r8, r8, r2
 8003ca4:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ca8:	7b4e      	ldrb	r6, [r1, #13]
 8003caa:	0235      	lsls	r5, r6, #8
 8003cac:	ea48 0802 	orr.w	r8, r8, r2
 8003cb0:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003cb4:	7b8e      	ldrb	r6, [r1, #14]
 8003cb6:	0435      	lsls	r5, r6, #16
 8003cb8:	ea48 0802 	orr.w	r8, r8, r2
 8003cbc:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003cc0:	7bce      	ldrb	r6, [r1, #15]
 8003cc2:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 8003cc4:	ea42 0408 	orr.w	r4, r2, r8
 8003cc8:	ea45 0509 	orr.w	r5, r5, r9
 8003ccc:	e9c0 4506 	strd	r4, r5, [r0, #24]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003cd0:	f891 8010 	ldrb.w	r8, [r1, #16]
 8003cd4:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cd8:	7c4e      	ldrb	r6, [r1, #17]
 8003cda:	2500      	movs	r5, #0
 8003cdc:	0234      	lsls	r4, r6, #8
 8003cde:	ea48 0804 	orr.w	r8, r8, r4
 8003ce2:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ce6:	7c8e      	ldrb	r6, [r1, #18]
 8003ce8:	2500      	movs	r5, #0
 8003cea:	0434      	lsls	r4, r6, #16
 8003cec:	ea48 0804 	orr.w	r8, r8, r4
 8003cf0:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cf4:	7cce      	ldrb	r6, [r1, #19]
 8003cf6:	0a35      	lsrs	r5, r6, #8
 8003cf8:	0634      	lsls	r4, r6, #24
 8003cfa:	ea48 0804 	orr.w	r8, r8, r4
 8003cfe:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d02:	7d0f      	ldrb	r7, [r1, #20]
 8003d04:	ea48 0802 	orr.w	r8, r8, r2
 8003d08:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d0c:	7d4e      	ldrb	r6, [r1, #21]
 8003d0e:	0235      	lsls	r5, r6, #8
 8003d10:	ea48 0802 	orr.w	r8, r8, r2
 8003d14:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d18:	7d8e      	ldrb	r6, [r1, #22]
 8003d1a:	0435      	lsls	r5, r6, #16
 8003d1c:	ea48 0802 	orr.w	r8, r8, r2
 8003d20:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d24:	7dce      	ldrb	r6, [r1, #23]
 8003d26:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 8003d28:	ea42 0408 	orr.w	r4, r2, r8
 8003d2c:	ea45 0509 	orr.w	r5, r5, r9
 8003d30:	e9c0 4508 	strd	r4, r5, [r0, #32]
      offset += this->angular.deserialize(inbuffer + offset);
 8003d34:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d38:	7e0e      	ldrb	r6, [r1, #24]
 8003d3a:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d3c:	f893 8001 	ldrb.w	r8, [r3, #1]
 8003d40:	2500      	movs	r5, #0
 8003d42:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8003d46:	4334      	orrs	r4, r6
 8003d48:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d4a:	f893 8002 	ldrb.w	r8, [r3, #2]
 8003d4e:	2700      	movs	r7, #0
 8003d50:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8003d54:	4334      	orrs	r4, r6
 8003d56:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d58:	f893 8003 	ldrb.w	r8, [r3, #3]
 8003d5c:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8003d60:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8003d64:	4334      	orrs	r4, r6
 8003d66:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d68:	791f      	ldrb	r7, [r3, #4]
 8003d6a:	4314      	orrs	r4, r2
 8003d6c:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d6e:	f893 8005 	ldrb.w	r8, [r3, #5]
 8003d72:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8003d76:	4314      	orrs	r4, r2
 8003d78:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d7a:	f893 8006 	ldrb.w	r8, [r3, #6]
 8003d7e:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8003d82:	4314      	orrs	r4, r2
 8003d84:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d86:	f893 8007 	ldrb.w	r8, [r3, #7]
 8003d8a:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8003d8e:	4314      	orrs	r4, r2
 8003d90:	433d      	orrs	r5, r7
 8003d92:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d96:	7a1e      	ldrb	r6, [r3, #8]
 8003d98:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d9a:	f893 8009 	ldrb.w	r8, [r3, #9]
 8003d9e:	2500      	movs	r5, #0
 8003da0:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8003da4:	4326      	orrs	r6, r4
 8003da6:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003da8:	f893 800a 	ldrb.w	r8, [r3, #10]
 8003dac:	2500      	movs	r5, #0
 8003dae:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8003db2:	4326      	orrs	r6, r4
 8003db4:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003db6:	f893 800b 	ldrb.w	r8, [r3, #11]
 8003dba:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8003dbe:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8003dc2:	4326      	orrs	r6, r4
 8003dc4:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003dc6:	7b1d      	ldrb	r5, [r3, #12]
 8003dc8:	4316      	orrs	r6, r2
 8003dca:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003dcc:	f893 800d 	ldrb.w	r8, [r3, #13]
 8003dd0:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	4334      	orrs	r4, r6
 8003dd8:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003dda:	f893 800e 	ldrb.w	r8, [r3, #14]
 8003dde:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8003de2:	4314      	orrs	r4, r2
 8003de4:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003de6:	f893 800f 	ldrb.w	r8, [r3, #15]
 8003dea:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 8003dee:	4314      	orrs	r4, r2
 8003df0:	433d      	orrs	r5, r7
 8003df2:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003df6:	7c1e      	ldrb	r6, [r3, #16]
 8003df8:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003dfa:	f893 8011 	ldrb.w	r8, [r3, #17]
 8003dfe:	2500      	movs	r5, #0
 8003e00:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8003e04:	4326      	orrs	r6, r4
 8003e06:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e08:	f893 8012 	ldrb.w	r8, [r3, #18]
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8003e12:	4326      	orrs	r6, r4
 8003e14:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e16:	f893 8013 	ldrb.w	r8, [r3, #19]
 8003e1a:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8003e1e:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8003e22:	4326      	orrs	r6, r4
 8003e24:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e26:	7d1d      	ldrb	r5, [r3, #20]
 8003e28:	4316      	orrs	r6, r2
 8003e2a:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e2c:	f893 8015 	ldrb.w	r8, [r3, #21]
 8003e30:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8003e34:	4316      	orrs	r6, r2
 8003e36:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e38:	f893 8016 	ldrb.w	r8, [r3, #22]
 8003e3c:	ea4f 4508 	mov.w	r5, r8, lsl #16
 8003e40:	4614      	mov	r4, r2
 8003e42:	4334      	orrs	r4, r6
 8003e44:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e46:	f893 8017 	ldrb.w	r8, [r3, #23]
 8003e4a:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 8003e4e:	4314      	orrs	r4, r2
 8003e50:	433d      	orrs	r5, r7
 8003e52:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
    }
 8003e56:	2030      	movs	r0, #48	; 0x30
 8003e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 8003e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e60:	b087      	sub	sp, #28
 8003e62:	4604      	mov	r4, r0
	}

	unsigned long time()
	{
		return HAL_GetTick();
 8003e64:	f7fd fdde 	bl	8001a24 <HAL_GetTick>
 8003e68:	4605      	mov	r5, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003e6a:	f241 03fc 	movw	r3, #4348	; 0x10fc
 8003e6e:	58e3      	ldr	r3, [r4, r3]
 8003e70:	1ac3      	subs	r3, r0, r3
 8003e72:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d903      	bls.n	8003e82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x26>
      configured_ = false;
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8003e80:	54e2      	strb	r2, [r4, r3]
    if (mode_ != MODE_FIRST_FF)
 8003e82:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b383      	cbz	r3, 8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
      if (c_time > last_msg_timeout_time)
 8003e8a:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	d22b      	bcs.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        mode_ = MODE_FIRST_FF;
 8003e94:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e026      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
 8003e9e:	f7fd fdc1 	bl	8001a24 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003ea2:	1b40      	subs	r0, r0, r5
 8003ea4:	6963      	ldr	r3, [r4, #20]
 8003ea6:	4298      	cmp	r0, r3
 8003ea8:	d923      	bls.n	8003ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003eaa:	f06f 0001 	mvn.w	r0, #1
 8003eae:	e2a8      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
			return -1;
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	e035      	b.n	8003f22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0xc6>
        message_in[index_++] = data;
 8003eb6:	f241 02ec 	movw	r2, #4332	; 0x10ec
 8003eba:	58a3      	ldr	r3, [r4, r2]
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	50a1      	str	r1, [r4, r2]
 8003ec0:	4423      	add	r3, r4
 8003ec2:	7618      	strb	r0, [r3, #24]
        bytes_--;
 8003ec4:	f241 02e4 	movw	r2, #4324	; 0x10e4
 8003ec8:	58a3      	ldr	r3, [r4, r2]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	50a3      	str	r3, [r4, r2]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003ece:	b96b      	cbnz	r3, 8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_ = MODE_MSG_CHECKSUM;
 8003ed0:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e008      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_++;
 8003eda:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8003ede:	3301      	adds	r3, #1
 8003ee0:	6013      	str	r3, [r2, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003ee2:	f105 0314 	add.w	r3, r5, #20
 8003ee6:	f504 5288 	add.w	r2, r4, #4352	; 0x1100
 8003eea:	6013      	str	r3, [r2, #0]
      if (spin_timeout_ > 0)
 8003eec:	6963      	ldr	r3, [r4, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1d5      	bne.n	8003e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x42>
		return com->read();
 8003ef2:	6861      	ldr	r1, [r4, #4]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8003ef4:	f241 0308 	movw	r3, #4104	; 0x1008
 8003ef8:	58cb      	ldr	r3, [r1, r3]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 8003f00:	425b      	negs	r3, r3
 8003f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
		if (rx_tail == rx_head)
 8003f06:	f241 0202 	movw	r2, #4098	; 0x1002
 8003f0a:	5a8a      	ldrh	r2, [r1, r2]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d0cf      	beq.n	8003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x54>
		int c = (int) rx_buf[rx_tail++];
 8003f10:	1c53      	adds	r3, r2, #1
 8003f12:	440a      	add	r2, r1
 8003f14:	f892 0800 	ldrb.w	r0, [r2, #2048]	; 0x800
		rx_tail &= buf_mask;
 8003f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1c:	f241 0202 	movw	r2, #4098	; 0x1002
 8003f20:	528b      	strh	r3, [r1, r2]
      if (data < 0)
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f2c0 824b 	blt.w	80043be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x562>
      checksum_ += data;
 8003f28:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8003f2c:	58e2      	ldr	r2, [r4, r3]
 8003f2e:	4402      	add	r2, r0
 8003f30:	50e2      	str	r2, [r4, r3]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003f32:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b07      	cmp	r3, #7
 8003f3a:	d0bc      	beq.n	8003eb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_FIRST_FF)
 8003f3c:	b97b      	cbnz	r3, 8003f5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x102>
        if (data == 0xff)
 8003f3e:	28ff      	cmp	r0, #255	; 0xff
 8003f40:	d0cb      	beq.n	8003eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x7e>
		return HAL_GetTick();
 8003f42:	f7fd fd6f 	bl	8001a24 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003f46:	1b40      	subs	r0, r0, r5
 8003f48:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f4c:	4298      	cmp	r0, r3
 8003f4e:	d9cd      	bls.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          configured_ = false;
 8003f50:	2200      	movs	r2, #0
 8003f52:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8003f56:	54e2      	strb	r2, [r4, r3]
          return SPIN_TIMEOUT;
 8003f58:	f06f 0001 	mvn.w	r0, #1
 8003f5c:	e251      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d038      	beq.n	8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x178>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d054      	beq.n	8004010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1b4>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d061      	beq.n	800402e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1d2>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d06a      	beq.n	8004044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1e8>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d079      	beq.n	8004066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x20a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	f000 8082 	beq.w	800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x220>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d1b7      	bne.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        mode_ = MODE_FIRST_FF;
 8003f7c:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8003f80:	2100      	movs	r1, #0
 8003f82:	6019      	str	r1, [r3, #0]
        if ((checksum_ % 256) == 255)
 8003f84:	1a8b      	subs	r3, r1, r2
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	bf58      	it	pl
 8003f8c:	425a      	negpl	r2, r3
 8003f8e:	2aff      	cmp	r2, #255	; 0xff
 8003f90:	d1ac      	bne.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003f92:	f241 03e8 	movw	r3, #4328	; 0x10e8
 8003f96:	58e6      	ldr	r6, [r4, r3]
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	f000 8084 	beq.w	80040a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x24a>
          else if (topic_ == TopicInfo::ID_TIME)
 8003f9e:	2e0a      	cmp	r6, #10
 8003fa0:	f000 80fa 	beq.w	8004198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x33c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003fa4:	2e06      	cmp	r6, #6
 8003fa6:	f000 8137 	beq.w	8004218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3bc>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003faa:	2e0b      	cmp	r6, #11
 8003fac:	f000 8202 	beq.w	80043b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x558>
            if (subscribers[topic_ - 100])
 8003fb0:	f206 33ba 	addw	r3, r6, #954	; 0x3ba
 8003fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fb8:	6858      	ldr	r0, [r3, #4]
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d096      	beq.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
              subscribers[topic_ - 100]->callback(message_in);
 8003fbe:	f206 33ba 	addw	r3, r6, #954	; 0x3ba
 8003fc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f104 0118 	add.w	r1, r4, #24
 8003fd0:	4798      	blx	r3
 8003fd2:	e78b      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        if (data == PROTOCOL_VER)
 8003fd4:	28fe      	cmp	r0, #254	; 0xfe
 8003fd6:	d016      	beq.n	8004006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1aa>
          mode_ = MODE_FIRST_FF;
 8003fd8:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 8003fe0:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8003fe4:	5ce3      	ldrb	r3, [r4, r3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d180      	bne.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
      data()
 8003fea:	4ba8      	ldr	r3, [pc, #672]	; (800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>)
 8003fec:	9300      	str	r3, [sp, #0]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003fee:	9201      	str	r2, [sp, #4]
 8003ff0:	9202      	str	r2, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	466a      	mov	r2, sp
 8003ff8:	210a      	movs	r1, #10
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4798      	blx	r3
 8003ffe:	f7fd fd11 	bl	8001a24 <HAL_GetTick>
    rt_time = hardware_.time();
 8004002:	60a0      	str	r0, [r4, #8]
 8004004:	e772      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_++;
 8004006:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 800400a:	3301      	adds	r3, #1
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e76d      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        bytes_ = data;
 8004010:	f241 02e4 	movw	r2, #4324	; 0x10e4
 8004014:	50a0      	str	r0, [r4, r2]
        index_ = 0;
 8004016:	2100      	movs	r1, #0
 8004018:	f241 02ec 	movw	r2, #4332	; 0x10ec
 800401c:	50a1      	str	r1, [r4, r2]
        mode_++;
 800401e:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8004022:	3301      	adds	r3, #1
 8004024:	6013      	str	r3, [r2, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8004026:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800402a:	50e0      	str	r0, [r4, r3]
 800402c:	e75e      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        bytes_ += data << 8;
 800402e:	f241 01e4 	movw	r1, #4324	; 0x10e4
 8004032:	5862      	ldr	r2, [r4, r1]
 8004034:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8004038:	5060      	str	r0, [r4, r1]
        mode_++;
 800403a:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 800403e:	3301      	adds	r3, #1
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e753      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        if ((checksum_ % 256) == 255)
 8004044:	4251      	negs	r1, r2
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	b2c9      	uxtb	r1, r1
 800404a:	bf58      	it	pl
 800404c:	424a      	negpl	r2, r1
 800404e:	2aff      	cmp	r2, #255	; 0xff
 8004050:	d004      	beq.n	800405c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x200>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004052:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e747      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_++;
 800405c:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8004060:	3301      	adds	r3, #1
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e742      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        topic_ = data;
 8004066:	f241 02e8 	movw	r2, #4328	; 0x10e8
 800406a:	50a0      	str	r0, [r4, r2]
        mode_++;
 800406c:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8004070:	3301      	adds	r3, #1
 8004072:	6013      	str	r3, [r2, #0]
        checksum_ = data;               /* first byte included in checksum */
 8004074:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8004078:	50e0      	str	r0, [r4, r3]
 800407a:	e737      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        topic_ += data << 8;
 800407c:	f241 02e8 	movw	r2, #4328	; 0x10e8
 8004080:	58a3      	ldr	r3, [r4, r2]
 8004082:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8004086:	50a0      	str	r0, [r4, r2]
        mode_ = MODE_MESSAGE;
 8004088:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 800408c:	2207      	movs	r2, #7
 800408e:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8004090:	f241 03e4 	movw	r3, #4324	; 0x10e4
 8004094:	58e3      	ldr	r3, [r4, r3]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f af28 	bne.w	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_ = MODE_MSG_CHECKSUM;
 800409c:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 80040a0:	2208      	movs	r2, #8
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e722      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
 80040a6:	4b79      	ldr	r3, [pc, #484]	; (800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>)
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	460f      	mov	r7, r1
 80040ac:	9101      	str	r1, [sp, #4]
 80040ae:	9102      	str	r1, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	466a      	mov	r2, sp
 80040b6:	210a      	movs	r1, #10
 80040b8:	4620      	mov	r0, r4
 80040ba:	4798      	blx	r3
 80040bc:	f7fd fcb2 	bl	8001a24 <HAL_GetTick>
    rt_time = hardware_.time();
 80040c0:	60a0      	str	r0, [r4, #8]
      buffer_size(0)
 80040c2:	4b73      	ldr	r3, [pc, #460]	; (8004290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x434>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80040ca:	4b72      	ldr	r3, [pc, #456]	; (8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x438>)
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	9705      	str	r7, [sp, #20]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80040d4:	4637      	mov	r7, r6
 80040d6:	e000      	b.n	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27e>
 80040d8:	3701      	adds	r7, #1
 80040da:	2f18      	cmp	r7, #24
 80040dc:	dc25      	bgt.n	800412a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2ce>
      if (publishers[i] != 0) // non-empty slot
 80040de:	f207 4306 	addw	r3, r7, #1030	; 0x406
 80040e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f6      	beq.n	80040d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27c>
        ti.topic_id = publishers[i]->id_;
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80040f4:	6858      	ldr	r0, [r3, #4]
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4798      	blx	r3
 80040fc:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80040fe:	f207 4806 	addw	r8, r7, #1030	; 0x406
 8004102:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
 8004106:	6858      	ldr	r0, [r3, #4]
 8004108:	6803      	ldr	r3, [r0, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4798      	blx	r3
 800410e:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 8004110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004114:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 800411e:	466a      	mov	r2, sp
 8004120:	6909      	ldr	r1, [r1, #16]
 8004122:	4620      	mov	r0, r4
 8004124:	4798      	blx	r3
 8004126:	e7d7      	b.n	80040d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27c>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004128:	3601      	adds	r6, #1
 800412a:	2e18      	cmp	r6, #24
 800412c:	dc27      	bgt.n	800417e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x322>
      if (subscribers[i] != 0) // non-empty slot
 800412e:	f206 431e 	addw	r3, r6, #1054	; 0x41e
 8004132:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004136:	6858      	ldr	r0, [r3, #4]
 8004138:	2800      	cmp	r0, #0
 800413a:	d0f5      	beq.n	8004128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2cc>
        ti.topic_id = subscribers[i]->id_;
 800413c:	6843      	ldr	r3, [r0, #4]
 800413e:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004142:	6883      	ldr	r3, [r0, #8]
 8004144:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004146:	6803      	ldr	r3, [r0, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4798      	blx	r3
 800414c:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800414e:	f206 471e 	addw	r7, r6, #1054	; 0x41e
 8004152:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	6803      	ldr	r3, [r0, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4798      	blx	r3
 800415e:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 8004160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004164:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f8d3 8000 	ldr.w	r8, [r3]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	6803      	ldr	r3, [r0, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4798      	blx	r3
 8004174:	466a      	mov	r2, sp
 8004176:	4601      	mov	r1, r0
 8004178:	4620      	mov	r0, r4
 800417a:	47c0      	blx	r8
 800417c:	e7d4      	b.n	8004128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2cc>
    configured_ = true;
 800417e:	2201      	movs	r2, #1
 8004180:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8004184:	54e2      	strb	r2, [r4, r3]
            last_sync_time = c_time;
 8004186:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800418a:	50e5      	str	r5, [r4, r3]
            last_sync_receive_time = c_time;
 800418c:	f241 03fc 	movw	r3, #4348	; 0x10fc
 8004190:	50e5      	str	r5, [r4, r3]
            return SPIN_ERR;
 8004192:	f04f 30ff 	mov.w	r0, #4294967295
 8004196:	e134      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
            syncTime(message_in);
 8004198:	f104 0618 	add.w	r6, r4, #24
 800419c:	f7fd fc42 	bl	8001a24 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 80041a0:	68a3      	ldr	r3, [r4, #8]
 80041a2:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80041a4:	7e22      	ldrb	r2, [r4, #24]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041a6:	4633      	mov	r3, r6
 80041a8:	7871      	ldrb	r1, [r6, #1]
 80041aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041ae:	78b1      	ldrb	r1, [r6, #2]
 80041b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041b4:	78f1      	ldrb	r1, [r6, #3]
 80041b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80041ba:	7932      	ldrb	r2, [r6, #4]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041bc:	7976      	ldrb	r6, [r6, #5]
 80041be:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041c2:	799e      	ldrb	r6, [r3, #6]
 80041c4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041c8:	79db      	ldrb	r3, [r3, #7]
 80041ca:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    t.data.sec += offset / 1000;
 80041ce:	4e32      	ldr	r6, [pc, #200]	; (8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x43c>)
 80041d0:	fba6 7300 	umull	r7, r3, r6, r0
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	4419      	add	r1, r3
 80041d8:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80041da:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80041de:	fb08 0313 	mls	r3, r8, r3, r0
 80041e2:	4f2e      	ldr	r7, [pc, #184]	; (800429c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x440>)
 80041e4:	fb07 2303 	mla	r3, r7, r3, r2
 80041e8:	9302      	str	r3, [sp, #8]
 80041ea:	f7fd fc1b 	bl	8001a24 <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 80041ee:	fba6 2300 	umull	r2, r3, r6, r0
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	9a01      	ldr	r2, [sp, #4]
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	3a01      	subs	r2, #1
 80041fa:	60e2      	str	r2, [r4, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80041fc:	fb08 0313 	mls	r3, r8, r3, r0
 8004200:	9a02      	ldr	r2, [sp, #8]
 8004202:	fb07 2313 	mls	r3, r7, r3, r2
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x444>)
 8004208:	441a      	add	r2, r3
 800420a:	6122      	str	r2, [r4, #16]
 800420c:	f7fd fc0a 	bl	8001a24 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8004210:	f241 03fc 	movw	r3, #4348	; 0x10fc
 8004214:	50e0      	str	r0, [r4, r3]
 8004216:	e669      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
            req_param_resp.deserialize(message_in);
 8004218:	f504 5888 	add.w	r8, r4, #4352	; 0x1100
 800421c:	f108 0808 	add.w	r8, r8, #8
 8004220:	f104 0718 	add.w	r7, r4, #24
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004224:	7e26      	ldrb	r6, [r4, #24]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004226:	787b      	ldrb	r3, [r7, #1]
 8004228:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800422c:	78bb      	ldrb	r3, [r7, #2]
 800422e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
 8004238:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800423c:	429e      	cmp	r6, r3
 800423e:	d81d      	bhi.n	800427c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x420>
      ints_length = ints_lengthT;
 8004240:	f8c8 6004 	str.w	r6, [r8, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004244:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8004246:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8004248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800424c:	4293      	cmp	r3, r2
 800424e:	d929      	bls.n	80042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x448>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004250:	5dbb      	ldrb	r3, [r7, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004252:	1c71      	adds	r1, r6, #1
 8004254:	5c79      	ldrb	r1, [r7, r1]
 8004256:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800425a:	1cb1      	adds	r1, r6, #2
 800425c:	5c79      	ldrb	r1, [r7, r1]
 800425e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004262:	1cf1      	adds	r1, r6, #3
 8004264:	5c79      	ldrb	r1, [r7, r1]
 8004266:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 800426a:	f8c8 3008 	str.w	r3, [r8, #8]
      offset += sizeof(this->st_ints);
 800426e:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8004270:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004274:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8004278:	3201      	adds	r2, #1
 800427a:	e7e5      	b.n	8004248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3ec>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800427c:	00b1      	lsls	r1, r6, #2
 800427e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004282:	f001 fa91 	bl	80057a8 <realloc>
 8004286:	f8c8 000c 	str.w	r0, [r8, #12]
 800428a:	e7d9      	b.n	8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3e4>
 800428c:	08005fec 	.word	0x08005fec
 8004290:	08006004 	.word	0x08006004
 8004294:	080061e8 	.word	0x080061e8
 8004298:	10624dd3 	.word	0x10624dd3
 800429c:	000f4240 	.word	0x000f4240
 80042a0:	3b9aca00 	.word	0x3b9aca00
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80042a4:	f817 9006 	ldrb.w	r9, [r7, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80042a8:	1c73      	adds	r3, r6, #1
 80042aa:	5cfb      	ldrb	r3, [r7, r3]
 80042ac:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80042b0:	1cb3      	adds	r3, r6, #2
 80042b2:	5cfb      	ldrb	r3, [r7, r3]
 80042b4:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80042b8:	1cf3      	adds	r3, r6, #3
 80042ba:	5cfb      	ldrb	r3, [r7, r3]
 80042bc:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->floats_length);
 80042c0:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 80042c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80042c6:	4599      	cmp	r9, r3
 80042c8:	d81c      	bhi.n	8004304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4a8>
      floats_length = floats_lengthT;
 80042ca:	f8c8 9010 	str.w	r9, [r8, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d91e      	bls.n	8004316 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ba>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80042d8:	5dbb      	ldrb	r3, [r7, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80042da:	1c71      	adds	r1, r6, #1
 80042dc:	5c79      	ldrb	r1, [r7, r1]
 80042de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80042e2:	1cb1      	adds	r1, r6, #2
 80042e4:	5c79      	ldrb	r1, [r7, r1]
 80042e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042ea:	1cf1      	adds	r1, r6, #3
 80042ec:	5c79      	ldrb	r1, [r7, r1]
 80042ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 80042f2:	f8c8 3014 	str.w	r3, [r8, #20]
      offset += sizeof(this->st_floats);
 80042f6:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80042f8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80042fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8004300:	3201      	adds	r2, #1
 8004302:	e7e5      	b.n	80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x474>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004304:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8004308:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800430c:	f001 fa4c 	bl	80057a8 <realloc>
 8004310:	f8c8 0018 	str.w	r0, [r8, #24]
 8004314:	e7d9      	b.n	80042ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x46e>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004316:	f817 9006 	ldrb.w	r9, [r7, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800431a:	1c73      	adds	r3, r6, #1
 800431c:	5cfb      	ldrb	r3, [r7, r3]
 800431e:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004322:	1cb3      	adds	r3, r6, #2
 8004324:	5cfb      	ldrb	r3, [r7, r3]
 8004326:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800432a:	1cf3      	adds	r3, r6, #3
 800432c:	5cfb      	ldrb	r3, [r7, r3]
 800432e:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->strings_length);
 8004332:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8004334:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8004338:	4599      	cmp	r9, r3
 800433a:	d804      	bhi.n	8004346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ea>
      strings_length = strings_lengthT;
 800433c:	f8c8 901c 	str.w	r9, [r8, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004340:	f04f 0e00 	mov.w	lr, #0
 8004344:	e029      	b.n	800439a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x53e>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004346:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800434a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 800434e:	f001 fa2b 	bl	80057a8 <realloc>
 8004352:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 8004356:	e7f1      	b.n	800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e0>
      var |= (arr[i] << (8 * i));
 8004358:	eb07 020c 	add.w	r2, r7, ip
 800435c:	5cd2      	ldrb	r2, [r2, r3]
 800435e:	00d8      	lsls	r0, r3, #3
 8004360:	4082      	lsls	r2, r0
 8004362:	4311      	orrs	r1, r2
    for (size_t i = 0; i < sizeof(V); i++)
 8004364:	3301      	adds	r3, #1
 8004366:	2b03      	cmp	r3, #3
 8004368:	d9f6      	bls.n	8004358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4fc>
      offset += 4;
 800436a:	3604      	adds	r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800436c:	4633      	mov	r3, r6
 800436e:	198a      	adds	r2, r1, r6
 8004370:	429a      	cmp	r2, r3
 8004372:	d904      	bls.n	800437e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x522>
          inbuffer[k-1]=inbuffer[k];
 8004374:	1e5a      	subs	r2, r3, #1
 8004376:	5cf8      	ldrb	r0, [r7, r3]
 8004378:	54b8      	strb	r0, [r7, r2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800437a:	3301      	adds	r3, #1
 800437c:	e7f7      	b.n	800436e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x512>
      inbuffer[offset+length_st_strings-1]=0;
 800437e:	1e53      	subs	r3, r2, #1
 8004380:	2100      	movs	r1, #0
 8004382:	54f9      	strb	r1, [r7, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004384:	3e01      	subs	r6, #1
 8004386:	19bb      	adds	r3, r7, r6
 8004388:	f8c8 3020 	str.w	r3, [r8, #32]
      offset += length_st_strings;
 800438c:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800438e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004392:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8004396:	f10e 0e01 	add.w	lr, lr, #1
 800439a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800439e:	4573      	cmp	r3, lr
 80043a0:	d903      	bls.n	80043aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x54e>
      arrToVar(length_st_strings, (inbuffer + offset));
 80043a2:	46b4      	mov	ip, r6
    var = 0;
 80043a4:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80043a6:	460b      	mov	r3, r1
 80043a8:	e7dd      	b.n	8004366 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x50a>
            param_recieved = true;
 80043aa:	2201      	movs	r2, #1
 80043ac:	f241 1304 	movw	r3, #4356	; 0x1104
 80043b0:	54e2      	strb	r2, [r4, r3]
 80043b2:	e59b      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
            configured_ = false;
 80043b4:	2200      	movs	r2, #0
 80043b6:	f241 03f4 	movw	r3, #4340	; 0x10f4
 80043ba:	54e2      	strb	r2, [r4, r3]
 80043bc:	e596      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80043be:	f241 03f4 	movw	r3, #4340	; 0x10f4
 80043c2:	5ce3      	ldrb	r3, [r4, r3]
 80043c4:	b1e3      	cbz	r3, 8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a4>
 80043c6:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80043ca:	58e3      	ldr	r3, [r4, r3]
 80043cc:	1aeb      	subs	r3, r5, r3
 80043ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d801      	bhi.n	80043da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x57e>
    return SPIN_OK;
 80043d6:	2000      	movs	r0, #0
 80043d8:	e013      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
      data()
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5ac>)
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2600      	movs	r6, #0
 80043e0:	9601      	str	r6, [sp, #4]
 80043e2:	9602      	str	r6, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	466a      	mov	r2, sp
 80043ea:	210a      	movs	r1, #10
 80043ec:	4620      	mov	r0, r4
 80043ee:	4798      	blx	r3
 80043f0:	f7fd fb18 	bl	8001a24 <HAL_GetTick>
    rt_time = hardware_.time();
 80043f4:	60a0      	str	r0, [r4, #8]
      last_sync_time = c_time;
 80043f6:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80043fa:	50e5      	str	r5, [r4, r3]
    return SPIN_OK;
 80043fc:	4630      	mov	r0, r6
 80043fe:	e000      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
 8004400:	2000      	movs	r0, #0
  }
 8004402:	b007      	add	sp, #28
 8004404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004408:	08005fec 	.word	0x08005fec

0800440c <HAL_UART_TxCpltCallback>:
extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 800440c:	6802      	ldr	r2, [r0, #0]
		return &huart;
 800440e:	f241 0308 	movw	r3, #4104	; 0x1008
 8004412:	4905      	ldr	r1, [pc, #20]	; (8004428 <HAL_UART_TxCpltCallback+0x1c>)
 8004414:	58cb      	ldr	r3, [r1, r3]
	if (huart->Instance == serial.get_handle()->Instance)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d000      	beq.n	800441e <HAL_UART_TxCpltCallback+0x12>
 800441c:	4770      	bx	lr
		tx_cplt = true;
 800441e:	2201      	movs	r2, #1
 8004420:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004424:	701a      	strb	r2, [r3, #0]
	{
		serial.tx_cplt_callback();
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8004426:	e7f9      	b.n	800441c <HAL_UART_TxCpltCallback+0x10>
 8004428:	20000530 	.word	0x20000530

0800442c <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800442c:	b508      	push	{r3, lr}
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <HAL_UART_RxCpltCallback+0x20>)
 8004430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004434:	1899      	adds	r1, r3, r2
 8004436:	f241 0008 	movw	r0, #4104	; 0x1008
 800443a:	5818      	ldr	r0, [r3, r0]
 800443c:	f7fe fad2 	bl	80029e4 <HAL_UART_Receive_DMA>
	serial.reset_rbuf();
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004444:	4802      	ldr	r0, [pc, #8]	; (8004450 <HAL_UART_RxCpltCallback+0x24>)
 8004446:	f7fd fdcd 	bl	8001fe4 <HAL_GPIO_TogglePin>
 800444a:	bd08      	pop	{r3, pc}
 800444c:	20000530 	.word	0x20000530
 8004450:	40011000 	.word	0x40011000

08004454 <_Z18SystemClock_Configv>:
{
 8004454:	b530      	push	{r4, r5, lr}
 8004456:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004458:	2228      	movs	r2, #40	; 0x28
 800445a:	2100      	movs	r1, #0
 800445c:	a806      	add	r0, sp, #24
 800445e:	f001 f98e 	bl	800577e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004462:	2400      	movs	r4, #0
 8004464:	9401      	str	r4, [sp, #4]
 8004466:	9402      	str	r4, [sp, #8]
 8004468:	9403      	str	r4, [sp, #12]
 800446a:	9404      	str	r4, [sp, #16]
 800446c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800446e:	2201      	movs	r2, #1
 8004470:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004476:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004478:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800447a:	2502      	movs	r5, #2
 800447c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800447e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004480:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004484:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004486:	a806      	add	r0, sp, #24
 8004488:	f7fd fdca 	bl	8002020 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800448c:	230f      	movs	r3, #15
 800448e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004490:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004492:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004498:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800449a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800449c:	4629      	mov	r1, r5
 800449e:	a801      	add	r0, sp, #4
 80044a0:	f7fd fffc 	bl	800249c <HAL_RCC_ClockConfig>
}
 80044a4:	b011      	add	sp, #68	; 0x44
 80044a6:	bd30      	pop	{r4, r5, pc}

080044a8 <main>:
{
 80044a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044ac:	b087      	sub	sp, #28
  HAL_Init();
 80044ae:	f7fd fa9b 	bl	80019e8 <HAL_Init>
  SystemClock_Config();
 80044b2:	f7ff ffcf 	bl	8004454 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80044b6:	f7fe ff3f 	bl	8003338 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80044ba:	f7fe ff83 	bl	80033c4 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80044be:	f7fe ffa3 	bl	8003408 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80044c2:	f7fe ffc1 	bl	8003448 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80044c6:	f7fe ffd9 	bl	800347c <_ZL19MX_USART3_UART_Initv>
  USART2->CR1 |= USART_CR1_RXNEIE;
 80044ca:	4ab7      	ldr	r2, [pc, #732]	; (80047a8 <main+0x300>)
 80044cc:	68d3      	ldr	r3, [r2, #12]
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	60d3      	str	r3, [r2, #12]
  USART3->CR1 |= USART_CR1_RXNEIE;
 80044d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044d8:	68d3      	ldr	r3, [r2, #12]
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	60d3      	str	r3, [r2, #12]
		com->start_dma();
 80044e0:	4db2      	ldr	r5, [pc, #712]	; (80047ac <main+0x304>)
 80044e2:	f855 3ca8 	ldr.w	r3, [r5, #-168]
		tx_cplt = true;
 80044e6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80044ea:	2101      	movs	r1, #1
 80044ec:	7011      	strb	r1, [r2, #0]
		rx_tail = 0;
 80044ee:	2400      	movs	r4, #0
 80044f0:	f241 0202 	movw	r2, #4098	; 0x1002
 80044f4:	529c      	strh	r4, [r3, r2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80044f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044fa:	1899      	adds	r1, r3, r2
 80044fc:	f241 0008 	movw	r0, #4104	; 0x1008
 8004500:	5818      	ldr	r0, [r3, r0]
 8004502:	f7fe fa6f 	bl	80029e4 <HAL_UART_Receive_DMA>
    mode_ = 0;
 8004506:	f241 0334 	movw	r3, #4148	; 0x1034
 800450a:	50ec      	str	r4, [r5, r3]
    bytes_ = 0;
 800450c:	f241 0338 	movw	r3, #4152	; 0x1038
 8004510:	50ec      	str	r4, [r5, r3]
    index_ = 0;
 8004512:	f505 5382 	add.w	r3, r5, #4160	; 0x1040
 8004516:	601c      	str	r4, [r3, #0]
    topic_ = 0;
 8004518:	f241 033c 	movw	r3, #4156	; 0x103c
 800451c:	50ec      	str	r4, [r5, r3]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800451e:	2c18      	cmp	r4, #24
 8004520:	dc12      	bgt.n	8004548 <main+0xa0>
      if (subscribers[i] == 0) // empty slot
 8004522:	f204 421e 	addw	r2, r4, #1054	; 0x41e
 8004526:	4ba1      	ldr	r3, [pc, #644]	; (80047ac <main+0x304>)
 8004528:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800452c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8004530:	b973      	cbnz	r3, 8004550 <main+0xa8>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004532:	4b9e      	ldr	r3, [pc, #632]	; (80047ac <main+0x304>)
 8004534:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004538:	4a9d      	ldr	r2, [pc, #628]	; (80047b0 <main+0x308>)
 800453a:	f1a2 0170 	sub.w	r1, r2, #112	; 0x70
 800453e:	f843 1ca8 	str.w	r1, [r3, #-168]
        s.id_ = i + 100;
 8004542:	3464      	adds	r4, #100	; 0x64
 8004544:	f842 4c6c 	str.w	r4, [r2, #-108]
  int read_last = HAL_GetTick();
 8004548:	f7fd fa6c 	bl	8001a24 <HAL_GetTick>
 800454c:	4605      	mov	r5, r0
 800454e:	e356      	b.n	8004bfe <main+0x756>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004550:	3401      	adds	r4, #1
 8004552:	e7e4      	b.n	800451e <main+0x76>
          if(HAL_GetTick() - read_last > read_freq)
 8004554:	f7fd fa66 	bl	8001a24 <HAL_GetTick>
 8004558:	1b40      	subs	r0, r0, r5
 800455a:	2814      	cmp	r0, #20
 800455c:	f240 835c 	bls.w	8004c18 <main+0x770>
            read_last = HAL_GetTick();
 8004560:	f7fd fa60 	bl	8001a24 <HAL_GetTick>
 8004564:	4605      	mov	r5, r0
 8004566:	e357      	b.n	8004c18 <main+0x770>
		return HAL_GetTick();
 8004568:	f7fd fa5c 	bl	8001a24 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800456c:	1b00      	subs	r0, r0, r4
 800456e:	4b8f      	ldr	r3, [pc, #572]	; (80047ac <main+0x304>)
 8004570:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8004574:	4298      	cmp	r0, r3
 8004576:	d926      	bls.n	80045c6 <main+0x11e>
 8004578:	e304      	b.n	8004b84 <main+0x6dc>
			return -1;
 800457a:	f04f 30ff 	mov.w	r0, #4294967295
 800457e:	e03c      	b.n	80045fa <main+0x152>
        message_in[index_++] = data;
 8004580:	4a8a      	ldr	r2, [pc, #552]	; (80047ac <main+0x304>)
 8004582:	f502 5182 	add.w	r1, r2, #4160	; 0x1040
 8004586:	680b      	ldr	r3, [r1, #0]
 8004588:	1c5e      	adds	r6, r3, #1
 800458a:	600e      	str	r6, [r1, #0]
 800458c:	4413      	add	r3, r2
 800458e:	f803 0c94 	strb.w	r0, [r3, #-148]
        bytes_--;
 8004592:	f241 0138 	movw	r1, #4152	; 0x1038
 8004596:	5853      	ldr	r3, [r2, r1]
 8004598:	3b01      	subs	r3, #1
 800459a:	5053      	str	r3, [r2, r1]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800459c:	b973      	cbnz	r3, 80045bc <main+0x114>
          mode_ = MODE_MSG_CHECKSUM;
 800459e:	2108      	movs	r1, #8
 80045a0:	f241 0334 	movw	r3, #4148	; 0x1034
 80045a4:	50d1      	str	r1, [r2, r3]
 80045a6:	e009      	b.n	80045bc <main+0x114>
          mode_++;
 80045a8:	4a80      	ldr	r2, [pc, #512]	; (80047ac <main+0x304>)
 80045aa:	3301      	adds	r3, #1
 80045ac:	f241 0134 	movw	r1, #4148	; 0x1034
 80045b0:	5053      	str	r3, [r2, r1]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80045b2:	f104 0314 	add.w	r3, r4, #20
 80045b6:	f241 0154 	movw	r1, #4180	; 0x1054
 80045ba:	5053      	str	r3, [r2, r1]
      if (spin_timeout_ > 0)
 80045bc:	4b7b      	ldr	r3, [pc, #492]	; (80047ac <main+0x304>)
 80045be:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1d0      	bne.n	8004568 <main+0xc0>
		return com->read();
 80045c6:	4b79      	ldr	r3, [pc, #484]	; (80047ac <main+0x304>)
 80045c8:	f853 1ca8 	ldr.w	r1, [r3, #-168]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 80045cc:	f241 0308 	movw	r3, #4104	; 0x1008
 80045d0:	58cb      	ldr	r3, [r1, r3]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 80045d8:	425b      	negs	r3, r3
 80045da:	f3c3 030a 	ubfx	r3, r3, #0, #11
		if (rx_tail == rx_head)
 80045de:	f241 0202 	movw	r2, #4098	; 0x1002
 80045e2:	5a8a      	ldrh	r2, [r1, r2]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d0c8      	beq.n	800457a <main+0xd2>
		int c = (int) rx_buf[rx_tail++];
 80045e8:	1c53      	adds	r3, r2, #1
 80045ea:	440a      	add	r2, r1
 80045ec:	f892 0800 	ldrb.w	r0, [r2, #2048]	; 0x800
		rx_tail &= buf_mask;
 80045f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f4:	f241 0202 	movw	r2, #4098	; 0x1002
 80045f8:	528b      	strh	r3, [r1, r2]
      if (data < 0)
 80045fa:	2800      	cmp	r0, #0
 80045fc:	f2c0 82b5 	blt.w	8004b6a <main+0x6c2>
      checksum_ += data;
 8004600:	4b6a      	ldr	r3, [pc, #424]	; (80047ac <main+0x304>)
 8004602:	f241 0144 	movw	r1, #4164	; 0x1044
 8004606:	585a      	ldr	r2, [r3, r1]
 8004608:	4402      	add	r2, r0
 800460a:	505a      	str	r2, [r3, r1]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800460c:	f241 0134 	movw	r1, #4148	; 0x1034
 8004610:	585b      	ldr	r3, [r3, r1]
 8004612:	2b07      	cmp	r3, #7
 8004614:	d0b4      	beq.n	8004580 <main+0xd8>
      else if (mode_ == MODE_FIRST_FF)
 8004616:	b973      	cbnz	r3, 8004636 <main+0x18e>
        if (data == 0xff)
 8004618:	28ff      	cmp	r0, #255	; 0xff
 800461a:	d0c5      	beq.n	80045a8 <main+0x100>
		return HAL_GetTick();
 800461c:	f7fd fa02 	bl	8001a24 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004620:	1b00      	subs	r0, r0, r4
 8004622:	f241 3388 	movw	r3, #5000	; 0x1388
 8004626:	4298      	cmp	r0, r3
 8004628:	d9c8      	bls.n	80045bc <main+0x114>
          configured_ = false;
 800462a:	2100      	movs	r1, #0
 800462c:	f241 0348 	movw	r3, #4168	; 0x1048
 8004630:	4a5e      	ldr	r2, [pc, #376]	; (80047ac <main+0x304>)
 8004632:	54d1      	strb	r1, [r2, r3]
 8004634:	e2a6      	b.n	8004b84 <main+0x6dc>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004636:	2b01      	cmp	r3, #1
 8004638:	d03f      	beq.n	80046ba <main+0x212>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800463a:	2b02      	cmp	r3, #2
 800463c:	d061      	beq.n	8004702 <main+0x25a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800463e:	2b03      	cmp	r3, #3
 8004640:	d06f      	beq.n	8004722 <main+0x27a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004642:	2b04      	cmp	r3, #4
 8004644:	d079      	beq.n	800473a <main+0x292>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004646:	2b05      	cmp	r3, #5
 8004648:	f000 808a 	beq.w	8004760 <main+0x2b8>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800464c:	2b06      	cmp	r3, #6
 800464e:	f000 8093 	beq.w	8004778 <main+0x2d0>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004652:	2b08      	cmp	r3, #8
 8004654:	d1b2      	bne.n	80045bc <main+0x114>
        mode_ = MODE_FIRST_FF;
 8004656:	2000      	movs	r0, #0
 8004658:	f241 0334 	movw	r3, #4148	; 0x1034
 800465c:	4953      	ldr	r1, [pc, #332]	; (80047ac <main+0x304>)
 800465e:	50c8      	str	r0, [r1, r3]
        if ((checksum_ % 256) == 255)
 8004660:	1a83      	subs	r3, r0, r2
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	b2db      	uxtb	r3, r3
 8004666:	bf58      	it	pl
 8004668:	425a      	negpl	r2, r3
 800466a:	2aff      	cmp	r2, #255	; 0xff
 800466c:	d1a6      	bne.n	80045bc <main+0x114>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800466e:	f241 033c 	movw	r3, #4156	; 0x103c
 8004672:	58ce      	ldr	r6, [r1, r3]
 8004674:	2e00      	cmp	r6, #0
 8004676:	f000 809f 	beq.w	80047b8 <main+0x310>
          else if (topic_ == TopicInfo::ID_TIME)
 800467a:	2e0a      	cmp	r6, #10
 800467c:	f000 8126 	beq.w	80048cc <main+0x424>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004680:	2e06      	cmp	r6, #6
 8004682:	f000 816d 	beq.w	8004960 <main+0x4b8>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004686:	2e0b      	cmp	r6, #11
 8004688:	f000 8269 	beq.w	8004b5e <main+0x6b6>
            if (subscribers[topic_ - 100])
 800468c:	f1a6 0264 	sub.w	r2, r6, #100	; 0x64
 8004690:	f206 36ba 	addw	r6, r6, #954	; 0x3ba
 8004694:	4b45      	ldr	r3, [pc, #276]	; (80047ac <main+0x304>)
 8004696:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800469a:	f853 0ca8 	ldr.w	r0, [r3, #-168]
 800469e:	2800      	cmp	r0, #0
 80046a0:	d08c      	beq.n	80045bc <main+0x114>
              subscribers[topic_ - 100]->callback(message_in);
 80046a2:	4942      	ldr	r1, [pc, #264]	; (80047ac <main+0x304>)
 80046a4:	f202 431e 	addw	r3, r2, #1054	; 0x41e
 80046a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80046ac:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3994      	subs	r1, #148	; 0x94
 80046b6:	4798      	blx	r3
 80046b8:	e780      	b.n	80045bc <main+0x114>
        if (data == PROTOCOL_VER)
 80046ba:	28fe      	cmp	r0, #254	; 0xfe
 80046bc:	d01b      	beq.n	80046f6 <main+0x24e>
          mode_ = MODE_FIRST_FF;
 80046be:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <main+0x304>)
 80046c0:	2100      	movs	r1, #0
 80046c2:	f241 0234 	movw	r2, #4148	; 0x1034
 80046c6:	5099      	str	r1, [r3, r2]
          if (configured_ == false)
 80046c8:	f241 0248 	movw	r2, #4168	; 0x1048
 80046cc:	5c9b      	ldrb	r3, [r3, r2]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f47f af74 	bne.w	80045bc <main+0x114>
 80046d4:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <main+0x30c>)
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	9101      	str	r1, [sp, #4]
 80046da:	9102      	str	r1, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 80046dc:	4e33      	ldr	r6, [pc, #204]	; (80047ac <main+0x304>)
 80046de:	4630      	mov	r0, r6
 80046e0:	f850 3dac 	ldr.w	r3, [r0, #-172]!
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	466a      	mov	r2, sp
 80046e8:	210a      	movs	r1, #10
 80046ea:	4798      	blx	r3
 80046ec:	f7fd f99a 	bl	8001a24 <HAL_GetTick>
    rt_time = hardware_.time();
 80046f0:	f846 0ca4 	str.w	r0, [r6, #-164]
 80046f4:	e762      	b.n	80045bc <main+0x114>
          mode_++;
 80046f6:	3301      	adds	r3, #1
 80046f8:	f241 0234 	movw	r2, #4148	; 0x1034
 80046fc:	492b      	ldr	r1, [pc, #172]	; (80047ac <main+0x304>)
 80046fe:	508b      	str	r3, [r1, r2]
 8004700:	e75c      	b.n	80045bc <main+0x114>
        bytes_ = data;
 8004702:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <main+0x304>)
 8004704:	f241 0138 	movw	r1, #4152	; 0x1038
 8004708:	5050      	str	r0, [r2, r1]
        index_ = 0;
 800470a:	f502 5182 	add.w	r1, r2, #4160	; 0x1040
 800470e:	2600      	movs	r6, #0
 8004710:	600e      	str	r6, [r1, #0]
        mode_++;
 8004712:	3301      	adds	r3, #1
 8004714:	f241 0134 	movw	r1, #4148	; 0x1034
 8004718:	5053      	str	r3, [r2, r1]
        checksum_ = data;               /* first byte for calculating size checksum */
 800471a:	f241 0344 	movw	r3, #4164	; 0x1044
 800471e:	50d0      	str	r0, [r2, r3]
 8004720:	e74c      	b.n	80045bc <main+0x114>
        bytes_ += data << 8;
 8004722:	4a22      	ldr	r2, [pc, #136]	; (80047ac <main+0x304>)
 8004724:	f241 0638 	movw	r6, #4152	; 0x1038
 8004728:	5991      	ldr	r1, [r2, r6]
 800472a:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 800472e:	5190      	str	r0, [r2, r6]
        mode_++;
 8004730:	3301      	adds	r3, #1
 8004732:	f241 0134 	movw	r1, #4148	; 0x1034
 8004736:	5053      	str	r3, [r2, r1]
 8004738:	e740      	b.n	80045bc <main+0x114>
        if ((checksum_ % 256) == 255)
 800473a:	4251      	negs	r1, r2
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	b2c9      	uxtb	r1, r1
 8004740:	bf58      	it	pl
 8004742:	424a      	negpl	r2, r1
 8004744:	2aff      	cmp	r2, #255	; 0xff
 8004746:	d005      	beq.n	8004754 <main+0x2ac>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004748:	2100      	movs	r1, #0
 800474a:	f241 0334 	movw	r3, #4148	; 0x1034
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <main+0x304>)
 8004750:	50d1      	str	r1, [r2, r3]
 8004752:	e733      	b.n	80045bc <main+0x114>
          mode_++;
 8004754:	3301      	adds	r3, #1
 8004756:	f241 0234 	movw	r2, #4148	; 0x1034
 800475a:	4914      	ldr	r1, [pc, #80]	; (80047ac <main+0x304>)
 800475c:	508b      	str	r3, [r1, r2]
 800475e:	e72d      	b.n	80045bc <main+0x114>
        topic_ = data;
 8004760:	4a12      	ldr	r2, [pc, #72]	; (80047ac <main+0x304>)
 8004762:	f241 013c 	movw	r1, #4156	; 0x103c
 8004766:	5050      	str	r0, [r2, r1]
        mode_++;
 8004768:	3301      	adds	r3, #1
 800476a:	f241 0134 	movw	r1, #4148	; 0x1034
 800476e:	5053      	str	r3, [r2, r1]
        checksum_ = data;               /* first byte included in checksum */
 8004770:	f241 0344 	movw	r3, #4164	; 0x1044
 8004774:	50d0      	str	r0, [r2, r3]
 8004776:	e721      	b.n	80045bc <main+0x114>
        topic_ += data << 8;
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <main+0x304>)
 800477a:	f241 013c 	movw	r1, #4156	; 0x103c
 800477e:	585a      	ldr	r2, [r3, r1]
 8004780:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8004784:	5058      	str	r0, [r3, r1]
        mode_ = MODE_MESSAGE;
 8004786:	2107      	movs	r1, #7
 8004788:	f241 0234 	movw	r2, #4148	; 0x1034
 800478c:	5099      	str	r1, [r3, r2]
        if (bytes_ == 0)
 800478e:	f241 0238 	movw	r2, #4152	; 0x1038
 8004792:	589b      	ldr	r3, [r3, r2]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f af11 	bne.w	80045bc <main+0x114>
          mode_ = MODE_MSG_CHECKSUM;
 800479a:	2108      	movs	r1, #8
 800479c:	f241 0334 	movw	r3, #4148	; 0x1034
 80047a0:	4a02      	ldr	r2, [pc, #8]	; (80047ac <main+0x304>)
 80047a2:	50d1      	str	r1, [r2, r3]
 80047a4:	e70a      	b.n	80045bc <main+0x114>
 80047a6:	bf00      	nop
 80047a8:	40004400 	.word	0x40004400
 80047ac:	20001628 	.word	0x20001628
 80047b0:	20002720 	.word	0x20002720
 80047b4:	08005fec 	.word	0x08005fec
 80047b8:	4bc1      	ldr	r3, [pc, #772]	; (8004ac0 <main+0x618>)
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4680      	mov	r8, r0
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	9002      	str	r0, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 80047c2:	460f      	mov	r7, r1
 80047c4:	4608      	mov	r0, r1
 80047c6:	f850 3dac 	ldr.w	r3, [r0, #-172]!
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	466a      	mov	r2, sp
 80047ce:	210a      	movs	r1, #10
 80047d0:	4798      	blx	r3
 80047d2:	f7fd f927 	bl	8001a24 <HAL_GetTick>
    rt_time = hardware_.time();
 80047d6:	f847 0ca4 	str.w	r0, [r7, #-164]
 80047da:	4bba      	ldr	r3, [pc, #744]	; (8004ac4 <main+0x61c>)
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	f8ad 8004 	strh.w	r8, [sp, #4]
 80047e2:	4bb9      	ldr	r3, [pc, #740]	; (8004ac8 <main+0x620>)
 80047e4:	9302      	str	r3, [sp, #8]
 80047e6:	9303      	str	r3, [sp, #12]
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	f8cd 8014 	str.w	r8, [sp, #20]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047ee:	4637      	mov	r7, r6
 80047f0:	e000      	b.n	80047f4 <main+0x34c>
 80047f2:	3701      	adds	r7, #1
 80047f4:	2f18      	cmp	r7, #24
 80047f6:	dc2d      	bgt.n	8004854 <main+0x3ac>
      if (publishers[i] != 0) // non-empty slot
 80047f8:	f207 4206 	addw	r2, r7, #1030	; 0x406
 80047fc:	4bb3      	ldr	r3, [pc, #716]	; (8004acc <main+0x624>)
 80047fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004802:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f3      	beq.n	80047f2 <main+0x34a>
        ti.topic_id = publishers[i]->id_;
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004814:	6858      	ldr	r0, [r3, #4]
 8004816:	6803      	ldr	r3, [r0, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4798      	blx	r3
 800481c:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800481e:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8004acc <main+0x624>
 8004822:	f207 4906 	addw	r9, r7, #1030	; 0x406
 8004826:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 800482a:	f859 3cac 	ldr.w	r3, [r9, #-172]
 800482e:	6858      	ldr	r0, [r3, #4]
 8004830:	6803      	ldr	r3, [r0, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4798      	blx	r3
 8004836:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 8004838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800483c:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 800483e:	4640      	mov	r0, r8
 8004840:	f850 3dac 	ldr.w	r3, [r0, #-172]!
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f859 1cac 	ldr.w	r1, [r9, #-172]
 800484a:	466a      	mov	r2, sp
 800484c:	6909      	ldr	r1, [r1, #16]
 800484e:	4798      	blx	r3
 8004850:	e7cf      	b.n	80047f2 <main+0x34a>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004852:	3601      	adds	r6, #1
 8004854:	2e18      	cmp	r6, #24
 8004856:	dc2d      	bgt.n	80048b4 <main+0x40c>
      if (subscribers[i] != 0) // non-empty slot
 8004858:	f206 421e 	addw	r2, r6, #1054	; 0x41e
 800485c:	4b9b      	ldr	r3, [pc, #620]	; (8004acc <main+0x624>)
 800485e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004862:	f853 0ca8 	ldr.w	r0, [r3, #-168]
 8004866:	2800      	cmp	r0, #0
 8004868:	d0f3      	beq.n	8004852 <main+0x3aa>
        ti.topic_id = subscribers[i]->id_;
 800486a:	6843      	ldr	r3, [r0, #4]
 800486c:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004870:	6883      	ldr	r3, [r0, #8]
 8004872:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004874:	6803      	ldr	r3, [r0, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4798      	blx	r3
 800487a:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800487c:	4f93      	ldr	r7, [pc, #588]	; (8004acc <main+0x624>)
 800487e:	f206 481e 	addw	r8, r6, #1054	; 0x41e
 8004882:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 8004886:	f858 0ca8 	ldr.w	r0, [r8, #-168]
 800488a:	6803      	ldr	r3, [r0, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4798      	blx	r3
 8004890:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 8004892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004896:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004898:	f857 3dac 	ldr.w	r3, [r7, #-172]!
 800489c:	f8d3 9000 	ldr.w	r9, [r3]
 80048a0:	f858 0ca8 	ldr.w	r0, [r8, #-168]
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4798      	blx	r3
 80048aa:	466a      	mov	r2, sp
 80048ac:	4601      	mov	r1, r0
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c8      	blx	r9
 80048b2:	e7ce      	b.n	8004852 <main+0x3aa>
    configured_ = true;
 80048b4:	4b85      	ldr	r3, [pc, #532]	; (8004acc <main+0x624>)
 80048b6:	2101      	movs	r1, #1
 80048b8:	f241 0248 	movw	r2, #4168	; 0x1048
 80048bc:	5499      	strb	r1, [r3, r2]
            last_sync_time = c_time;
 80048be:	f241 024c 	movw	r2, #4172	; 0x104c
 80048c2:	509c      	str	r4, [r3, r2]
            last_sync_receive_time = c_time;
 80048c4:	f241 0250 	movw	r2, #4176	; 0x1050
 80048c8:	509c      	str	r4, [r3, r2]
 80048ca:	e15b      	b.n	8004b84 <main+0x6dc>
 80048cc:	f7fd f8aa 	bl	8001a24 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 80048d0:	4e7e      	ldr	r6, [pc, #504]	; (8004acc <main+0x624>)
 80048d2:	f856 3ca4 	ldr.w	r3, [r6, #-164]
 80048d6:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80048d8:	f816 3c94 	ldrb.w	r3, [r6, #-148]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048dc:	f816 2c93 	ldrb.w	r2, [r6, #-147]
 80048e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048e4:	f816 2c92 	ldrb.w	r2, [r6, #-146]
 80048e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80048ec:	f816 1c91 	ldrb.w	r1, [r6, #-145]
 80048f0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80048f4:	f816 3c90 	ldrb.w	r3, [r6, #-144]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048f8:	f816 2c8f 	ldrb.w	r2, [r6, #-143]
 80048fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004900:	f816 2c8e 	ldrb.w	r2, [r6, #-142]
 8004904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004908:	f816 2c8d 	ldrb.w	r2, [r6, #-141]
 800490c:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
    t.data.sec += offset / 1000;
 8004910:	4f6f      	ldr	r7, [pc, #444]	; (8004ad0 <main+0x628>)
 8004912:	fba7 e300 	umull	lr, r3, r7, r0
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4419      	add	r1, r3
 800491a:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800491c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8004920:	fb09 0313 	mls	r3, r9, r3, r0
 8004924:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004adc <main+0x634>
 8004928:	fb08 2303 	mla	r3, r8, r3, r2
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	f7fd f879 	bl	8001a24 <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004932:	fba7 2300 	umull	r2, r3, r7, r0
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	9a01      	ldr	r2, [sp, #4]
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	3a01      	subs	r2, #1
 800493e:	f846 2ca0 	str.w	r2, [r6, #-160]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004942:	fb09 0313 	mls	r3, r9, r3, r0
 8004946:	9a02      	ldr	r2, [sp, #8]
 8004948:	fb08 2313 	mls	r3, r8, r3, r2
 800494c:	4a61      	ldr	r2, [pc, #388]	; (8004ad4 <main+0x62c>)
 800494e:	441a      	add	r2, r3
 8004950:	f846 2c9c 	str.w	r2, [r6, #-156]
 8004954:	f7fd f866 	bl	8001a24 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8004958:	f241 0350 	movw	r3, #4176	; 0x1050
 800495c:	50f0      	str	r0, [r6, r3]
 800495e:	e62d      	b.n	80045bc <main+0x114>
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004960:	4b5a      	ldr	r3, [pc, #360]	; (8004acc <main+0x624>)
 8004962:	f813 6c94 	ldrb.w	r6, [r3, #-148]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004966:	f813 2c93 	ldrb.w	r2, [r3, #-147]
 800496a:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800496e:	f813 2c92 	ldrb.w	r2, [r3, #-146]
 8004972:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004976:	f813 2c91 	ldrb.w	r2, [r3, #-145]
 800497a:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
      if(ints_lengthT > ints_length)
 800497e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429e      	cmp	r6, r3
 8004986:	d822      	bhi.n	80049ce <main+0x526>
      ints_length = ints_lengthT;
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <main+0x630>)
 800498a:	601e      	str	r6, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800498c:	2100      	movs	r1, #0
      offset += sizeof(this->ints_length);
 800498e:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8004990:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <main+0x630>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	428b      	cmp	r3, r1
 8004996:	d926      	bls.n	80049e6 <main+0x53e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004998:	484c      	ldr	r0, [pc, #304]	; (8004acc <main+0x624>)
 800499a:	f1a0 0294 	sub.w	r2, r0, #148	; 0x94
 800499e:	5d93      	ldrb	r3, [r2, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80049a0:	1c77      	adds	r7, r6, #1
 80049a2:	5dd7      	ldrb	r7, [r2, r7]
 80049a4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80049a8:	1cb7      	adds	r7, r6, #2
 80049aa:	5dd7      	ldrb	r7, [r2, r7]
 80049ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80049b0:	1cf7      	adds	r7, r6, #3
 80049b2:	5dd2      	ldrb	r2, [r2, r7]
 80049b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_ints = u_st_ints.real;
 80049b8:	f241 0264 	movw	r2, #4196	; 0x1064
 80049bc:	5083      	str	r3, [r0, r2]
      offset += sizeof(this->st_ints);
 80049be:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80049c0:	f241 0268 	movw	r2, #4200	; 0x1068
 80049c4:	5882      	ldr	r2, [r0, r2]
 80049c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 80049ca:	3101      	adds	r1, #1
 80049cc:	e7e0      	b.n	8004990 <main+0x4e8>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80049ce:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8004acc <main+0x624>
 80049d2:	f241 0768 	movw	r7, #4200	; 0x1068
 80049d6:	00b1      	lsls	r1, r6, #2
 80049d8:	f858 0007 	ldr.w	r0, [r8, r7]
 80049dc:	f000 fee4 	bl	80057a8 <realloc>
 80049e0:	f848 0007 	str.w	r0, [r8, r7]
 80049e4:	e7d0      	b.n	8004988 <main+0x4e0>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80049e6:	4a39      	ldr	r2, [pc, #228]	; (8004acc <main+0x624>)
 80049e8:	f1a2 0394 	sub.w	r3, r2, #148	; 0x94
 80049ec:	5d9f      	ldrb	r7, [r3, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80049ee:	1c71      	adds	r1, r6, #1
 80049f0:	5c59      	ldrb	r1, [r3, r1]
 80049f2:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80049f6:	1cb1      	adds	r1, r6, #2
 80049f8:	5c59      	ldrb	r1, [r3, r1]
 80049fa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80049fe:	1cf1      	adds	r1, r6, #3
 8004a00:	5c5b      	ldrb	r3, [r3, r1]
 8004a02:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8004a06:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 8004a08:	f241 036c 	movw	r3, #4204	; 0x106c
 8004a0c:	58d3      	ldr	r3, [r2, r3]
 8004a0e:	429f      	cmp	r7, r3
 8004a10:	d824      	bhi.n	8004a5c <main+0x5b4>
      floats_length = floats_lengthT;
 8004a12:	f241 036c 	movw	r3, #4204	; 0x106c
 8004a16:	4a2d      	ldr	r2, [pc, #180]	; (8004acc <main+0x624>)
 8004a18:	50d7      	str	r7, [r2, r3]
      for( uint32_t i = 0; i < floats_length; i++){
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f241 036c 	movw	r3, #4204	; 0x106c
 8004a20:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <main+0x624>)
 8004a22:	58d3      	ldr	r3, [r2, r3]
 8004a24:	428b      	cmp	r3, r1
 8004a26:	d924      	bls.n	8004a72 <main+0x5ca>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a28:	4610      	mov	r0, r2
 8004a2a:	3a94      	subs	r2, #148	; 0x94
 8004a2c:	5d93      	ldrb	r3, [r2, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a2e:	1c77      	adds	r7, r6, #1
 8004a30:	5dd7      	ldrb	r7, [r2, r7]
 8004a32:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004a36:	1cb7      	adds	r7, r6, #2
 8004a38:	5dd7      	ldrb	r7, [r2, r7]
 8004a3a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004a3e:	1cf7      	adds	r7, r6, #3
 8004a40:	5dd2      	ldrb	r2, [r2, r7]
 8004a42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
 8004a46:	f241 0270 	movw	r2, #4208	; 0x1070
 8004a4a:	5083      	str	r3, [r0, r2]
      offset += sizeof(this->st_floats);
 8004a4c:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8004a4e:	f241 0274 	movw	r2, #4212	; 0x1074
 8004a52:	5882      	ldr	r2, [r0, r2]
 8004a54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8004a58:	3101      	adds	r1, #1
 8004a5a:	e7df      	b.n	8004a1c <main+0x574>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004a5c:	4691      	mov	r9, r2
 8004a5e:	f241 0874 	movw	r8, #4212	; 0x1074
 8004a62:	00b9      	lsls	r1, r7, #2
 8004a64:	f852 0008 	ldr.w	r0, [r2, r8]
 8004a68:	f000 fe9e 	bl	80057a8 <realloc>
 8004a6c:	f849 0008 	str.w	r0, [r9, r8]
 8004a70:	e7cf      	b.n	8004a12 <main+0x56a>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <main+0x624>)
 8004a74:	f1a2 0394 	sub.w	r3, r2, #148	; 0x94
 8004a78:	5d9f      	ldrb	r7, [r3, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004a7a:	1c71      	adds	r1, r6, #1
 8004a7c:	5c59      	ldrb	r1, [r3, r1]
 8004a7e:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004a82:	1cb1      	adds	r1, r6, #2
 8004a84:	5c59      	ldrb	r1, [r3, r1]
 8004a86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004a8a:	1cf1      	adds	r1, r6, #3
 8004a8c:	5c5b      	ldrb	r3, [r3, r1]
 8004a8e:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
 8004a92:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8004a94:	f241 0378 	movw	r3, #4216	; 0x1078
 8004a98:	58d3      	ldr	r3, [r2, r3]
 8004a9a:	429f      	cmp	r7, r3
 8004a9c:	d805      	bhi.n	8004aaa <main+0x602>
      strings_length = strings_lengthT;
 8004a9e:	f241 0378 	movw	r3, #4216	; 0x1078
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <main+0x624>)
 8004aa4:	50d7      	str	r7, [r2, r3]
      for( uint32_t i = 0; i < strings_length; i++){
 8004aa6:	2700      	movs	r7, #0
 8004aa8:	e049      	b.n	8004b3e <main+0x696>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004aaa:	f502 5884 	add.w	r8, r2, #4224	; 0x1080
 8004aae:	00b9      	lsls	r1, r7, #2
 8004ab0:	f8d8 0000 	ldr.w	r0, [r8]
 8004ab4:	f000 fe78 	bl	80057a8 <realloc>
 8004ab8:	f8c8 0000 	str.w	r0, [r8]
 8004abc:	e7ef      	b.n	8004a9e <main+0x5f6>
 8004abe:	bf00      	nop
 8004ac0:	08005fec 	.word	0x08005fec
 8004ac4:	08006004 	.word	0x08006004
 8004ac8:	080061e8 	.word	0x080061e8
 8004acc:	20001628 	.word	0x20001628
 8004ad0:	10624dd3 	.word	0x10624dd3
 8004ad4:	3b9aca00 	.word	0x3b9aca00
 8004ad8:	20002688 	.word	0x20002688
 8004adc:	000f4240 	.word	0x000f4240
      var |= (arr[i] << (8 * i));
 8004ae0:	4b69      	ldr	r3, [pc, #420]	; (8004c88 <main+0x7e0>)
 8004ae2:	4473      	add	r3, lr
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8004aea:	00d0      	lsls	r0, r2, #3
 8004aec:	4083      	lsls	r3, r0
 8004aee:	4319      	orrs	r1, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8004af0:	3201      	adds	r2, #1
 8004af2:	2a03      	cmp	r2, #3
 8004af4:	d9f4      	bls.n	8004ae0 <main+0x638>
      offset += 4;
 8004af6:	f106 0e04 	add.w	lr, r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004afa:	4673      	mov	r3, lr
 8004afc:	eb01 020e 	add.w	r2, r1, lr
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d909      	bls.n	8004b18 <main+0x670>
          inbuffer[k-1]=inbuffer[k];
 8004b04:	4a60      	ldr	r2, [pc, #384]	; (8004c88 <main+0x7e0>)
 8004b06:	f1a2 0694 	sub.w	r6, r2, #148	; 0x94
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	441a      	add	r2, r3
 8004b0e:	f812 2c94 	ldrb.w	r2, [r2, #-148]
 8004b12:	5432      	strb	r2, [r6, r0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004b14:	3301      	adds	r3, #1
 8004b16:	e7f1      	b.n	8004afc <main+0x654>
      inbuffer[offset+length_st_strings-1]=0;
 8004b18:	495b      	ldr	r1, [pc, #364]	; (8004c88 <main+0x7e0>)
 8004b1a:	f1a1 0394 	sub.w	r3, r1, #148	; 0x94
 8004b1e:	1e50      	subs	r0, r2, #1
 8004b20:	2600      	movs	r6, #0
 8004b22:	541e      	strb	r6, [r3, r0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004b24:	f10e 36ff 	add.w	r6, lr, #4294967295
 8004b28:	4433      	add	r3, r6
 8004b2a:	f241 007c 	movw	r0, #4220	; 0x107c
 8004b2e:	500b      	str	r3, [r1, r0]
      offset += length_st_strings;
 8004b30:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004b32:	f501 5184 	add.w	r1, r1, #4224	; 0x1080
 8004b36:	680a      	ldr	r2, [r1, #0]
 8004b38:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8004b3c:	3701      	adds	r7, #1
 8004b3e:	f241 0378 	movw	r3, #4216	; 0x1078
 8004b42:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <main+0x7e0>)
 8004b44:	58d3      	ldr	r3, [r2, r3]
 8004b46:	42bb      	cmp	r3, r7
 8004b48:	d903      	bls.n	8004b52 <main+0x6aa>
      arrToVar(length_st_strings, (inbuffer + offset));
 8004b4a:	46b6      	mov	lr, r6
    var = 0;
 8004b4c:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8004b4e:	460a      	mov	r2, r1
 8004b50:	e7cf      	b.n	8004af2 <main+0x64a>
            param_recieved = true;
 8004b52:	2101      	movs	r1, #1
 8004b54:	f241 0358 	movw	r3, #4184	; 0x1058
 8004b58:	4a4b      	ldr	r2, [pc, #300]	; (8004c88 <main+0x7e0>)
 8004b5a:	54d1      	strb	r1, [r2, r3]
 8004b5c:	e52e      	b.n	80045bc <main+0x114>
            configured_ = false;
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f241 0348 	movw	r3, #4168	; 0x1048
 8004b64:	4a48      	ldr	r2, [pc, #288]	; (8004c88 <main+0x7e0>)
 8004b66:	54d1      	strb	r1, [r2, r3]
 8004b68:	e528      	b.n	80045bc <main+0x114>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004b6a:	f241 0348 	movw	r3, #4168	; 0x1048
 8004b6e:	4a46      	ldr	r2, [pc, #280]	; (8004c88 <main+0x7e0>)
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	b13b      	cbz	r3, 8004b84 <main+0x6dc>
 8004b74:	f241 034c 	movw	r3, #4172	; 0x104c
 8004b78:	58d3      	ldr	r3, [r2, r3]
 8004b7a:	1ae3      	subs	r3, r4, r3
 8004b7c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d86c      	bhi.n	8004c5e <main+0x7b6>
		if (speed_drv1!=0.0 || speed_drv2!=0.0)
 8004b84:	2100      	movs	r1, #0
 8004b86:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <main+0x7e4>)
 8004b88:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8004b8c:	f7fb ff4e 	bl	8000a2c <__aeabi_fcmpeq>
 8004b90:	b130      	cbz	r0, 8004ba0 <main+0x6f8>
 8004b92:	2100      	movs	r1, #0
 8004b94:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <main+0x7e4>)
 8004b96:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8004b9a:	f7fb ff47 	bl	8000a2c <__aeabi_fcmpeq>
 8004b9e:	bb70      	cbnz	r0, 8004bfe <main+0x756>
			uart_drv_send = 0;
 8004ba0:	4c3a      	ldr	r4, [pc, #232]	; (8004c8c <main+0x7e4>)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	67a3      	str	r3, [r4, #120]	; 0x78
			buf_drv_send_decoded[0] = 'v';
 8004ba6:	f04f 0876 	mov.w	r8, #118	; 0x76
 8004baa:	f884 807c 	strb.w	r8, [r4, #124]	; 0x7c
			memcpy(buf_drv_send_decoded + 1, &speed_drv1, sizeof(float));
 8004bae:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8004bb2:	f8c4 307d 	str.w	r3, [r4, #125]	; 0x7d
			cobs_encode(buf_drv_send_decoded, BUF_SIZE_DRV_SEND - 2, buf_drv_send);
 8004bb6:	f104 0684 	add.w	r6, r4, #132	; 0x84
 8004bba:	f104 077c 	add.w	r7, r4, #124	; 0x7c
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	2105      	movs	r1, #5
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	f7fe f8c6 	bl	8002d54 <_Z11cobs_encodePKhjPh>
			HAL_UART_Transmit(&huart2, buf_drv_send, BUF_SIZE_DRV_SEND, 0x0FFF);
 8004bc8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004bcc:	2207      	movs	r2, #7
 8004bce:	4631      	mov	r1, r6
 8004bd0:	f1a4 0008 	sub.w	r0, r4, #8
 8004bd4:	f7fd fe4f 	bl	8002876 <HAL_UART_Transmit>
			buf_drv_send_decoded[0] = 'v';
 8004bd8:	f884 807c 	strb.w	r8, [r4, #124]	; 0x7c
			memcpy(buf_drv_send_decoded + 1, &speed_drv2, sizeof(float));
 8004bdc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8004be0:	f8c4 307d 	str.w	r3, [r4, #125]	; 0x7d
			cobs_encode(buf_drv_send_decoded, BUF_SIZE_DRV_SEND - 2, buf_drv_send);
 8004be4:	4632      	mov	r2, r6
 8004be6:	2105      	movs	r1, #5
 8004be8:	4638      	mov	r0, r7
 8004bea:	f7fe f8b3 	bl	8002d54 <_Z11cobs_encodePKhjPh>
			HAL_UART_Transmit(&huart3, buf_drv_send, BUF_SIZE_DRV_SEND, 0x0FFF);
 8004bee:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004bf2:	2207      	movs	r2, #7
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8004bfa:	f7fd fe3c 	bl	8002876 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c04:	4822      	ldr	r0, [pc, #136]	; (8004c90 <main+0x7e8>)
 8004c06:	f7fd f9e7 	bl	8001fd8 <HAL_GPIO_WritePin>
    return configured_;
 8004c0a:	f241 0348 	movw	r3, #4168	; 0x1048
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <main+0x7e0>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
      if (nh.connected())
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f47f ac9e 	bne.w	8004554 <main+0xac>
 8004c18:	f7fc ff04 	bl	8001a24 <HAL_GetTick>
 8004c1c:	4604      	mov	r4, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004c1e:	f241 0350 	movw	r3, #4176	; 0x1050
 8004c22:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <main+0x7e0>)
 8004c24:	58d3      	ldr	r3, [r2, r3]
 8004c26:	1ac3      	subs	r3, r0, r3
 8004c28:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d904      	bls.n	8004c3a <main+0x792>
      configured_ = false;
 8004c30:	2100      	movs	r1, #0
 8004c32:	f241 0348 	movw	r3, #4168	; 0x1048
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <main+0x7e0>)
 8004c38:	54d1      	strb	r1, [r2, r3]
    if (mode_ != MODE_FIRST_FF)
 8004c3a:	f241 0334 	movw	r3, #4148	; 0x1034
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <main+0x7e0>)
 8004c40:	58d3      	ldr	r3, [r2, r3]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f43f acba 	beq.w	80045bc <main+0x114>
      if (c_time > last_msg_timeout_time)
 8004c48:	f241 0354 	movw	r3, #4180	; 0x1054
 8004c4c:	58d3      	ldr	r3, [r2, r3]
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	f67f acb4 	bls.w	80045bc <main+0x114>
        mode_ = MODE_FIRST_FF;
 8004c54:	2100      	movs	r1, #0
 8004c56:	f241 0334 	movw	r3, #4148	; 0x1034
 8004c5a:	50d1      	str	r1, [r2, r3]
 8004c5c:	e4ae      	b.n	80045bc <main+0x114>
      data()
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <main+0x7ec>)
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	9302      	str	r3, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8004c68:	4e07      	ldr	r6, [pc, #28]	; (8004c88 <main+0x7e0>)
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f850 3dac 	ldr.w	r3, [r0, #-172]!
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	466a      	mov	r2, sp
 8004c74:	210a      	movs	r1, #10
 8004c76:	4798      	blx	r3
 8004c78:	f7fc fed4 	bl	8001a24 <HAL_GetTick>
    rt_time = hardware_.time();
 8004c7c:	f846 0ca4 	str.w	r0, [r6, #-164]
      last_sync_time = c_time;
 8004c80:	f241 034c 	movw	r3, #4172	; 0x104c
 8004c84:	50f4      	str	r4, [r6, r3]
 8004c86:	e77d      	b.n	8004b84 <main+0x6dc>
 8004c88:	20001628 	.word	0x20001628
 8004c8c:	20002720 	.word	0x20002720
 8004c90:	40011000 	.word	0x40011000
 8004c94:	08005fec 	.word	0x08005fec

08004c98 <Error_Handler>:
{
 8004c98:	4770      	bx	lr

08004c9a <_GLOBAL__sub_I_serial>:
}
 8004c9a:	b508      	push	{r3, lr}
 8004c9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f7fe fa33 	bl	800310c <_Z41__static_initialization_and_destruction_0ii>
 8004ca6:	bd08      	pop	{r3, pc}

08004ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ca8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_MspInit+0x3c>)
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	619a      	str	r2, [r3, #24]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	f002 0201 	and.w	r2, r2, #1
 8004cba:	9200      	str	r2, [sp, #0]
 8004cbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cc4:	61da      	str	r2, [r3, #28]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004cd0:	4a05      	ldr	r2, [pc, #20]	; (8004ce8 <HAL_MspInit+0x40>)
 8004cd2:	6853      	ldr	r3, [r2, #4]
 8004cd4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cde:	b002      	add	sp, #8
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40010000 	.word	0x40010000

08004cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9306      	str	r3, [sp, #24]
 8004cf4:	9307      	str	r3, [sp, #28]
 8004cf6:	9308      	str	r3, [sp, #32]
 8004cf8:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8004cfa:	6803      	ldr	r3, [r0, #0]
 8004cfc:	4a67      	ldr	r2, [pc, #412]	; (8004e9c <HAL_UART_MspInit+0x1b0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d008      	beq.n	8004d14 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004d02:	4a67      	ldr	r2, [pc, #412]	; (8004ea0 <HAL_UART_MspInit+0x1b4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d066      	beq.n	8004dd6 <HAL_UART_MspInit+0xea>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8004d08:	4a66      	ldr	r2, [pc, #408]	; (8004ea4 <HAL_UART_MspInit+0x1b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	f000 8093 	beq.w	8004e36 <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d10:	b00a      	add	sp, #40	; 0x28
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d16:	4b64      	ldr	r3, [pc, #400]	; (8004ea8 <HAL_UART_MspInit+0x1bc>)
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1e:	619a      	str	r2, [r3, #24]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004d26:	9200      	str	r2, [sp, #0]
 8004d28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	f042 0204 	orr.w	r2, r2, #4
 8004d30:	619a      	str	r2, [r3, #24]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d40:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d46:	2303      	movs	r3, #3
 8004d48:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4a:	4e58      	ldr	r6, [pc, #352]	; (8004eac <HAL_UART_MspInit+0x1c0>)
 8004d4c:	a906      	add	r1, sp, #24
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7fd f84a 	bl	8001de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d60:	a906      	add	r1, sp, #24
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7fd f840 	bl	8001de8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004d68:	4851      	ldr	r0, [pc, #324]	; (8004eb0 <HAL_UART_MspInit+0x1c4>)
 8004d6a:	4b52      	ldr	r3, [pc, #328]	; (8004eb4 <HAL_UART_MspInit+0x1c8>)
 8004d6c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d6e:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d70:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d76:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d78:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004d7a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d80:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004d82:	f7fc fed3 	bl	8001b2c <HAL_DMA_Init>
 8004d86:	bb00      	cbnz	r0, 8004dca <HAL_UART_MspInit+0xde>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004d88:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <HAL_UART_MspInit+0x1c4>)
 8004d8a:	6363      	str	r3, [r4, #52]	; 0x34
 8004d8c:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004d8e:	484a      	ldr	r0, [pc, #296]	; (8004eb8 <HAL_UART_MspInit+0x1cc>)
 8004d90:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_UART_MspInit+0x1d0>)
 8004d92:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d94:	2310      	movs	r3, #16
 8004d96:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004da0:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004da2:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004da4:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004daa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004dac:	f7fc febe 	bl	8001b2c <HAL_DMA_Init>
 8004db0:	b970      	cbnz	r0, 8004dd0 <HAL_UART_MspInit+0xe4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004db2:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <HAL_UART_MspInit+0x1cc>)
 8004db4:	6323      	str	r3, [r4, #48]	; 0x30
 8004db6:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004db8:	2200      	movs	r2, #0
 8004dba:	4611      	mov	r1, r2
 8004dbc:	2025      	movs	r0, #37	; 0x25
 8004dbe:	f7fc fe49 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004dc2:	2025      	movs	r0, #37	; 0x25
 8004dc4:	f7fc fe78 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
 8004dc8:	e7a2      	b.n	8004d10 <HAL_UART_MspInit+0x24>
      Error_Handler();
 8004dca:	f7ff ff65 	bl	8004c98 <Error_Handler>
 8004dce:	e7db      	b.n	8004d88 <HAL_UART_MspInit+0x9c>
      Error_Handler();
 8004dd0:	f7ff ff62 	bl	8004c98 <Error_Handler>
 8004dd4:	e7ed      	b.n	8004db2 <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dd6:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <HAL_UART_MspInit+0x1bc>)
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dde:	61da      	str	r2, [r3, #28]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004de6:	9202      	str	r2, [sp, #8]
 8004de8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	f042 0204 	orr.w	r2, r2, #4
 8004df0:	619a      	str	r2, [r3, #24]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e00:	2302      	movs	r3, #2
 8004e02:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e04:	2303      	movs	r3, #3
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e08:	4d28      	ldr	r5, [pc, #160]	; (8004eac <HAL_UART_MspInit+0x1c0>)
 8004e0a:	a906      	add	r1, sp, #24
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f7fc ffeb 	bl	8001de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e12:	2308      	movs	r3, #8
 8004e14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e16:	2400      	movs	r4, #0
 8004e18:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1c:	a906      	add	r1, sp, #24
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f7fc ffe2 	bl	8001de8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004e24:	4622      	mov	r2, r4
 8004e26:	4621      	mov	r1, r4
 8004e28:	2026      	movs	r0, #38	; 0x26
 8004e2a:	f7fc fe13 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e2e:	2026      	movs	r0, #38	; 0x26
 8004e30:	f7fc fe42 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
 8004e34:	e76c      	b.n	8004d10 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_UART_MspInit+0x1bc>)
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e3e:	61da      	str	r2, [r3, #28]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004e46:	9204      	str	r2, [sp, #16]
 8004e48:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	f042 0208 	orr.w	r2, r2, #8
 8004e50:	619a      	str	r2, [r3, #24]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	9305      	str	r3, [sp, #20]
 8004e5a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e62:	2302      	movs	r3, #2
 8004e64:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e66:	2303      	movs	r3, #3
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e6a:	4d15      	ldr	r5, [pc, #84]	; (8004ec0 <HAL_UART_MspInit+0x1d4>)
 8004e6c:	a906      	add	r1, sp, #24
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f7fc ffba 	bl	8001de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e78:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e80:	a906      	add	r1, sp, #24
 8004e82:	4628      	mov	r0, r5
 8004e84:	f7fc ffb0 	bl	8001de8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	2027      	movs	r0, #39	; 0x27
 8004e8e:	f7fc fde1 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004e92:	2027      	movs	r0, #39	; 0x27
 8004e94:	f7fc fe10 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
}
 8004e98:	e73a      	b.n	8004d10 <HAL_UART_MspInit+0x24>
 8004e9a:	bf00      	nop
 8004e9c:	40013800 	.word	0x40013800
 8004ea0:	40004400 	.word	0x40004400
 8004ea4:	40004800 	.word	0x40004800
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40010800 	.word	0x40010800
 8004eb0:	20002808 	.word	0x20002808
 8004eb4:	40020058 	.word	0x40020058
 8004eb8:	200027c4 	.word	0x200027c4
 8004ebc:	40020044 	.word	0x40020044
 8004ec0:	40010c00 	.word	0x40010c00

08004ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec4:	4770      	bx	lr

08004ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec6:	e7fe      	b.n	8004ec6 <HardFault_Handler>

08004ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ec8:	e7fe      	b.n	8004ec8 <MemManage_Handler>

08004eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eca:	e7fe      	b.n	8004eca <BusFault_Handler>

08004ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ecc:	e7fe      	b.n	8004ecc <UsageFault_Handler>

08004ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ece:	4770      	bx	lr

08004ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ed0:	4770      	bx	lr

08004ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ed2:	4770      	bx	lr

08004ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ed6:	f7fc fd99 	bl	8001a0c <HAL_IncTick>
 8004eda:	bd08      	pop	{r3, pc}

08004edc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004edc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ede:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <DMA1_Channel4_IRQHandler+0xc>)
 8004ee0:	f7fc fee0 	bl	8001ca4 <HAL_DMA_IRQHandler>
 8004ee4:	bd08      	pop	{r3, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200027c4 	.word	0x200027c4

08004eec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004eee:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <DMA1_Channel5_IRQHandler+0xc>)
 8004ef0:	f7fc fed8 	bl	8001ca4 <HAL_DMA_IRQHandler>
 8004ef4:	bd08      	pop	{r3, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20002808 	.word	0x20002808

08004efc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004efc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004efe:	4802      	ldr	r0, [pc, #8]	; (8004f08 <USART1_IRQHandler+0xc>)
 8004f00:	f7fd fe90 	bl	8002c24 <HAL_UART_IRQHandler>
 8004f04:	bd08      	pop	{r3, pc}
 8004f06:	bf00      	nop
 8004f08:	2000153c 	.word	0x2000153c

08004f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	static uint8_t counter;

	if (USART2->SR&USART_SR_RXNE) // if data received
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <USART2_IRQHandler+0x34>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f013 0f20 	tst.w	r3, #32
 8004f16:	d00a      	beq.n	8004f2e <USART2_IRQHandler+0x22>
	{
		buf_drv1[counter] = USART2->DR;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <USART2_IRQHandler+0x38>)
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <USART2_IRQHandler+0x34>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4909      	ldr	r1, [pc, #36]	; (8004f48 <USART2_IRQHandler+0x3c>)
 8004f24:	548b      	strb	r3, [r1, r2]
		if (buf_drv1[counter] == 0)
 8004f26:	b133      	cbz	r3, 8004f36 <USART2_IRQHandler+0x2a>
		{
			counter  = 0;
			return ;
		}
		counter++;
 8004f28:	3201      	adds	r2, #1
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <USART2_IRQHandler+0x38>)
 8004f2c:	701a      	strb	r2, [r3, #0]

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f2e:	4807      	ldr	r0, [pc, #28]	; (8004f4c <USART2_IRQHandler+0x40>)
 8004f30:	f7fd fe78 	bl	8002c24 <HAL_UART_IRQHandler>
 8004f34:	bd08      	pop	{r3, pc}
			counter  = 0;
 8004f36:	2200      	movs	r2, #0
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <USART2_IRQHandler+0x38>)
 8004f3a:	701a      	strb	r2, [r3, #0]
			return ;
 8004f3c:	bd08      	pop	{r3, pc}
 8004f3e:	bf00      	nop
 8004f40:	40004400 	.word	0x40004400
 8004f44:	2000284c 	.word	0x2000284c
 8004f48:	200027bc 	.word	0x200027bc
 8004f4c:	20002718 	.word	0x20002718

08004f50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004f50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */
	static uint8_t counter;

	if (USART3->SR&USART_SR_RXNE) // if data received
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <USART3_IRQHandler+0x34>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f013 0f20 	tst.w	r3, #32
 8004f5a:	d00a      	beq.n	8004f72 <USART3_IRQHandler+0x22>
	{
		buf_drv2[counter] = USART3->DR;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <USART3_IRQHandler+0x38>)
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <USART3_IRQHandler+0x34>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	4909      	ldr	r1, [pc, #36]	; (8004f8c <USART3_IRQHandler+0x3c>)
 8004f68:	548b      	strb	r3, [r1, r2]
		if (buf_drv2[counter] == 0)
 8004f6a:	b133      	cbz	r3, 8004f7a <USART3_IRQHandler+0x2a>
		{
			counter  = 0;
			return ;
		}
		counter++;
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <USART3_IRQHandler+0x38>)
 8004f70:	701a      	strb	r2, [r3, #0]

	}

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004f72:	4807      	ldr	r0, [pc, #28]	; (8004f90 <USART3_IRQHandler+0x40>)
 8004f74:	f7fd fe56 	bl	8002c24 <HAL_UART_IRQHandler>
 8004f78:	bd08      	pop	{r3, pc}
			counter  = 0;
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <USART3_IRQHandler+0x38>)
 8004f7e:	701a      	strb	r2, [r3, #0]
			return ;
 8004f80:	bd08      	pop	{r3, pc}
 8004f82:	bf00      	nop
 8004f84:	40004800 	.word	0x40004800
 8004f88:	2000284d 	.word	0x2000284d
 8004f8c:	200027b4 	.word	0x200027b4
 8004f90:	20002758 	.word	0x20002758

08004f94 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004f94:	2001      	movs	r0, #1
 8004f96:	4770      	bx	lr

08004f98 <_kill>:

int _kill(int pid, int sig)
{
 8004f98:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004f9a:	f000 f9a7 	bl	80052ec <__errno>
 8004f9e:	2316      	movs	r3, #22
 8004fa0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	bd08      	pop	{r3, pc}

08004fa8 <_exit>:

void _exit (int status)
{
 8004fa8:	b508      	push	{r3, lr}
	_kill(status, -1);
 8004faa:	f04f 31ff 	mov.w	r1, #4294967295
 8004fae:	f7ff fff3 	bl	8004f98 <_kill>
 8004fb2:	e7fe      	b.n	8004fb2 <_exit+0xa>

08004fb4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004fb4:	b508      	push	{r3, lr}
 8004fb6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004fb8:	4a0b      	ldr	r2, [pc, #44]	; (8004fe8 <_sbrk+0x34>)
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	b142      	cbz	r2, 8004fd0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <_sbrk+0x34>)
 8004fc0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004fc2:	4403      	add	r3, r0
 8004fc4:	466a      	mov	r2, sp
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d806      	bhi.n	8004fd8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004fca:	4a07      	ldr	r2, [pc, #28]	; (8004fe8 <_sbrk+0x34>)
 8004fcc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004fce:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004fd0:	4906      	ldr	r1, [pc, #24]	; (8004fec <_sbrk+0x38>)
 8004fd2:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <_sbrk+0x34>)
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	e7f2      	b.n	8004fbe <_sbrk+0xa>
		errno = ENOMEM;
 8004fd8:	f000 f988 	bl	80052ec <__errno>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	bd08      	pop	{r3, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20002850 	.word	0x20002850
 8004fec:	2000289c 	.word	0x2000289c

08004ff0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <SystemInit+0x40>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <SystemInit+0x44>)
 8004ffe:	400a      	ands	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005008:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800500c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005014:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800501c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800501e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005022:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005024:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <SystemInit+0x48>)
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	f8ff0000 	.word	0xf8ff0000
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800503c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800503e:	e003      	b.n	8005048 <LoopCopyDataInit>

08005040 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005042:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005044:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005046:	3104      	adds	r1, #4

08005048 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005048:	480a      	ldr	r0, [pc, #40]	; (8005074 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800504c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800504e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005050:	d3f6      	bcc.n	8005040 <CopyDataInit>
  ldr r2, =_sbss
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005054:	e002      	b.n	800505c <LoopFillZerobss>

08005056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005056:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005058:	f842 3b04 	str.w	r3, [r2], #4

0800505c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800505c:	4b08      	ldr	r3, [pc, #32]	; (8005080 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800505e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005060:	d3f9      	bcc.n	8005056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005062:	f7ff ffc5 	bl	8004ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005066:	f000 f947 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800506a:	f7ff fa1d 	bl	80044a8 <main>
  bx lr
 800506e:	4770      	bx	lr
  ldr r3, =_sidata
 8005070:	080064c8 	.word	0x080064c8
  ldr r0, =_sdata
 8005074:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005078:	20000510 	.word	0x20000510
  ldr r2, =_sbss
 800507c:	20000510 	.word	0x20000510
  ldr r3, = _ebss
 8005080:	2000289c 	.word	0x2000289c

08005084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005084:	e7fe      	b.n	8005084 <ADC1_2_IRQHandler>
	...

08005088 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800508e:	6003      	str	r3, [r0, #0]
 8005090:	f000 f8b6 	bl	8005200 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005094:	4620      	mov	r0, r4
 8005096:	bd10      	pop	{r4, pc}
 8005098:	0800627c 	.word	0x0800627c

0800509c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800509c:	b510      	push	{r4, lr}
 800509e:	4604      	mov	r4, r0
 80050a0:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 80050a2:	6003      	str	r3, [r0, #0]
 80050a4:	f000 f8ac 	bl	8005200 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80050a8:	4620      	mov	r0, r4
 80050aa:	210c      	movs	r1, #12
 80050ac:	f000 f884 	bl	80051b8 <_ZdlPvj>
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	0800627c 	.word	0x0800627c

080050b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	9c06      	ldr	r4, [sp, #24]
 80050be:	460d      	mov	r5, r1
 80050c0:	4294      	cmp	r4, r2
 80050c2:	4606      	mov	r6, r0
 80050c4:	d009      	beq.n	80050da <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80050c6:	68b0      	ldr	r0, [r6, #8]
 80050c8:	4629      	mov	r1, r5
 80050ca:	6806      	ldr	r6, [r0, #0]
 80050cc:	9406      	str	r4, [sp, #24]
 80050ce:	6a34      	ldr	r4, [r6, #32]
 80050d0:	46a4      	mov	ip, r4
 80050d2:	b002      	add	sp, #8
 80050d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050d8:	4760      	bx	ip
 80050da:	4619      	mov	r1, r3
 80050dc:	9201      	str	r2, [sp, #4]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	f000 f8ec 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 80050e4:	9b00      	ldr	r3, [sp, #0]
 80050e6:	9a01      	ldr	r2, [sp, #4]
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d0ec      	beq.n	80050c6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80050ec:	2006      	movs	r0, #6
 80050ee:	b002      	add	sp, #8
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
 80050f2:	bf00      	nop

080050f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	4689      	mov	r9, r1
 80050fa:	b081      	sub	sp, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	461d      	mov	r5, r3
 8005100:	4616      	mov	r6, r2
 8005102:	4607      	mov	r7, r0
 8005104:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005106:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800510a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800510e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005112:	f000 f8d3 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 8005116:	b188      	cbz	r0, 800513c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
 8005118:	f1b9 0f00 	cmp.w	r9, #0
 800511c:	f8c8 4000 	str.w	r4, [r8]
 8005120:	f888 6004 	strb.w	r6, [r8, #4]
 8005124:	db1e      	blt.n	8005164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 8005126:	444c      	add	r4, r9
 8005128:	45a2      	cmp	sl, r4
 800512a:	bf0c      	ite	eq
 800512c:	2406      	moveq	r4, #6
 800512e:	2401      	movne	r4, #1
 8005130:	f888 4006 	strb.w	r4, [r8, #6]
 8005134:	2000      	movs	r0, #0
 8005136:	b001      	add	sp, #4
 8005138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513c:	4554      	cmp	r4, sl
 800513e:	d018      	beq.n	8005172 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7e>
 8005140:	68b8      	ldr	r0, [r7, #8]
 8005142:	462b      	mov	r3, r5
 8005144:	6805      	ldr	r5, [r0, #0]
 8005146:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800514a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800514e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005152:	940a      	str	r4, [sp, #40]	; 0x28
 8005154:	69ec      	ldr	r4, [r5, #28]
 8005156:	4632      	mov	r2, r6
 8005158:	4649      	mov	r1, r9
 800515a:	46a4      	mov	ip, r4
 800515c:	b001      	add	sp, #4
 800515e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005162:	4760      	bx	ip
 8005164:	f119 0f02 	cmn.w	r9, #2
 8005168:	d1e4      	bne.n	8005134 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800516a:	2301      	movs	r3, #1
 800516c:	f888 3006 	strb.w	r3, [r8, #6]
 8005170:	e7e0      	b.n	8005134 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8005172:	4659      	mov	r1, fp
 8005174:	4638      	mov	r0, r7
 8005176:	f000 f8a1 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 800517a:	2800      	cmp	r0, #0
 800517c:	d0e0      	beq.n	8005140 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
 800517e:	2000      	movs	r0, #0
 8005180:	f888 6005 	strb.w	r6, [r8, #5]
 8005184:	b001      	add	sp, #4
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518a:	bf00      	nop

0800518c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	4607      	mov	r7, r0
 8005192:	460c      	mov	r4, r1
 8005194:	4615      	mov	r5, r2
 8005196:	461e      	mov	r6, r3
 8005198:	f000 f84a 	bl	8005230 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800519c:	b108      	cbz	r0, 80051a2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a2:	68b8      	ldr	r0, [r7, #8]
 80051a4:	4633      	mov	r3, r6
 80051a6:	6806      	ldr	r6, [r0, #0]
 80051a8:	4621      	mov	r1, r4
 80051aa:	69b4      	ldr	r4, [r6, #24]
 80051ac:	462a      	mov	r2, r5
 80051ae:	46a4      	mov	ip, r4
 80051b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051b4:	4760      	bx	ip
 80051b6:	bf00      	nop

080051b8 <_ZdlPvj>:
 80051b8:	f000 b896 	b.w	80052e8 <_ZdlPv>

080051bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	2400      	movs	r4, #0
 80051c0:	2610      	movs	r6, #16
 80051c2:	6803      	ldr	r3, [r0, #0]
 80051c4:	b084      	sub	sp, #16
 80051c6:	4615      	mov	r5, r2
 80051c8:	9602      	str	r6, [sp, #8]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	699e      	ldr	r6, [r3, #24]
 80051ce:	9400      	str	r4, [sp, #0]
 80051d0:	466b      	mov	r3, sp
 80051d2:	f88d 4004 	strb.w	r4, [sp, #4]
 80051d6:	9403      	str	r4, [sp, #12]
 80051d8:	47b0      	blx	r6
 80051da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051de:	f003 0306 	and.w	r3, r3, #6
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	bf09      	itett	eq
 80051e6:	2001      	moveq	r0, #1
 80051e8:	4620      	movne	r0, r4
 80051ea:	9b00      	ldreq	r3, [sp, #0]
 80051ec:	602b      	streq	r3, [r5, #0]
 80051ee:	b004      	add	sp, #16
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
 80051f2:	bf00      	nop

080051f4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80051f4:	9800      	ldr	r0, [sp, #0]
 80051f6:	4290      	cmp	r0, r2
 80051f8:	bf0c      	ite	eq
 80051fa:	2006      	moveq	r0, #6
 80051fc:	2001      	movne	r0, #1
 80051fe:	4770      	bx	lr

08005200 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005200:	b510      	push	{r4, lr}
 8005202:	4604      	mov	r4, r0
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8005206:	6003      	str	r3, [r0, #0]
 8005208:	f000 f854 	bl	80052b4 <_ZNSt9type_infoD1Ev>
 800520c:	4620      	mov	r0, r4
 800520e:	bd10      	pop	{r4, pc}
 8005210:	080062d8 	.word	0x080062d8

08005214 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005214:	b510      	push	{r4, lr}
 8005216:	4604      	mov	r4, r0
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800521a:	6003      	str	r3, [r0, #0]
 800521c:	f000 f84a 	bl	80052b4 <_ZNSt9type_infoD1Ev>
 8005220:	4620      	mov	r0, r4
 8005222:	2108      	movs	r1, #8
 8005224:	f7ff ffc8 	bl	80051b8 <_ZdlPvj>
 8005228:	4620      	mov	r0, r4
 800522a:	bd10      	pop	{r4, pc}
 800522c:	080062d8 	.word	0x080062d8

08005230 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4615      	mov	r5, r2
 8005234:	461c      	mov	r4, r3
 8005236:	f000 f841 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 800523a:	b120      	cbz	r0, 8005246 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800523c:	2208      	movs	r2, #8
 800523e:	2306      	movs	r3, #6
 8005240:	6025      	str	r5, [r4, #0]
 8005242:	60e2      	str	r2, [r4, #12]
 8005244:	7123      	strb	r3, [r4, #4]
 8005246:	bd38      	pop	{r3, r4, r5, pc}

08005248 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	4617      	mov	r7, r2
 800524e:	461c      	mov	r4, r3
 8005250:	4606      	mov	r6, r0
 8005252:	460d      	mov	r5, r1
 8005254:	f000 f832 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 8005258:	b908      	cbnz	r0, 800525e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800525a:	2c03      	cmp	r4, #3
 800525c:	d901      	bls.n	8005262 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	463a      	mov	r2, r7
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	4718      	bx	r3
 8005272:	bf00      	nop

08005274 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005276:	b083      	sub	sp, #12
 8005278:	9d08      	ldr	r5, [sp, #32]
 800527a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800527c:	4617      	mov	r7, r2
 800527e:	428d      	cmp	r5, r1
 8005280:	4606      	mov	r6, r0
 8005282:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005284:	d00b      	beq.n	800529e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 8005286:	4619      	mov	r1, r3
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f817 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 800528e:	b118      	cbz	r0, 8005298 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8005290:	2301      	movs	r3, #1
 8005292:	6025      	str	r5, [r4, #0]
 8005294:	7127      	strb	r7, [r4, #4]
 8005296:	71a3      	strb	r3, [r4, #6]
 8005298:	2000      	movs	r0, #0
 800529a:	b003      	add	sp, #12
 800529c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	f000 f80b 	bl	80052bc <_ZNKSt9type_infoeqERKS_>
 80052a6:	b118      	cbz	r0, 80052b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 80052a8:	2000      	movs	r0, #0
 80052aa:	7167      	strb	r7, [r4, #5]
 80052ac:	b003      	add	sp, #12
 80052ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b0:	9b01      	ldr	r3, [sp, #4]
 80052b2:	e7e8      	b.n	8005286 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

080052b4 <_ZNSt9type_infoD1Ev>:
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80052b8:	2000      	movs	r0, #0
 80052ba:	4770      	bx	lr

080052bc <_ZNKSt9type_infoeqERKS_>:
 80052bc:	4281      	cmp	r1, r0
 80052be:	d011      	beq.n	80052e4 <_ZNKSt9type_infoeqERKS_+0x28>
 80052c0:	b508      	push	{r3, lr}
 80052c2:	6840      	ldr	r0, [r0, #4]
 80052c4:	7803      	ldrb	r3, [r0, #0]
 80052c6:	2b2a      	cmp	r3, #42	; 0x2a
 80052c8:	d00a      	beq.n	80052e0 <_ZNKSt9type_infoeqERKS_+0x24>
 80052ca:	6849      	ldr	r1, [r1, #4]
 80052cc:	780b      	ldrb	r3, [r1, #0]
 80052ce:	2b2a      	cmp	r3, #42	; 0x2a
 80052d0:	bf08      	it	eq
 80052d2:	3101      	addeq	r1, #1
 80052d4:	f7fa ff3a 	bl	800014c <strcmp>
 80052d8:	fab0 f080 	clz	r0, r0
 80052dc:	0940      	lsrs	r0, r0, #5
 80052de:	bd08      	pop	{r3, pc}
 80052e0:	2000      	movs	r0, #0
 80052e2:	bd08      	pop	{r3, pc}
 80052e4:	2001      	movs	r0, #1
 80052e6:	4770      	bx	lr

080052e8 <_ZdlPv>:
 80052e8:	f000 b82a 	b.w	8005340 <free>

080052ec <__errno>:
 80052ec:	4b01      	ldr	r3, [pc, #4]	; (80052f4 <__errno+0x8>)
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	2500      	movs	r5, #0
 80052fc:	4e0c      	ldr	r6, [pc, #48]	; (8005330 <__libc_init_array+0x38>)
 80052fe:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 8005300:	1ba4      	subs	r4, r4, r6
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	42a5      	cmp	r5, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	f000 fd62 	bl	8005dd0 <_init>
 800530c:	2500      	movs	r5, #0
 800530e:	4e0a      	ldr	r6, [pc, #40]	; (8005338 <__libc_init_array+0x40>)
 8005310:	4c0a      	ldr	r4, [pc, #40]	; (800533c <__libc_init_array+0x44>)
 8005312:	1ba4      	subs	r4, r4, r6
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	42a5      	cmp	r5, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005320:	4798      	blx	r3
 8005322:	3501      	adds	r5, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800532a:	4798      	blx	r3
 800532c:	3501      	adds	r5, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	080064bc 	.word	0x080064bc
 8005334:	080064bc 	.word	0x080064bc
 8005338:	080064bc 	.word	0x080064bc
 800533c:	080064c4 	.word	0x080064c4

08005340 <free>:
 8005340:	4b02      	ldr	r3, [pc, #8]	; (800534c <free+0xc>)
 8005342:	4601      	mov	r1, r0
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f000 bc1f 	b.w	8005b88 <_free_r>
 800534a:	bf00      	nop
 800534c:	2000000c 	.word	0x2000000c

08005350 <_malloc_r>:
 8005350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	f101 040b 	add.w	r4, r1, #11
 8005358:	2c16      	cmp	r4, #22
 800535a:	4681      	mov	r9, r0
 800535c:	d907      	bls.n	800536e <_malloc_r+0x1e>
 800535e:	f034 0407 	bics.w	r4, r4, #7
 8005362:	d505      	bpl.n	8005370 <_malloc_r+0x20>
 8005364:	230c      	movs	r3, #12
 8005366:	f8c9 3000 	str.w	r3, [r9]
 800536a:	2600      	movs	r6, #0
 800536c:	e131      	b.n	80055d2 <_malloc_r+0x282>
 800536e:	2410      	movs	r4, #16
 8005370:	428c      	cmp	r4, r1
 8005372:	d3f7      	bcc.n	8005364 <_malloc_r+0x14>
 8005374:	4648      	mov	r0, r9
 8005376:	f000 fa0b 	bl	8005790 <__malloc_lock>
 800537a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800537e:	4d9b      	ldr	r5, [pc, #620]	; (80055ec <_malloc_r+0x29c>)
 8005380:	d236      	bcs.n	80053f0 <_malloc_r+0xa0>
 8005382:	f104 0208 	add.w	r2, r4, #8
 8005386:	442a      	add	r2, r5
 8005388:	6856      	ldr	r6, [r2, #4]
 800538a:	f1a2 0108 	sub.w	r1, r2, #8
 800538e:	428e      	cmp	r6, r1
 8005390:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005394:	d102      	bne.n	800539c <_malloc_r+0x4c>
 8005396:	68d6      	ldr	r6, [r2, #12]
 8005398:	42b2      	cmp	r2, r6
 800539a:	d010      	beq.n	80053be <_malloc_r+0x6e>
 800539c:	6873      	ldr	r3, [r6, #4]
 800539e:	68f2      	ldr	r2, [r6, #12]
 80053a0:	68b1      	ldr	r1, [r6, #8]
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	60ca      	str	r2, [r1, #12]
 80053a8:	4433      	add	r3, r6
 80053aa:	6091      	str	r1, [r2, #8]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	4648      	mov	r0, r9
 80053b6:	f000 f9f1 	bl	800579c <__malloc_unlock>
 80053ba:	3608      	adds	r6, #8
 80053bc:	e109      	b.n	80055d2 <_malloc_r+0x282>
 80053be:	3302      	adds	r3, #2
 80053c0:	4a8b      	ldr	r2, [pc, #556]	; (80055f0 <_malloc_r+0x2a0>)
 80053c2:	692e      	ldr	r6, [r5, #16]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4296      	cmp	r6, r2
 80053c8:	d06d      	beq.n	80054a6 <_malloc_r+0x156>
 80053ca:	6870      	ldr	r0, [r6, #4]
 80053cc:	f020 0003 	bic.w	r0, r0, #3
 80053d0:	1b07      	subs	r7, r0, r4
 80053d2:	2f0f      	cmp	r7, #15
 80053d4:	dd47      	ble.n	8005466 <_malloc_r+0x116>
 80053d6:	1933      	adds	r3, r6, r4
 80053d8:	f044 0401 	orr.w	r4, r4, #1
 80053dc:	6074      	str	r4, [r6, #4]
 80053de:	616b      	str	r3, [r5, #20]
 80053e0:	612b      	str	r3, [r5, #16]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	f047 0201 	orr.w	r2, r7, #1
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	5037      	str	r7, [r6, r0]
 80053ee:	e7e1      	b.n	80053b4 <_malloc_r+0x64>
 80053f0:	0a63      	lsrs	r3, r4, #9
 80053f2:	d02a      	beq.n	800544a <_malloc_r+0xfa>
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d812      	bhi.n	800541e <_malloc_r+0xce>
 80053f8:	09a3      	lsrs	r3, r4, #6
 80053fa:	3338      	adds	r3, #56	; 0x38
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005402:	6856      	ldr	r6, [r2, #4]
 8005404:	f1a2 0008 	sub.w	r0, r2, #8
 8005408:	4286      	cmp	r6, r0
 800540a:	d006      	beq.n	800541a <_malloc_r+0xca>
 800540c:	6872      	ldr	r2, [r6, #4]
 800540e:	f022 0203 	bic.w	r2, r2, #3
 8005412:	1b11      	subs	r1, r2, r4
 8005414:	290f      	cmp	r1, #15
 8005416:	dd1c      	ble.n	8005452 <_malloc_r+0x102>
 8005418:	3b01      	subs	r3, #1
 800541a:	3301      	adds	r3, #1
 800541c:	e7d0      	b.n	80053c0 <_malloc_r+0x70>
 800541e:	2b14      	cmp	r3, #20
 8005420:	d801      	bhi.n	8005426 <_malloc_r+0xd6>
 8005422:	335b      	adds	r3, #91	; 0x5b
 8005424:	e7ea      	b.n	80053fc <_malloc_r+0xac>
 8005426:	2b54      	cmp	r3, #84	; 0x54
 8005428:	d802      	bhi.n	8005430 <_malloc_r+0xe0>
 800542a:	0b23      	lsrs	r3, r4, #12
 800542c:	336e      	adds	r3, #110	; 0x6e
 800542e:	e7e5      	b.n	80053fc <_malloc_r+0xac>
 8005430:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005434:	d802      	bhi.n	800543c <_malloc_r+0xec>
 8005436:	0be3      	lsrs	r3, r4, #15
 8005438:	3377      	adds	r3, #119	; 0x77
 800543a:	e7df      	b.n	80053fc <_malloc_r+0xac>
 800543c:	f240 5254 	movw	r2, #1364	; 0x554
 8005440:	4293      	cmp	r3, r2
 8005442:	d804      	bhi.n	800544e <_malloc_r+0xfe>
 8005444:	0ca3      	lsrs	r3, r4, #18
 8005446:	337c      	adds	r3, #124	; 0x7c
 8005448:	e7d8      	b.n	80053fc <_malloc_r+0xac>
 800544a:	233f      	movs	r3, #63	; 0x3f
 800544c:	e7d6      	b.n	80053fc <_malloc_r+0xac>
 800544e:	237e      	movs	r3, #126	; 0x7e
 8005450:	e7d4      	b.n	80053fc <_malloc_r+0xac>
 8005452:	2900      	cmp	r1, #0
 8005454:	68f1      	ldr	r1, [r6, #12]
 8005456:	db04      	blt.n	8005462 <_malloc_r+0x112>
 8005458:	68b3      	ldr	r3, [r6, #8]
 800545a:	60d9      	str	r1, [r3, #12]
 800545c:	608b      	str	r3, [r1, #8]
 800545e:	18b3      	adds	r3, r6, r2
 8005460:	e7a4      	b.n	80053ac <_malloc_r+0x5c>
 8005462:	460e      	mov	r6, r1
 8005464:	e7d0      	b.n	8005408 <_malloc_r+0xb8>
 8005466:	2f00      	cmp	r7, #0
 8005468:	616a      	str	r2, [r5, #20]
 800546a:	612a      	str	r2, [r5, #16]
 800546c:	db05      	blt.n	800547a <_malloc_r+0x12a>
 800546e:	4430      	add	r0, r6
 8005470:	6843      	ldr	r3, [r0, #4]
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6043      	str	r3, [r0, #4]
 8005478:	e79c      	b.n	80053b4 <_malloc_r+0x64>
 800547a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800547e:	d244      	bcs.n	800550a <_malloc_r+0x1ba>
 8005480:	2201      	movs	r2, #1
 8005482:	08c0      	lsrs	r0, r0, #3
 8005484:	1087      	asrs	r7, r0, #2
 8005486:	fa02 f707 	lsl.w	r7, r2, r7
 800548a:	686a      	ldr	r2, [r5, #4]
 800548c:	3001      	adds	r0, #1
 800548e:	433a      	orrs	r2, r7
 8005490:	606a      	str	r2, [r5, #4]
 8005492:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005496:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800549a:	3a08      	subs	r2, #8
 800549c:	60f2      	str	r2, [r6, #12]
 800549e:	60b7      	str	r7, [r6, #8]
 80054a0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80054a4:	60fe      	str	r6, [r7, #12]
 80054a6:	2001      	movs	r0, #1
 80054a8:	109a      	asrs	r2, r3, #2
 80054aa:	fa00 f202 	lsl.w	r2, r0, r2
 80054ae:	6868      	ldr	r0, [r5, #4]
 80054b0:	4282      	cmp	r2, r0
 80054b2:	f200 809f 	bhi.w	80055f4 <_malloc_r+0x2a4>
 80054b6:	4202      	tst	r2, r0
 80054b8:	d106      	bne.n	80054c8 <_malloc_r+0x178>
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	0052      	lsls	r2, r2, #1
 80054c0:	4202      	tst	r2, r0
 80054c2:	f103 0304 	add.w	r3, r3, #4
 80054c6:	d0fa      	beq.n	80054be <_malloc_r+0x16e>
 80054c8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80054cc:	46e0      	mov	r8, ip
 80054ce:	469e      	mov	lr, r3
 80054d0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80054d4:	4546      	cmp	r6, r8
 80054d6:	d153      	bne.n	8005580 <_malloc_r+0x230>
 80054d8:	f10e 0e01 	add.w	lr, lr, #1
 80054dc:	f01e 0f03 	tst.w	lr, #3
 80054e0:	f108 0808 	add.w	r8, r8, #8
 80054e4:	d1f4      	bne.n	80054d0 <_malloc_r+0x180>
 80054e6:	0798      	lsls	r0, r3, #30
 80054e8:	d179      	bne.n	80055de <_malloc_r+0x28e>
 80054ea:	686b      	ldr	r3, [r5, #4]
 80054ec:	ea23 0302 	bic.w	r3, r3, r2
 80054f0:	606b      	str	r3, [r5, #4]
 80054f2:	6868      	ldr	r0, [r5, #4]
 80054f4:	0052      	lsls	r2, r2, #1
 80054f6:	4282      	cmp	r2, r0
 80054f8:	d87c      	bhi.n	80055f4 <_malloc_r+0x2a4>
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	d07a      	beq.n	80055f4 <_malloc_r+0x2a4>
 80054fe:	4673      	mov	r3, lr
 8005500:	4202      	tst	r2, r0
 8005502:	d1e1      	bne.n	80054c8 <_malloc_r+0x178>
 8005504:	3304      	adds	r3, #4
 8005506:	0052      	lsls	r2, r2, #1
 8005508:	e7fa      	b.n	8005500 <_malloc_r+0x1b0>
 800550a:	0a42      	lsrs	r2, r0, #9
 800550c:	2a04      	cmp	r2, #4
 800550e:	d815      	bhi.n	800553c <_malloc_r+0x1ec>
 8005510:	0982      	lsrs	r2, r0, #6
 8005512:	3238      	adds	r2, #56	; 0x38
 8005514:	1c57      	adds	r7, r2, #1
 8005516:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800551a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800551e:	45be      	cmp	lr, r7
 8005520:	d126      	bne.n	8005570 <_malloc_r+0x220>
 8005522:	2001      	movs	r0, #1
 8005524:	1092      	asrs	r2, r2, #2
 8005526:	fa00 f202 	lsl.w	r2, r0, r2
 800552a:	6868      	ldr	r0, [r5, #4]
 800552c:	4310      	orrs	r0, r2
 800552e:	6068      	str	r0, [r5, #4]
 8005530:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005534:	60b7      	str	r7, [r6, #8]
 8005536:	f8ce 6008 	str.w	r6, [lr, #8]
 800553a:	e7b3      	b.n	80054a4 <_malloc_r+0x154>
 800553c:	2a14      	cmp	r2, #20
 800553e:	d801      	bhi.n	8005544 <_malloc_r+0x1f4>
 8005540:	325b      	adds	r2, #91	; 0x5b
 8005542:	e7e7      	b.n	8005514 <_malloc_r+0x1c4>
 8005544:	2a54      	cmp	r2, #84	; 0x54
 8005546:	d802      	bhi.n	800554e <_malloc_r+0x1fe>
 8005548:	0b02      	lsrs	r2, r0, #12
 800554a:	326e      	adds	r2, #110	; 0x6e
 800554c:	e7e2      	b.n	8005514 <_malloc_r+0x1c4>
 800554e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005552:	d802      	bhi.n	800555a <_malloc_r+0x20a>
 8005554:	0bc2      	lsrs	r2, r0, #15
 8005556:	3277      	adds	r2, #119	; 0x77
 8005558:	e7dc      	b.n	8005514 <_malloc_r+0x1c4>
 800555a:	f240 5754 	movw	r7, #1364	; 0x554
 800555e:	42ba      	cmp	r2, r7
 8005560:	bf9a      	itte	ls
 8005562:	0c82      	lsrls	r2, r0, #18
 8005564:	327c      	addls	r2, #124	; 0x7c
 8005566:	227e      	movhi	r2, #126	; 0x7e
 8005568:	e7d4      	b.n	8005514 <_malloc_r+0x1c4>
 800556a:	68bf      	ldr	r7, [r7, #8]
 800556c:	45be      	cmp	lr, r7
 800556e:	d004      	beq.n	800557a <_malloc_r+0x22a>
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	f022 0203 	bic.w	r2, r2, #3
 8005576:	4290      	cmp	r0, r2
 8005578:	d3f7      	bcc.n	800556a <_malloc_r+0x21a>
 800557a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800557e:	e7d7      	b.n	8005530 <_malloc_r+0x1e0>
 8005580:	6870      	ldr	r0, [r6, #4]
 8005582:	68f7      	ldr	r7, [r6, #12]
 8005584:	f020 0003 	bic.w	r0, r0, #3
 8005588:	eba0 0a04 	sub.w	sl, r0, r4
 800558c:	f1ba 0f0f 	cmp.w	sl, #15
 8005590:	dd10      	ble.n	80055b4 <_malloc_r+0x264>
 8005592:	68b2      	ldr	r2, [r6, #8]
 8005594:	1933      	adds	r3, r6, r4
 8005596:	f044 0401 	orr.w	r4, r4, #1
 800559a:	6074      	str	r4, [r6, #4]
 800559c:	60d7      	str	r7, [r2, #12]
 800559e:	60ba      	str	r2, [r7, #8]
 80055a0:	f04a 0201 	orr.w	r2, sl, #1
 80055a4:	616b      	str	r3, [r5, #20]
 80055a6:	612b      	str	r3, [r5, #16]
 80055a8:	60d9      	str	r1, [r3, #12]
 80055aa:	6099      	str	r1, [r3, #8]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	f846 a000 	str.w	sl, [r6, r0]
 80055b2:	e6ff      	b.n	80053b4 <_malloc_r+0x64>
 80055b4:	f1ba 0f00 	cmp.w	sl, #0
 80055b8:	db0f      	blt.n	80055da <_malloc_r+0x28a>
 80055ba:	4430      	add	r0, r6
 80055bc:	6843      	ldr	r3, [r0, #4]
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6043      	str	r3, [r0, #4]
 80055c4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80055c8:	4648      	mov	r0, r9
 80055ca:	60df      	str	r7, [r3, #12]
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	f000 f8e5 	bl	800579c <__malloc_unlock>
 80055d2:	4630      	mov	r0, r6
 80055d4:	b003      	add	sp, #12
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	463e      	mov	r6, r7
 80055dc:	e77a      	b.n	80054d4 <_malloc_r+0x184>
 80055de:	f85c 0908 	ldr.w	r0, [ip], #-8
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4584      	cmp	ip, r0
 80055e6:	f43f af7e 	beq.w	80054e6 <_malloc_r+0x196>
 80055ea:	e782      	b.n	80054f2 <_malloc_r+0x1a2>
 80055ec:	20000100 	.word	0x20000100
 80055f0:	20000108 	.word	0x20000108
 80055f4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80055f8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80055fc:	f026 0603 	bic.w	r6, r6, #3
 8005600:	42b4      	cmp	r4, r6
 8005602:	d803      	bhi.n	800560c <_malloc_r+0x2bc>
 8005604:	1b33      	subs	r3, r6, r4
 8005606:	2b0f      	cmp	r3, #15
 8005608:	f300 8095 	bgt.w	8005736 <_malloc_r+0x3e6>
 800560c:	4a4f      	ldr	r2, [pc, #316]	; (800574c <_malloc_r+0x3fc>)
 800560e:	eb0b 0306 	add.w	r3, fp, r6
 8005612:	6817      	ldr	r7, [r2, #0]
 8005614:	4a4e      	ldr	r2, [pc, #312]	; (8005750 <_malloc_r+0x400>)
 8005616:	3710      	adds	r7, #16
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	4427      	add	r7, r4
 800561c:	3101      	adds	r1, #1
 800561e:	d005      	beq.n	800562c <_malloc_r+0x2dc>
 8005620:	494c      	ldr	r1, [pc, #304]	; (8005754 <_malloc_r+0x404>)
 8005622:	3901      	subs	r1, #1
 8005624:	440f      	add	r7, r1
 8005626:	3101      	adds	r1, #1
 8005628:	4249      	negs	r1, r1
 800562a:	400f      	ands	r7, r1
 800562c:	4639      	mov	r1, r7
 800562e:	4648      	mov	r0, r9
 8005630:	9201      	str	r2, [sp, #4]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	f000 fa42 	bl	8005abc <_sbrk_r>
 8005638:	f1b0 3fff 	cmp.w	r0, #4294967295
 800563c:	4680      	mov	r8, r0
 800563e:	d055      	beq.n	80056ec <_malloc_r+0x39c>
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	9a01      	ldr	r2, [sp, #4]
 8005644:	4283      	cmp	r3, r0
 8005646:	d901      	bls.n	800564c <_malloc_r+0x2fc>
 8005648:	45ab      	cmp	fp, r5
 800564a:	d14f      	bne.n	80056ec <_malloc_r+0x39c>
 800564c:	4842      	ldr	r0, [pc, #264]	; (8005758 <_malloc_r+0x408>)
 800564e:	4543      	cmp	r3, r8
 8005650:	6801      	ldr	r1, [r0, #0]
 8005652:	4682      	mov	sl, r0
 8005654:	eb07 0e01 	add.w	lr, r7, r1
 8005658:	f8c0 e000 	str.w	lr, [r0]
 800565c:	493f      	ldr	r1, [pc, #252]	; (800575c <_malloc_r+0x40c>)
 800565e:	d113      	bne.n	8005688 <_malloc_r+0x338>
 8005660:	420b      	tst	r3, r1
 8005662:	d111      	bne.n	8005688 <_malloc_r+0x338>
 8005664:	68ab      	ldr	r3, [r5, #8]
 8005666:	443e      	add	r6, r7
 8005668:	f046 0601 	orr.w	r6, r6, #1
 800566c:	605e      	str	r6, [r3, #4]
 800566e:	4a3c      	ldr	r2, [pc, #240]	; (8005760 <_malloc_r+0x410>)
 8005670:	f8da 3000 	ldr.w	r3, [sl]
 8005674:	6811      	ldr	r1, [r2, #0]
 8005676:	428b      	cmp	r3, r1
 8005678:	bf88      	it	hi
 800567a:	6013      	strhi	r3, [r2, #0]
 800567c:	4a39      	ldr	r2, [pc, #228]	; (8005764 <_malloc_r+0x414>)
 800567e:	6811      	ldr	r1, [r2, #0]
 8005680:	428b      	cmp	r3, r1
 8005682:	bf88      	it	hi
 8005684:	6013      	strhi	r3, [r2, #0]
 8005686:	e031      	b.n	80056ec <_malloc_r+0x39c>
 8005688:	6810      	ldr	r0, [r2, #0]
 800568a:	3001      	adds	r0, #1
 800568c:	bf1b      	ittet	ne
 800568e:	eba8 0303 	subne.w	r3, r8, r3
 8005692:	4473      	addne	r3, lr
 8005694:	f8c2 8000 	streq.w	r8, [r2]
 8005698:	f8ca 3000 	strne.w	r3, [sl]
 800569c:	f018 0007 	ands.w	r0, r8, #7
 80056a0:	bf1c      	itt	ne
 80056a2:	f1c0 0008 	rsbne	r0, r0, #8
 80056a6:	4480      	addne	r8, r0
 80056a8:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <_malloc_r+0x404>)
 80056aa:	4447      	add	r7, r8
 80056ac:	4418      	add	r0, r3
 80056ae:	400f      	ands	r7, r1
 80056b0:	1bc7      	subs	r7, r0, r7
 80056b2:	4639      	mov	r1, r7
 80056b4:	4648      	mov	r0, r9
 80056b6:	f000 fa01 	bl	8005abc <_sbrk_r>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	bf04      	itt	eq
 80056be:	4640      	moveq	r0, r8
 80056c0:	2700      	moveq	r7, #0
 80056c2:	f8da 3000 	ldr.w	r3, [sl]
 80056c6:	eba0 0008 	sub.w	r0, r0, r8
 80056ca:	443b      	add	r3, r7
 80056cc:	4407      	add	r7, r0
 80056ce:	f047 0701 	orr.w	r7, r7, #1
 80056d2:	45ab      	cmp	fp, r5
 80056d4:	f8c5 8008 	str.w	r8, [r5, #8]
 80056d8:	f8ca 3000 	str.w	r3, [sl]
 80056dc:	f8c8 7004 	str.w	r7, [r8, #4]
 80056e0:	d0c5      	beq.n	800566e <_malloc_r+0x31e>
 80056e2:	2e0f      	cmp	r6, #15
 80056e4:	d810      	bhi.n	8005708 <_malloc_r+0x3b8>
 80056e6:	2301      	movs	r3, #1
 80056e8:	f8c8 3004 	str.w	r3, [r8, #4]
 80056ec:	68ab      	ldr	r3, [r5, #8]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	f022 0203 	bic.w	r2, r2, #3
 80056f4:	4294      	cmp	r4, r2
 80056f6:	eba2 0304 	sub.w	r3, r2, r4
 80056fa:	d801      	bhi.n	8005700 <_malloc_r+0x3b0>
 80056fc:	2b0f      	cmp	r3, #15
 80056fe:	dc1a      	bgt.n	8005736 <_malloc_r+0x3e6>
 8005700:	4648      	mov	r0, r9
 8005702:	f000 f84b 	bl	800579c <__malloc_unlock>
 8005706:	e630      	b.n	800536a <_malloc_r+0x1a>
 8005708:	2205      	movs	r2, #5
 800570a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800570e:	3e0c      	subs	r6, #12
 8005710:	f026 0607 	bic.w	r6, r6, #7
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	4333      	orrs	r3, r6
 800571a:	f8cb 3004 	str.w	r3, [fp, #4]
 800571e:	2e0f      	cmp	r6, #15
 8005720:	eb0b 0306 	add.w	r3, fp, r6
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	d9a1      	bls.n	800566e <_malloc_r+0x31e>
 800572a:	f10b 0108 	add.w	r1, fp, #8
 800572e:	4648      	mov	r0, r9
 8005730:	f000 fa2a 	bl	8005b88 <_free_r>
 8005734:	e79b      	b.n	800566e <_malloc_r+0x31e>
 8005736:	68ae      	ldr	r6, [r5, #8]
 8005738:	f044 0201 	orr.w	r2, r4, #1
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	4434      	add	r4, r6
 8005742:	6072      	str	r2, [r6, #4]
 8005744:	60ac      	str	r4, [r5, #8]
 8005746:	6063      	str	r3, [r4, #4]
 8005748:	e634      	b.n	80053b4 <_malloc_r+0x64>
 800574a:	bf00      	nop
 800574c:	20002884 	.word	0x20002884
 8005750:	20000508 	.word	0x20000508
 8005754:	00001000 	.word	0x00001000
 8005758:	20002854 	.word	0x20002854
 800575c:	00000fff 	.word	0x00000fff
 8005760:	2000287c 	.word	0x2000287c
 8005764:	20002880 	.word	0x20002880

08005768 <memcpy>:
 8005768:	b510      	push	{r4, lr}
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	440a      	add	r2, r1
 800576e:	4291      	cmp	r1, r2
 8005770:	d100      	bne.n	8005774 <memcpy+0xc>
 8005772:	bd10      	pop	{r4, pc}
 8005774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577c:	e7f7      	b.n	800576e <memcpy+0x6>

0800577e <memset>:
 800577e:	4603      	mov	r3, r0
 8005780:	4402      	add	r2, r0
 8005782:	4293      	cmp	r3, r2
 8005784:	d100      	bne.n	8005788 <memset+0xa>
 8005786:	4770      	bx	lr
 8005788:	f803 1b01 	strb.w	r1, [r3], #1
 800578c:	e7f9      	b.n	8005782 <memset+0x4>
	...

08005790 <__malloc_lock>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__malloc_lock+0x8>)
 8005792:	f000 bab5 	b.w	8005d00 <__retarget_lock_acquire_recursive>
 8005796:	bf00      	nop
 8005798:	20002890 	.word	0x20002890

0800579c <__malloc_unlock>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__malloc_unlock+0x8>)
 800579e:	f000 bab0 	b.w	8005d02 <__retarget_lock_release_recursive>
 80057a2:	bf00      	nop
 80057a4:	20002890 	.word	0x20002890

080057a8 <realloc>:
 80057a8:	4b02      	ldr	r3, [pc, #8]	; (80057b4 <realloc+0xc>)
 80057aa:	460a      	mov	r2, r1
 80057ac:	4601      	mov	r1, r0
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f000 b802 	b.w	80057b8 <_realloc_r>
 80057b4:	2000000c 	.word	0x2000000c

080057b8 <_realloc_r>:
 80057b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4682      	mov	sl, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	b929      	cbnz	r1, 80057ce <_realloc_r+0x16>
 80057c2:	4611      	mov	r1, r2
 80057c4:	b003      	add	sp, #12
 80057c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f7ff bdc1 	b.w	8005350 <_malloc_r>
 80057ce:	9201      	str	r2, [sp, #4]
 80057d0:	f7ff ffde 	bl	8005790 <__malloc_lock>
 80057d4:	9a01      	ldr	r2, [sp, #4]
 80057d6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80057da:	f102 080b 	add.w	r8, r2, #11
 80057de:	f1b8 0f16 	cmp.w	r8, #22
 80057e2:	f1a4 0908 	sub.w	r9, r4, #8
 80057e6:	f025 0603 	bic.w	r6, r5, #3
 80057ea:	d90a      	bls.n	8005802 <_realloc_r+0x4a>
 80057ec:	f038 0807 	bics.w	r8, r8, #7
 80057f0:	d509      	bpl.n	8005806 <_realloc_r+0x4e>
 80057f2:	230c      	movs	r3, #12
 80057f4:	2700      	movs	r7, #0
 80057f6:	f8ca 3000 	str.w	r3, [sl]
 80057fa:	4638      	mov	r0, r7
 80057fc:	b003      	add	sp, #12
 80057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	f04f 0810 	mov.w	r8, #16
 8005806:	4590      	cmp	r8, r2
 8005808:	d3f3      	bcc.n	80057f2 <_realloc_r+0x3a>
 800580a:	45b0      	cmp	r8, r6
 800580c:	f340 8148 	ble.w	8005aa0 <_realloc_r+0x2e8>
 8005810:	4ba9      	ldr	r3, [pc, #676]	; (8005ab8 <_realloc_r+0x300>)
 8005812:	eb09 0106 	add.w	r1, r9, r6
 8005816:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800581a:	469b      	mov	fp, r3
 800581c:	4571      	cmp	r1, lr
 800581e:	684b      	ldr	r3, [r1, #4]
 8005820:	d005      	beq.n	800582e <_realloc_r+0x76>
 8005822:	f023 0001 	bic.w	r0, r3, #1
 8005826:	4408      	add	r0, r1
 8005828:	6840      	ldr	r0, [r0, #4]
 800582a:	07c7      	lsls	r7, r0, #31
 800582c:	d447      	bmi.n	80058be <_realloc_r+0x106>
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	4571      	cmp	r1, lr
 8005834:	eb06 0703 	add.w	r7, r6, r3
 8005838:	d119      	bne.n	800586e <_realloc_r+0xb6>
 800583a:	f108 0010 	add.w	r0, r8, #16
 800583e:	4287      	cmp	r7, r0
 8005840:	db3f      	blt.n	80058c2 <_realloc_r+0x10a>
 8005842:	eba7 0708 	sub.w	r7, r7, r8
 8005846:	eb09 0308 	add.w	r3, r9, r8
 800584a:	f047 0701 	orr.w	r7, r7, #1
 800584e:	f8cb 3008 	str.w	r3, [fp, #8]
 8005852:	605f      	str	r7, [r3, #4]
 8005854:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005858:	4650      	mov	r0, sl
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	ea43 0308 	orr.w	r3, r3, r8
 8005862:	f844 3c04 	str.w	r3, [r4, #-4]
 8005866:	f7ff ff99 	bl	800579c <__malloc_unlock>
 800586a:	4627      	mov	r7, r4
 800586c:	e7c5      	b.n	80057fa <_realloc_r+0x42>
 800586e:	45b8      	cmp	r8, r7
 8005870:	dc27      	bgt.n	80058c2 <_realloc_r+0x10a>
 8005872:	68cb      	ldr	r3, [r1, #12]
 8005874:	688a      	ldr	r2, [r1, #8]
 8005876:	60d3      	str	r3, [r2, #12]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	eba7 0008 	sub.w	r0, r7, r8
 800587e:	280f      	cmp	r0, #15
 8005880:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005884:	eb09 0207 	add.w	r2, r9, r7
 8005888:	f240 810c 	bls.w	8005aa4 <_realloc_r+0x2ec>
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	eb09 0108 	add.w	r1, r9, r8
 8005894:	ea43 0308 	orr.w	r3, r3, r8
 8005898:	f040 0001 	orr.w	r0, r0, #1
 800589c:	f8c9 3004 	str.w	r3, [r9, #4]
 80058a0:	6048      	str	r0, [r1, #4]
 80058a2:	6853      	ldr	r3, [r2, #4]
 80058a4:	3108      	adds	r1, #8
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6053      	str	r3, [r2, #4]
 80058ac:	4650      	mov	r0, sl
 80058ae:	f000 f96b 	bl	8005b88 <_free_r>
 80058b2:	4650      	mov	r0, sl
 80058b4:	f7ff ff72 	bl	800579c <__malloc_unlock>
 80058b8:	f109 0708 	add.w	r7, r9, #8
 80058bc:	e79d      	b.n	80057fa <_realloc_r+0x42>
 80058be:	2300      	movs	r3, #0
 80058c0:	4619      	mov	r1, r3
 80058c2:	07e8      	lsls	r0, r5, #31
 80058c4:	f100 8085 	bmi.w	80059d2 <_realloc_r+0x21a>
 80058c8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80058cc:	eba9 0505 	sub.w	r5, r9, r5
 80058d0:	6868      	ldr	r0, [r5, #4]
 80058d2:	f020 0003 	bic.w	r0, r0, #3
 80058d6:	4430      	add	r0, r6
 80058d8:	2900      	cmp	r1, #0
 80058da:	d077      	beq.n	80059cc <_realloc_r+0x214>
 80058dc:	4571      	cmp	r1, lr
 80058de:	d151      	bne.n	8005984 <_realloc_r+0x1cc>
 80058e0:	4403      	add	r3, r0
 80058e2:	f108 0110 	add.w	r1, r8, #16
 80058e6:	428b      	cmp	r3, r1
 80058e8:	db70      	blt.n	80059cc <_realloc_r+0x214>
 80058ea:	462f      	mov	r7, r5
 80058ec:	68ea      	ldr	r2, [r5, #12]
 80058ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80058f2:	60ca      	str	r2, [r1, #12]
 80058f4:	6091      	str	r1, [r2, #8]
 80058f6:	1f32      	subs	r2, r6, #4
 80058f8:	2a24      	cmp	r2, #36	; 0x24
 80058fa:	d83c      	bhi.n	8005976 <_realloc_r+0x1be>
 80058fc:	2a13      	cmp	r2, #19
 80058fe:	d937      	bls.n	8005970 <_realloc_r+0x1b8>
 8005900:	6821      	ldr	r1, [r4, #0]
 8005902:	2a1b      	cmp	r2, #27
 8005904:	60a9      	str	r1, [r5, #8]
 8005906:	6861      	ldr	r1, [r4, #4]
 8005908:	60e9      	str	r1, [r5, #12]
 800590a:	d81c      	bhi.n	8005946 <_realloc_r+0x18e>
 800590c:	f105 0210 	add.w	r2, r5, #16
 8005910:	f104 0108 	add.w	r1, r4, #8
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	6010      	str	r0, [r2, #0]
 8005918:	6848      	ldr	r0, [r1, #4]
 800591a:	6050      	str	r0, [r2, #4]
 800591c:	6889      	ldr	r1, [r1, #8]
 800591e:	6091      	str	r1, [r2, #8]
 8005920:	eba3 0308 	sub.w	r3, r3, r8
 8005924:	eb05 0208 	add.w	r2, r5, r8
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	f8cb 2008 	str.w	r2, [fp, #8]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	686b      	ldr	r3, [r5, #4]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	ea43 0308 	orr.w	r3, r3, r8
 800593c:	606b      	str	r3, [r5, #4]
 800593e:	4650      	mov	r0, sl
 8005940:	f7ff ff2c 	bl	800579c <__malloc_unlock>
 8005944:	e759      	b.n	80057fa <_realloc_r+0x42>
 8005946:	68a1      	ldr	r1, [r4, #8]
 8005948:	2a24      	cmp	r2, #36	; 0x24
 800594a:	6129      	str	r1, [r5, #16]
 800594c:	68e1      	ldr	r1, [r4, #12]
 800594e:	bf18      	it	ne
 8005950:	f105 0218 	addne.w	r2, r5, #24
 8005954:	6169      	str	r1, [r5, #20]
 8005956:	bf09      	itett	eq
 8005958:	6922      	ldreq	r2, [r4, #16]
 800595a:	f104 0110 	addne.w	r1, r4, #16
 800595e:	61aa      	streq	r2, [r5, #24]
 8005960:	6960      	ldreq	r0, [r4, #20]
 8005962:	bf02      	ittt	eq
 8005964:	f105 0220 	addeq.w	r2, r5, #32
 8005968:	f104 0118 	addeq.w	r1, r4, #24
 800596c:	61e8      	streq	r0, [r5, #28]
 800596e:	e7d1      	b.n	8005914 <_realloc_r+0x15c>
 8005970:	463a      	mov	r2, r7
 8005972:	4621      	mov	r1, r4
 8005974:	e7ce      	b.n	8005914 <_realloc_r+0x15c>
 8005976:	4621      	mov	r1, r4
 8005978:	4638      	mov	r0, r7
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	f000 f9c2 	bl	8005d04 <memmove>
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	e7cd      	b.n	8005920 <_realloc_r+0x168>
 8005984:	18c7      	adds	r7, r0, r3
 8005986:	45b8      	cmp	r8, r7
 8005988:	dc20      	bgt.n	80059cc <_realloc_r+0x214>
 800598a:	68cb      	ldr	r3, [r1, #12]
 800598c:	688a      	ldr	r2, [r1, #8]
 800598e:	60d3      	str	r3, [r2, #12]
 8005990:	609a      	str	r2, [r3, #8]
 8005992:	4628      	mov	r0, r5
 8005994:	68eb      	ldr	r3, [r5, #12]
 8005996:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800599a:	60d3      	str	r3, [r2, #12]
 800599c:	609a      	str	r2, [r3, #8]
 800599e:	1f32      	subs	r2, r6, #4
 80059a0:	2a24      	cmp	r2, #36	; 0x24
 80059a2:	d843      	bhi.n	8005a2c <_realloc_r+0x274>
 80059a4:	2a13      	cmp	r2, #19
 80059a6:	d93f      	bls.n	8005a28 <_realloc_r+0x270>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	2a1b      	cmp	r2, #27
 80059ac:	60ab      	str	r3, [r5, #8]
 80059ae:	6863      	ldr	r3, [r4, #4]
 80059b0:	60eb      	str	r3, [r5, #12]
 80059b2:	d824      	bhi.n	80059fe <_realloc_r+0x246>
 80059b4:	f105 0010 	add.w	r0, r5, #16
 80059b8:	f104 0308 	add.w	r3, r4, #8
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	6002      	str	r2, [r0, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	6042      	str	r2, [r0, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	6083      	str	r3, [r0, #8]
 80059c8:	46a9      	mov	r9, r5
 80059ca:	e756      	b.n	800587a <_realloc_r+0xc2>
 80059cc:	4580      	cmp	r8, r0
 80059ce:	4607      	mov	r7, r0
 80059d0:	dddf      	ble.n	8005992 <_realloc_r+0x1da>
 80059d2:	4611      	mov	r1, r2
 80059d4:	4650      	mov	r0, sl
 80059d6:	f7ff fcbb 	bl	8005350 <_malloc_r>
 80059da:	4607      	mov	r7, r0
 80059dc:	2800      	cmp	r0, #0
 80059de:	d0ae      	beq.n	800593e <_realloc_r+0x186>
 80059e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80059e4:	f1a0 0208 	sub.w	r2, r0, #8
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	444b      	add	r3, r9
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d120      	bne.n	8005a34 <_realloc_r+0x27c>
 80059f2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80059f6:	f027 0703 	bic.w	r7, r7, #3
 80059fa:	4437      	add	r7, r6
 80059fc:	e73d      	b.n	800587a <_realloc_r+0xc2>
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	2a24      	cmp	r2, #36	; 0x24
 8005a02:	612b      	str	r3, [r5, #16]
 8005a04:	68e3      	ldr	r3, [r4, #12]
 8005a06:	bf18      	it	ne
 8005a08:	f105 0018 	addne.w	r0, r5, #24
 8005a0c:	616b      	str	r3, [r5, #20]
 8005a0e:	bf09      	itett	eq
 8005a10:	6923      	ldreq	r3, [r4, #16]
 8005a12:	f104 0310 	addne.w	r3, r4, #16
 8005a16:	61ab      	streq	r3, [r5, #24]
 8005a18:	6962      	ldreq	r2, [r4, #20]
 8005a1a:	bf02      	ittt	eq
 8005a1c:	f105 0020 	addeq.w	r0, r5, #32
 8005a20:	f104 0318 	addeq.w	r3, r4, #24
 8005a24:	61ea      	streq	r2, [r5, #28]
 8005a26:	e7c9      	b.n	80059bc <_realloc_r+0x204>
 8005a28:	4623      	mov	r3, r4
 8005a2a:	e7c7      	b.n	80059bc <_realloc_r+0x204>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	f000 f969 	bl	8005d04 <memmove>
 8005a32:	e7c9      	b.n	80059c8 <_realloc_r+0x210>
 8005a34:	1f32      	subs	r2, r6, #4
 8005a36:	2a24      	cmp	r2, #36	; 0x24
 8005a38:	d82e      	bhi.n	8005a98 <_realloc_r+0x2e0>
 8005a3a:	2a13      	cmp	r2, #19
 8005a3c:	d929      	bls.n	8005a92 <_realloc_r+0x2da>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	2a1b      	cmp	r2, #27
 8005a42:	6003      	str	r3, [r0, #0]
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	6043      	str	r3, [r0, #4]
 8005a48:	d80e      	bhi.n	8005a68 <_realloc_r+0x2b0>
 8005a4a:	f100 0308 	add.w	r3, r0, #8
 8005a4e:	f104 0208 	add.w	r2, r4, #8
 8005a52:	6811      	ldr	r1, [r2, #0]
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	6851      	ldr	r1, [r2, #4]
 8005a58:	6059      	str	r1, [r3, #4]
 8005a5a:	6892      	ldr	r2, [r2, #8]
 8005a5c:	609a      	str	r2, [r3, #8]
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4650      	mov	r0, sl
 8005a62:	f000 f891 	bl	8005b88 <_free_r>
 8005a66:	e76a      	b.n	800593e <_realloc_r+0x186>
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	2a24      	cmp	r2, #36	; 0x24
 8005a6c:	6083      	str	r3, [r0, #8]
 8005a6e:	68e3      	ldr	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	f104 0210 	addne.w	r2, r4, #16
 8005a76:	60c3      	str	r3, [r0, #12]
 8005a78:	bf09      	itett	eq
 8005a7a:	6923      	ldreq	r3, [r4, #16]
 8005a7c:	f100 0310 	addne.w	r3, r0, #16
 8005a80:	6103      	streq	r3, [r0, #16]
 8005a82:	6961      	ldreq	r1, [r4, #20]
 8005a84:	bf02      	ittt	eq
 8005a86:	f100 0318 	addeq.w	r3, r0, #24
 8005a8a:	f104 0218 	addeq.w	r2, r4, #24
 8005a8e:	6141      	streq	r1, [r0, #20]
 8005a90:	e7df      	b.n	8005a52 <_realloc_r+0x29a>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4622      	mov	r2, r4
 8005a96:	e7dc      	b.n	8005a52 <_realloc_r+0x29a>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f000 f933 	bl	8005d04 <memmove>
 8005a9e:	e7de      	b.n	8005a5e <_realloc_r+0x2a6>
 8005aa0:	4637      	mov	r7, r6
 8005aa2:	e6ea      	b.n	800587a <_realloc_r+0xc2>
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	431f      	orrs	r7, r3
 8005aaa:	f8c9 7004 	str.w	r7, [r9, #4]
 8005aae:	6853      	ldr	r3, [r2, #4]
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6053      	str	r3, [r2, #4]
 8005ab6:	e6fc      	b.n	80058b2 <_realloc_r+0xfa>
 8005ab8:	20000100 	.word	0x20000100

08005abc <_sbrk_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4c05      	ldr	r4, [pc, #20]	; (8005ad8 <_sbrk_r+0x1c>)
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	f7ff fa74 	bl	8004fb4 <_sbrk>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_sbrk_r+0x1a>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_sbrk_r+0x1a>
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20002898 	.word	0x20002898

08005adc <_malloc_trim_r>:
 8005adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae0:	4689      	mov	r9, r1
 8005ae2:	4f25      	ldr	r7, [pc, #148]	; (8005b78 <_malloc_trim_r+0x9c>)
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	f7ff fe53 	bl	8005790 <__malloc_lock>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005b84 <_malloc_trim_r+0xa8>
 8005af0:	685d      	ldr	r5, [r3, #4]
 8005af2:	f1a8 0411 	sub.w	r4, r8, #17
 8005af6:	f025 0503 	bic.w	r5, r5, #3
 8005afa:	eba4 0409 	sub.w	r4, r4, r9
 8005afe:	442c      	add	r4, r5
 8005b00:	fbb4 f4f8 	udiv	r4, r4, r8
 8005b04:	3c01      	subs	r4, #1
 8005b06:	fb08 f404 	mul.w	r4, r8, r4
 8005b0a:	4544      	cmp	r4, r8
 8005b0c:	da05      	bge.n	8005b1a <_malloc_trim_r+0x3e>
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f7ff fe44 	bl	800579c <__malloc_unlock>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7ff ffcd 	bl	8005abc <_sbrk_r>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	442b      	add	r3, r5
 8005b26:	4298      	cmp	r0, r3
 8005b28:	d1f1      	bne.n	8005b0e <_malloc_trim_r+0x32>
 8005b2a:	4261      	negs	r1, r4
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff ffc5 	bl	8005abc <_sbrk_r>
 8005b32:	3001      	adds	r0, #1
 8005b34:	d110      	bne.n	8005b58 <_malloc_trim_r+0x7c>
 8005b36:	2100      	movs	r1, #0
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f7ff ffbf 	bl	8005abc <_sbrk_r>
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	1a83      	subs	r3, r0, r2
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	dde3      	ble.n	8005b0e <_malloc_trim_r+0x32>
 8005b46:	490d      	ldr	r1, [pc, #52]	; (8005b7c <_malloc_trim_r+0xa0>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6809      	ldr	r1, [r1, #0]
 8005b4e:	6053      	str	r3, [r2, #4]
 8005b50:	1a40      	subs	r0, r0, r1
 8005b52:	490b      	ldr	r1, [pc, #44]	; (8005b80 <_malloc_trim_r+0xa4>)
 8005b54:	6008      	str	r0, [r1, #0]
 8005b56:	e7da      	b.n	8005b0e <_malloc_trim_r+0x32>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <_malloc_trim_r+0xa4>)
 8005b5c:	1b2d      	subs	r5, r5, r4
 8005b5e:	f045 0501 	orr.w	r5, r5, #1
 8005b62:	605d      	str	r5, [r3, #4]
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	4630      	mov	r0, r6
 8005b68:	1b1c      	subs	r4, r3, r4
 8005b6a:	6014      	str	r4, [r2, #0]
 8005b6c:	f7ff fe16 	bl	800579c <__malloc_unlock>
 8005b70:	2001      	movs	r0, #1
 8005b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b76:	bf00      	nop
 8005b78:	20000100 	.word	0x20000100
 8005b7c:	20000508 	.word	0x20000508
 8005b80:	20002854 	.word	0x20002854
 8005b84:	00001000 	.word	0x00001000

08005b88 <_free_r>:
 8005b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	4688      	mov	r8, r1
 8005b90:	2900      	cmp	r1, #0
 8005b92:	f000 80ab 	beq.w	8005cec <_free_r+0x164>
 8005b96:	f7ff fdfb 	bl	8005790 <__malloc_lock>
 8005b9a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005b9e:	4d54      	ldr	r5, [pc, #336]	; (8005cf0 <_free_r+0x168>)
 8005ba0:	f022 0001 	bic.w	r0, r2, #1
 8005ba4:	f1a8 0308 	sub.w	r3, r8, #8
 8005ba8:	181f      	adds	r7, r3, r0
 8005baa:	68a9      	ldr	r1, [r5, #8]
 8005bac:	687e      	ldr	r6, [r7, #4]
 8005bae:	428f      	cmp	r7, r1
 8005bb0:	f026 0603 	bic.w	r6, r6, #3
 8005bb4:	f002 0201 	and.w	r2, r2, #1
 8005bb8:	d11b      	bne.n	8005bf2 <_free_r+0x6a>
 8005bba:	4430      	add	r0, r6
 8005bbc:	b93a      	cbnz	r2, 8005bce <_free_r+0x46>
 8005bbe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	6899      	ldr	r1, [r3, #8]
 8005bc6:	4410      	add	r0, r2
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	60ca      	str	r2, [r1, #12]
 8005bcc:	6091      	str	r1, [r2, #8]
 8005bce:	f040 0201 	orr.w	r2, r0, #1
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	60ab      	str	r3, [r5, #8]
 8005bd6:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <_free_r+0x16c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	d304      	bcc.n	8005be8 <_free_r+0x60>
 8005bde:	4b46      	ldr	r3, [pc, #280]	; (8005cf8 <_free_r+0x170>)
 8005be0:	4620      	mov	r0, r4
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	f7ff ff7a 	bl	8005adc <_malloc_trim_r>
 8005be8:	4620      	mov	r0, r4
 8005bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bee:	f7ff bdd5 	b.w	800579c <__malloc_unlock>
 8005bf2:	607e      	str	r6, [r7, #4]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d139      	bne.n	8005c6c <_free_r+0xe4>
 8005bf8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005bfc:	f105 0e08 	add.w	lr, r5, #8
 8005c00:	1a5b      	subs	r3, r3, r1
 8005c02:	4408      	add	r0, r1
 8005c04:	6899      	ldr	r1, [r3, #8]
 8005c06:	4571      	cmp	r1, lr
 8005c08:	d032      	beq.n	8005c70 <_free_r+0xe8>
 8005c0a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005c0e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005c12:	f8ce 1008 	str.w	r1, [lr, #8]
 8005c16:	19b9      	adds	r1, r7, r6
 8005c18:	6849      	ldr	r1, [r1, #4]
 8005c1a:	07c9      	lsls	r1, r1, #31
 8005c1c:	d40a      	bmi.n	8005c34 <_free_r+0xac>
 8005c1e:	4430      	add	r0, r6
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	bb3a      	cbnz	r2, 8005c74 <_free_r+0xec>
 8005c24:	4e35      	ldr	r6, [pc, #212]	; (8005cfc <_free_r+0x174>)
 8005c26:	42b1      	cmp	r1, r6
 8005c28:	d124      	bne.n	8005c74 <_free_r+0xec>
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	616b      	str	r3, [r5, #20]
 8005c2e:	612b      	str	r3, [r5, #16]
 8005c30:	60d9      	str	r1, [r3, #12]
 8005c32:	6099      	str	r1, [r3, #8]
 8005c34:	f040 0101 	orr.w	r1, r0, #1
 8005c38:	6059      	str	r1, [r3, #4]
 8005c3a:	5018      	str	r0, [r3, r0]
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	d1d3      	bne.n	8005be8 <_free_r+0x60>
 8005c40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005c44:	d21a      	bcs.n	8005c7c <_free_r+0xf4>
 8005c46:	2201      	movs	r2, #1
 8005c48:	08c0      	lsrs	r0, r0, #3
 8005c4a:	1081      	asrs	r1, r0, #2
 8005c4c:	408a      	lsls	r2, r1
 8005c4e:	6869      	ldr	r1, [r5, #4]
 8005c50:	3001      	adds	r0, #1
 8005c52:	430a      	orrs	r2, r1
 8005c54:	606a      	str	r2, [r5, #4]
 8005c56:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005c5a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005c5e:	3a08      	subs	r2, #8
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	6099      	str	r1, [r3, #8]
 8005c64:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005c68:	60cb      	str	r3, [r1, #12]
 8005c6a:	e7bd      	b.n	8005be8 <_free_r+0x60>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	e7d2      	b.n	8005c16 <_free_r+0x8e>
 8005c70:	2201      	movs	r2, #1
 8005c72:	e7d0      	b.n	8005c16 <_free_r+0x8e>
 8005c74:	68fe      	ldr	r6, [r7, #12]
 8005c76:	60ce      	str	r6, [r1, #12]
 8005c78:	60b1      	str	r1, [r6, #8]
 8005c7a:	e7db      	b.n	8005c34 <_free_r+0xac>
 8005c7c:	0a42      	lsrs	r2, r0, #9
 8005c7e:	2a04      	cmp	r2, #4
 8005c80:	d813      	bhi.n	8005caa <_free_r+0x122>
 8005c82:	0982      	lsrs	r2, r0, #6
 8005c84:	3238      	adds	r2, #56	; 0x38
 8005c86:	1c51      	adds	r1, r2, #1
 8005c88:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005c8c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005c90:	428e      	cmp	r6, r1
 8005c92:	d124      	bne.n	8005cde <_free_r+0x156>
 8005c94:	2001      	movs	r0, #1
 8005c96:	1092      	asrs	r2, r2, #2
 8005c98:	fa00 f202 	lsl.w	r2, r0, r2
 8005c9c:	6868      	ldr	r0, [r5, #4]
 8005c9e:	4302      	orrs	r2, r0
 8005ca0:	606a      	str	r2, [r5, #4]
 8005ca2:	60de      	str	r6, [r3, #12]
 8005ca4:	6099      	str	r1, [r3, #8]
 8005ca6:	60b3      	str	r3, [r6, #8]
 8005ca8:	e7de      	b.n	8005c68 <_free_r+0xe0>
 8005caa:	2a14      	cmp	r2, #20
 8005cac:	d801      	bhi.n	8005cb2 <_free_r+0x12a>
 8005cae:	325b      	adds	r2, #91	; 0x5b
 8005cb0:	e7e9      	b.n	8005c86 <_free_r+0xfe>
 8005cb2:	2a54      	cmp	r2, #84	; 0x54
 8005cb4:	d802      	bhi.n	8005cbc <_free_r+0x134>
 8005cb6:	0b02      	lsrs	r2, r0, #12
 8005cb8:	326e      	adds	r2, #110	; 0x6e
 8005cba:	e7e4      	b.n	8005c86 <_free_r+0xfe>
 8005cbc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005cc0:	d802      	bhi.n	8005cc8 <_free_r+0x140>
 8005cc2:	0bc2      	lsrs	r2, r0, #15
 8005cc4:	3277      	adds	r2, #119	; 0x77
 8005cc6:	e7de      	b.n	8005c86 <_free_r+0xfe>
 8005cc8:	f240 5154 	movw	r1, #1364	; 0x554
 8005ccc:	428a      	cmp	r2, r1
 8005cce:	bf9a      	itte	ls
 8005cd0:	0c82      	lsrls	r2, r0, #18
 8005cd2:	327c      	addls	r2, #124	; 0x7c
 8005cd4:	227e      	movhi	r2, #126	; 0x7e
 8005cd6:	e7d6      	b.n	8005c86 <_free_r+0xfe>
 8005cd8:	6889      	ldr	r1, [r1, #8]
 8005cda:	428e      	cmp	r6, r1
 8005cdc:	d004      	beq.n	8005ce8 <_free_r+0x160>
 8005cde:	684a      	ldr	r2, [r1, #4]
 8005ce0:	f022 0203 	bic.w	r2, r2, #3
 8005ce4:	4290      	cmp	r0, r2
 8005ce6:	d3f7      	bcc.n	8005cd8 <_free_r+0x150>
 8005ce8:	68ce      	ldr	r6, [r1, #12]
 8005cea:	e7da      	b.n	8005ca2 <_free_r+0x11a>
 8005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf0:	20000100 	.word	0x20000100
 8005cf4:	2000050c 	.word	0x2000050c
 8005cf8:	20002884 	.word	0x20002884
 8005cfc:	20000108 	.word	0x20000108

08005d00 <__retarget_lock_acquire_recursive>:
 8005d00:	4770      	bx	lr

08005d02 <__retarget_lock_release_recursive>:
 8005d02:	4770      	bx	lr

08005d04 <memmove>:
 8005d04:	4288      	cmp	r0, r1
 8005d06:	b510      	push	{r4, lr}
 8005d08:	eb01 0302 	add.w	r3, r1, r2
 8005d0c:	d803      	bhi.n	8005d16 <memmove+0x12>
 8005d0e:	1e42      	subs	r2, r0, #1
 8005d10:	4299      	cmp	r1, r3
 8005d12:	d10c      	bne.n	8005d2e <memmove+0x2a>
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	4298      	cmp	r0, r3
 8005d18:	d2f9      	bcs.n	8005d0e <memmove+0xa>
 8005d1a:	1881      	adds	r1, r0, r2
 8005d1c:	1ad2      	subs	r2, r2, r3
 8005d1e:	42d3      	cmn	r3, r2
 8005d20:	d100      	bne.n	8005d24 <memmove+0x20>
 8005d22:	bd10      	pop	{r4, pc}
 8005d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d2c:	e7f7      	b.n	8005d1e <memmove+0x1a>
 8005d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d36:	e7eb      	b.n	8005d10 <memmove+0xc>

08005d38 <abort>:
 8005d38:	b508      	push	{r3, lr}
 8005d3a:	2006      	movs	r0, #6
 8005d3c:	f000 f82c 	bl	8005d98 <raise>
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7ff f931 	bl	8004fa8 <_exit>

08005d46 <_raise_r>:
 8005d46:	291f      	cmp	r1, #31
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	460d      	mov	r5, r1
 8005d4e:	d904      	bls.n	8005d5a <_raise_r+0x14>
 8005d50:	2316      	movs	r3, #22
 8005d52:	6003      	str	r3, [r0, #0]
 8005d54:	f04f 30ff 	mov.w	r0, #4294967295
 8005d58:	bd38      	pop	{r3, r4, r5, pc}
 8005d5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d5c:	b112      	cbz	r2, 8005d64 <_raise_r+0x1e>
 8005d5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d62:	b94b      	cbnz	r3, 8005d78 <_raise_r+0x32>
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 f831 	bl	8005dcc <_getpid_r>
 8005d6a:	462a      	mov	r2, r5
 8005d6c:	4601      	mov	r1, r0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d74:	f000 b818 	b.w	8005da8 <_kill_r>
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d00a      	beq.n	8005d92 <_raise_r+0x4c>
 8005d7c:	1c59      	adds	r1, r3, #1
 8005d7e:	d103      	bne.n	8005d88 <_raise_r+0x42>
 8005d80:	2316      	movs	r3, #22
 8005d82:	6003      	str	r3, [r0, #0]
 8005d84:	2001      	movs	r0, #1
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	2400      	movs	r4, #0
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d90:	4798      	blx	r3
 8005d92:	2000      	movs	r0, #0
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
	...

08005d98 <raise>:
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <raise+0xc>)
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f7ff bfd2 	b.w	8005d46 <_raise_r>
 8005da2:	bf00      	nop
 8005da4:	2000000c 	.word	0x2000000c

08005da8 <_kill_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	2300      	movs	r3, #0
 8005dac:	4c06      	ldr	r4, [pc, #24]	; (8005dc8 <_kill_r+0x20>)
 8005dae:	4605      	mov	r5, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	f7ff f8ef 	bl	8004f98 <_kill>
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d102      	bne.n	8005dc4 <_kill_r+0x1c>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	b103      	cbz	r3, 8005dc4 <_kill_r+0x1c>
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20002898 	.word	0x20002898

08005dcc <_getpid_r>:
 8005dcc:	f7ff b8e2 	b.w	8004f94 <_getpid>

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr
