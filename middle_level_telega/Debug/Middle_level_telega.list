
Middle_level_telega.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a318  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  0800a428  0800a428  0001a428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000048  0800b008  0800b008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000188  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800b1d8  0800b1d8  0001b1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800b1e0  0800b1e0  0001b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000510  20000000  0800b1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00002780  20000510  0800b6f4  00020510  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20002c90  0800b6f4  00022c90  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011f4a  00000000  00000000  00020539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000022dd  00000000  00000000  00032483  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000071e7  00000000  00000000  00034760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0003b948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  0003c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000052d4  00000000  00000000  0003cf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005b64  00000000  00000000  00042244  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00047da8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000028c0  00000000  00000000  00047e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000510 	.word	0x20000510
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a410 	.word	0x0800a410

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000514 	.word	0x20000514
 800014c:	0800a410 	.word	0x0800a410

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__gedf2>:
 8000908:	f04f 3cff 	mov.w	ip, #4294967295
 800090c:	e006      	b.n	800091c <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__ledf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	e002      	b.n	800091c <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__cmpdf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800092c:	bf18      	it	ne
 800092e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000932:	d01b      	beq.n	800096c <__cmpdf2+0x54>
 8000934:	b001      	add	sp, #4
 8000936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093a:	bf0c      	ite	eq
 800093c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000940:	ea91 0f03 	teqne	r1, r3
 8000944:	bf02      	ittt	eq
 8000946:	ea90 0f02 	teqeq	r0, r2
 800094a:	2000      	moveq	r0, #0
 800094c:	4770      	bxeq	lr
 800094e:	f110 0f00 	cmn.w	r0, #0
 8000952:	ea91 0f03 	teq	r1, r3
 8000956:	bf58      	it	pl
 8000958:	4299      	cmppl	r1, r3
 800095a:	bf08      	it	eq
 800095c:	4290      	cmpeq	r0, r2
 800095e:	bf2c      	ite	cs
 8000960:	17d8      	asrcs	r0, r3, #31
 8000962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000966:	f040 0001 	orr.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d102      	bne.n	800097c <__cmpdf2+0x64>
 8000976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097a:	d107      	bne.n	800098c <__cmpdf2+0x74>
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d1d6      	bne.n	8000934 <__cmpdf2+0x1c>
 8000986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098a:	d0d3      	beq.n	8000934 <__cmpdf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cdrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4610      	mov	r0, r2
 8000998:	4662      	mov	r2, ip
 800099a:	468c      	mov	ip, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	e000      	b.n	80009a4 <__aeabi_cdcmpeq>
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdcmpeq>:
 80009a4:	b501      	push	{r0, lr}
 80009a6:	f7ff ffb7 	bl	8000918 <__cmpdf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd01      	pop	{r0, pc}

080009b4 <__aeabi_dcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cdcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cdcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cdcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffce 	bl	8000994 <__aeabi_cdrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc4 	bl	8000994 <__aeabi_cdrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_d2iz>:
 8000a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a20:	d215      	bcs.n	8000a4e <__aeabi_d2iz+0x36>
 8000a22:	d511      	bpl.n	8000a48 <__aeabi_d2iz+0x30>
 8000a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a2c:	d912      	bls.n	8000a54 <__aeabi_d2iz+0x3c>
 8000a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	bf18      	it	ne
 8000a44:	4240      	negne	r0, r0
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a52:	d105      	bne.n	8000a60 <__aeabi_d2iz+0x48>
 8000a54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	bf08      	it	eq
 8000a5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__gesf2>:
 8000b08:	f04f 3cff 	mov.w	ip, #4294967295
 8000b0c:	e006      	b.n	8000b1c <__cmpsf2+0x4>
 8000b0e:	bf00      	nop

08000b10 <__lesf2>:
 8000b10:	f04f 0c01 	mov.w	ip, #1
 8000b14:	e002      	b.n	8000b1c <__cmpsf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__cmpsf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d011      	beq.n	8000b58 <__cmpsf2+0x40>
 8000b34:	b001      	add	sp, #4
 8000b36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b3a:	bf18      	it	ne
 8000b3c:	ea90 0f01 	teqne	r0, r1
 8000b40:	bf58      	it	pl
 8000b42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b46:	bf88      	it	hi
 8000b48:	17c8      	asrhi	r0, r1, #31
 8000b4a:	bf38      	it	cc
 8000b4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b50:	bf18      	it	ne
 8000b52:	f040 0001 	orrne.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	d102      	bne.n	8000b64 <__cmpsf2+0x4c>
 8000b5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b62:	d105      	bne.n	8000b70 <__cmpsf2+0x58>
 8000b64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b68:	d1e4      	bne.n	8000b34 <__cmpsf2+0x1c>
 8000b6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b6e:	d0e1      	beq.n	8000b34 <__cmpsf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cfrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4661      	mov	r1, ip
 8000b7e:	e7ff      	b.n	8000b80 <__aeabi_cfcmpeq>

08000b80 <__aeabi_cfcmpeq>:
 8000b80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b82:	f7ff ffc9 	bl	8000b18 <__cmpsf2>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	bf48      	it	mi
 8000b8a:	f110 0f00 	cmnmi.w	r0, #0
 8000b8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b90 <__aeabi_fcmpeq>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff fff4 	bl	8000b80 <__aeabi_cfcmpeq>
 8000b98:	bf0c      	ite	eq
 8000b9a:	2001      	moveq	r0, #1
 8000b9c:	2000      	movne	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fcmplt>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffea 	bl	8000b80 <__aeabi_cfcmpeq>
 8000bac:	bf34      	ite	cc
 8000bae:	2001      	movcc	r0, #1
 8000bb0:	2000      	movcs	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmple>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffe0 	bl	8000b80 <__aeabi_cfcmpeq>
 8000bc0:	bf94      	ite	ls
 8000bc2:	2001      	movls	r0, #1
 8000bc4:	2000      	movhi	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmpge>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffd2 	bl	8000b78 <__aeabi_cfrcmple>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpgt>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffc8 	bl	8000b78 <__aeabi_cfrcmple>
 8000be8:	bf34      	ite	cc
 8000bea:	2001      	movcc	r0, #1
 8000bec:	2000      	movcs	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <selfrel_offset31>:
 8000bf4:	6803      	ldr	r3, [r0, #0]
 8000bf6:	005a      	lsls	r2, r3, #1
 8000bf8:	bf4c      	ite	mi
 8000bfa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000c02:	4418      	add	r0, r3
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <search_EIT_table>:
 8000c08:	b361      	cbz	r1, 8000c64 <search_EIT_table+0x5c>
 8000c0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c0e:	f101 3aff 	add.w	sl, r1, #4294967295
 8000c12:	4690      	mov	r8, r2
 8000c14:	4606      	mov	r6, r0
 8000c16:	46d1      	mov	r9, sl
 8000c18:	2700      	movs	r7, #0
 8000c1a:	eb07 0409 	add.w	r4, r7, r9
 8000c1e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000c22:	1064      	asrs	r4, r4, #1
 8000c24:	00e5      	lsls	r5, r4, #3
 8000c26:	1971      	adds	r1, r6, r5
 8000c28:	4608      	mov	r0, r1
 8000c2a:	f7ff ffe3 	bl	8000bf4 <selfrel_offset31>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	4683      	mov	fp, r0
 8000c32:	f105 0008 	add.w	r0, r5, #8
 8000c36:	4430      	add	r0, r6
 8000c38:	d009      	beq.n	8000c4e <search_EIT_table+0x46>
 8000c3a:	f7ff ffdb 	bl	8000bf4 <selfrel_offset31>
 8000c3e:	45c3      	cmp	fp, r8
 8000c40:	f100 30ff 	add.w	r0, r0, #4294967295
 8000c44:	d805      	bhi.n	8000c52 <search_EIT_table+0x4a>
 8000c46:	4540      	cmp	r0, r8
 8000c48:	d209      	bcs.n	8000c5e <search_EIT_table+0x56>
 8000c4a:	1c67      	adds	r7, r4, #1
 8000c4c:	e7e5      	b.n	8000c1a <search_EIT_table+0x12>
 8000c4e:	45c3      	cmp	fp, r8
 8000c50:	d905      	bls.n	8000c5e <search_EIT_table+0x56>
 8000c52:	42a7      	cmp	r7, r4
 8000c54:	d002      	beq.n	8000c5c <search_EIT_table+0x54>
 8000c56:	f104 39ff 	add.w	r9, r4, #4294967295
 8000c5a:	e7de      	b.n	8000c1a <search_EIT_table+0x12>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c64:	4608      	mov	r0, r1
 8000c66:	4770      	bx	lr

08000c68 <__gnu_unwind_get_pr_addr>:
 8000c68:	2801      	cmp	r0, #1
 8000c6a:	d007      	beq.n	8000c7c <__gnu_unwind_get_pr_addr+0x14>
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d007      	beq.n	8000c80 <__gnu_unwind_get_pr_addr+0x18>
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__gnu_unwind_get_pr_addr+0x1c>)
 8000c72:	2800      	cmp	r0, #0
 8000c74:	bf0c      	ite	eq
 8000c76:	4618      	moveq	r0, r3
 8000c78:	2000      	movne	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <__gnu_unwind_get_pr_addr+0x20>)
 8000c7e:	4770      	bx	lr
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <__gnu_unwind_get_pr_addr+0x24>)
 8000c82:	4770      	bx	lr
 8000c84:	08001379 	.word	0x08001379
 8000c88:	0800137d 	.word	0x0800137d
 8000c8c:	08001381 	.word	0x08001381

08000c90 <get_eit_entry>:
 8000c90:	b530      	push	{r4, r5, lr}
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <get_eit_entry+0x98>)
 8000c94:	b083      	sub	sp, #12
 8000c96:	4604      	mov	r4, r0
 8000c98:	1e8d      	subs	r5, r1, #2
 8000c9a:	b373      	cbz	r3, 8000cfa <get_eit_entry+0x6a>
 8000c9c:	a901      	add	r1, sp, #4
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	f3af 8000 	nop.w
 8000ca4:	b318      	cbz	r0, 8000cee <get_eit_entry+0x5e>
 8000ca6:	9901      	ldr	r1, [sp, #4]
 8000ca8:	462a      	mov	r2, r5
 8000caa:	f7ff ffad 	bl	8000c08 <search_EIT_table>
 8000cae:	4601      	mov	r1, r0
 8000cb0:	b1e8      	cbz	r0, 8000cee <get_eit_entry+0x5e>
 8000cb2:	f7ff ff9f 	bl	8000bf4 <selfrel_offset31>
 8000cb6:	684b      	ldr	r3, [r1, #4]
 8000cb8:	64a0      	str	r0, [r4, #72]	; 0x48
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d011      	beq.n	8000ce2 <get_eit_entry+0x52>
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db22      	blt.n	8000d08 <get_eit_entry+0x78>
 8000cc2:	1d08      	adds	r0, r1, #4
 8000cc4:	f7ff ff96 	bl	8000bf4 <selfrel_offset31>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8000cce:	6803      	ldr	r3, [r0, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1e      	blt.n	8000d12 <get_eit_entry+0x82>
 8000cd4:	f7ff ff8e 	bl	8000bf4 <selfrel_offset31>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6120      	str	r0, [r4, #16]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd30      	pop	{r4, r5, pc}
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	6122      	str	r2, [r4, #16]
 8000cea:	b003      	add	sp, #12
 8000cec:	bd30      	pop	{r4, r5, pc}
 8000cee:	2309      	movs	r3, #9
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	6122      	str	r2, [r4, #16]
 8000cf6:	b003      	add	sp, #12
 8000cf8:	bd30      	pop	{r4, r5, pc}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <get_eit_entry+0x9c>)
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <get_eit_entry+0xa0>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	1ac9      	subs	r1, r1, r3
 8000d02:	10c9      	asrs	r1, r1, #3
 8000d04:	9101      	str	r1, [sp, #4]
 8000d06:	e7cf      	b.n	8000ca8 <get_eit_entry+0x18>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	1d08      	adds	r0, r1, #4
 8000d0c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000d0e:	6523      	str	r3, [r4, #80]	; 0x50
 8000d10:	e7dd      	b.n	8000cce <get_eit_entry+0x3e>
 8000d12:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000d16:	f7ff ffa7 	bl	8000c68 <__gnu_unwind_get_pr_addr>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	6120      	str	r0, [r4, #16]
 8000d1e:	bf14      	ite	ne
 8000d20:	2300      	movne	r3, #0
 8000d22:	2309      	moveq	r3, #9
 8000d24:	e7da      	b.n	8000cdc <get_eit_entry+0x4c>
 8000d26:	bf00      	nop
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	0800b050 	.word	0x0800b050
 8000d30:	0800b1d8 	.word	0x0800b1d8

08000d34 <restore_non_core_regs>:
 8000d34:	6803      	ldr	r3, [r0, #0]
 8000d36:	b510      	push	{r4, lr}
 8000d38:	07da      	lsls	r2, r3, #31
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	d406      	bmi.n	8000d4c <restore_non_core_regs+0x18>
 8000d3e:	079b      	lsls	r3, r3, #30
 8000d40:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000d44:	d509      	bpl.n	8000d5a <restore_non_core_regs+0x26>
 8000d46:	f000 fc57 	bl	80015f8 <__gnu_Unwind_Restore_VFP_D>
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	0759      	lsls	r1, r3, #29
 8000d4e:	d509      	bpl.n	8000d64 <restore_non_core_regs+0x30>
 8000d50:	071a      	lsls	r2, r3, #28
 8000d52:	d50e      	bpl.n	8000d72 <restore_non_core_regs+0x3e>
 8000d54:	06db      	lsls	r3, r3, #27
 8000d56:	d513      	bpl.n	8000d80 <restore_non_core_regs+0x4c>
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	f000 fc45 	bl	80015e8 <__gnu_Unwind_Restore_VFP>
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	0759      	lsls	r1, r3, #29
 8000d62:	d4f5      	bmi.n	8000d50 <restore_non_core_regs+0x1c>
 8000d64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000d68:	f000 fc4e 	bl	8001608 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	071a      	lsls	r2, r3, #28
 8000d70:	d4f0      	bmi.n	8000d54 <restore_non_core_regs+0x20>
 8000d72:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000d76:	f000 fc4f 	bl	8001618 <__gnu_Unwind_Restore_WMMXD>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	06db      	lsls	r3, r3, #27
 8000d7e:	d4eb      	bmi.n	8000d58 <restore_non_core_regs+0x24>
 8000d80:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d88:	f000 bc8a 	b.w	80016a0 <__gnu_Unwind_Restore_WMMXC>

08000d8c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000d8c:	6803      	ldr	r3, [r0, #0]
 8000d8e:	b103      	cbz	r3, 8000d92 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000d90:	4403      	add	r3, r0
 8000d92:	4618      	mov	r0, r3
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <__gnu_unwind_24bit.isra.1>:
 8000d98:	2009      	movs	r0, #9
 8000d9a:	4770      	bx	lr

08000d9c <_Unwind_DebugHook>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <unwind_phase2>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	4604      	mov	r4, r0
 8000da4:	460d      	mov	r5, r1
 8000da6:	e008      	b.n	8000dba <unwind_phase2+0x1a>
 8000da8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000daa:	6923      	ldr	r3, [r4, #16]
 8000dac:	6162      	str	r2, [r4, #20]
 8000dae:	4621      	mov	r1, r4
 8000db0:	462a      	mov	r2, r5
 8000db2:	2001      	movs	r0, #1
 8000db4:	4798      	blx	r3
 8000db6:	2808      	cmp	r0, #8
 8000db8:	d108      	bne.n	8000dcc <unwind_phase2+0x2c>
 8000dba:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff ff67 	bl	8000c90 <get_eit_entry>
 8000dc2:	4606      	mov	r6, r0
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d0ef      	beq.n	8000da8 <unwind_phase2+0x8>
 8000dc8:	f009 fad6 	bl	800a378 <abort>
 8000dcc:	2807      	cmp	r0, #7
 8000dce:	d1fb      	bne.n	8000dc8 <unwind_phase2+0x28>
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000dd4:	f7ff ffe2 	bl	8000d9c <_Unwind_DebugHook>
 8000dd8:	1d28      	adds	r0, r5, #4
 8000dda:	f000 fbf9 	bl	80015d0 <__restore_core_regs>
 8000dde:	bf00      	nop

08000de0 <unwind_phase2_forced>:
 8000de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de4:	4605      	mov	r5, r0
 8000de6:	2700      	movs	r7, #0
 8000de8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000dec:	ac03      	add	r4, sp, #12
 8000dee:	1d0e      	adds	r6, r1, #4
 8000df0:	4692      	mov	sl, r2
 8000df2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e02:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000e06:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e0e:	ac02      	add	r4, sp, #8
 8000e10:	4628      	mov	r0, r5
 8000e12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e14:	6027      	str	r7, [r4, #0]
 8000e16:	f7ff ff3b 	bl	8000c90 <get_eit_entry>
 8000e1a:	f1ba 0f00 	cmp.w	sl, #0
 8000e1e:	4607      	mov	r7, r0
 8000e20:	bf14      	ite	ne
 8000e22:	260a      	movne	r6, #10
 8000e24:	2609      	moveq	r6, #9
 8000e26:	b17f      	cbz	r7, 8000e48 <unwind_phase2_forced+0x68>
 8000e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e2a:	f046 0110 	orr.w	r1, r6, #16
 8000e2e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000e32:	462a      	mov	r2, r5
 8000e34:	6463      	str	r3, [r4, #68]	; 0x44
 8000e36:	2001      	movs	r0, #1
 8000e38:	462b      	mov	r3, r5
 8000e3a:	47c0      	blx	r8
 8000e3c:	bb78      	cbnz	r0, 8000e9e <unwind_phase2_forced+0xbe>
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e4e:	616b      	str	r3, [r5, #20]
 8000e50:	4621      	mov	r1, r4
 8000e52:	a87a      	add	r0, sp, #488	; 0x1e8
 8000e54:	f008 ffa8 	bl	8009da8 <memcpy>
 8000e58:	692b      	ldr	r3, [r5, #16]
 8000e5a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4798      	blx	r3
 8000e62:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000e64:	4682      	mov	sl, r0
 8000e66:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	6463      	str	r3, [r4, #68]	; 0x44
 8000e6e:	462a      	mov	r2, r5
 8000e70:	462b      	mov	r3, r5
 8000e72:	2001      	movs	r0, #1
 8000e74:	47c0      	blx	r8
 8000e76:	b990      	cbnz	r0, 8000e9e <unwind_phase2_forced+0xbe>
 8000e78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e7c:	a97a      	add	r1, sp, #488	; 0x1e8
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f008 ff92 	bl	8009da8 <memcpy>
 8000e84:	f1ba 0f08 	cmp.w	sl, #8
 8000e88:	d106      	bne.n	8000e98 <unwind_phase2_forced+0xb8>
 8000e8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f7ff feff 	bl	8000c90 <get_eit_entry>
 8000e92:	2609      	movs	r6, #9
 8000e94:	4607      	mov	r7, r0
 8000e96:	e7c6      	b.n	8000e26 <unwind_phase2_forced+0x46>
 8000e98:	f1ba 0f07 	cmp.w	sl, #7
 8000e9c:	d005      	beq.n	8000eaa <unwind_phase2_forced+0xca>
 8000e9e:	2709      	movs	r7, #9
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4638      	mov	r0, r7
 8000eac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000eae:	f7ff ff75 	bl	8000d9c <_Unwind_DebugHook>
 8000eb2:	a803      	add	r0, sp, #12
 8000eb4:	f000 fb8c 	bl	80015d0 <__restore_core_regs>

08000eb8 <_Unwind_GetCFA>:
 8000eb8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000eba:	4770      	bx	lr

08000ebc <__gnu_Unwind_RaiseException>:
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	f04f 3eff 	mov.w	lr, #4294967295
 8000ec2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000ec4:	b0f9      	sub	sp, #484	; 0x1e4
 8000ec6:	640b      	str	r3, [r1, #64]	; 0x40
 8000ec8:	1d0e      	adds	r6, r1, #4
 8000eca:	ad01      	add	r5, sp, #4
 8000ecc:	460f      	mov	r7, r1
 8000ece:	4604      	mov	r4, r0
 8000ed0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000edc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ee0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000ee4:	f8cd e000 	str.w	lr, [sp]
 8000ee8:	e006      	b.n	8000ef8 <__gnu_Unwind_RaiseException+0x3c>
 8000eea:	6923      	ldr	r3, [r4, #16]
 8000eec:	466a      	mov	r2, sp
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4798      	blx	r3
 8000ef2:	2808      	cmp	r0, #8
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	d108      	bne.n	8000f0a <__gnu_Unwind_RaiseException+0x4e>
 8000ef8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fec8 	bl	8000c90 <get_eit_entry>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d0f2      	beq.n	8000eea <__gnu_Unwind_RaiseException+0x2e>
 8000f04:	2009      	movs	r0, #9
 8000f06:	b079      	add	sp, #484	; 0x1e4
 8000f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0a:	4668      	mov	r0, sp
 8000f0c:	f7ff ff12 	bl	8000d34 <restore_non_core_regs>
 8000f10:	2d06      	cmp	r5, #6
 8000f12:	d1f7      	bne.n	8000f04 <__gnu_Unwind_RaiseException+0x48>
 8000f14:	4639      	mov	r1, r7
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ff42 	bl	8000da0 <unwind_phase2>

08000f1c <__gnu_Unwind_ForcedUnwind>:
 8000f1c:	b430      	push	{r4, r5}
 8000f1e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000f20:	60c1      	str	r1, [r0, #12]
 8000f22:	6182      	str	r2, [r0, #24]
 8000f24:	4619      	mov	r1, r3
 8000f26:	641d      	str	r5, [r3, #64]	; 0x40
 8000f28:	2200      	movs	r2, #0
 8000f2a:	bc30      	pop	{r4, r5}
 8000f2c:	e758      	b.n	8000de0 <unwind_phase2_forced>
 8000f2e:	bf00      	nop

08000f30 <__gnu_Unwind_Resume>:
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	6943      	ldr	r3, [r0, #20]
 8000f34:	68c6      	ldr	r6, [r0, #12]
 8000f36:	640b      	str	r3, [r1, #64]	; 0x40
 8000f38:	b126      	cbz	r6, 8000f44 <__gnu_Unwind_Resume+0x14>
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f7ff ff50 	bl	8000de0 <unwind_phase2_forced>
 8000f40:	f009 fa1a 	bl	800a378 <abort>
 8000f44:	6903      	ldr	r3, [r0, #16]
 8000f46:	460a      	mov	r2, r1
 8000f48:	4604      	mov	r4, r0
 8000f4a:	460d      	mov	r5, r1
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	2002      	movs	r0, #2
 8000f50:	4798      	blx	r3
 8000f52:	2807      	cmp	r0, #7
 8000f54:	d007      	beq.n	8000f66 <__gnu_Unwind_Resume+0x36>
 8000f56:	2808      	cmp	r0, #8
 8000f58:	d103      	bne.n	8000f62 <__gnu_Unwind_Resume+0x32>
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f7ff ff1f 	bl	8000da0 <unwind_phase2>
 8000f62:	f009 fa09 	bl	800a378 <abort>
 8000f66:	4630      	mov	r0, r6
 8000f68:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f6a:	f7ff ff17 	bl	8000d9c <_Unwind_DebugHook>
 8000f6e:	1d28      	adds	r0, r5, #4
 8000f70:	f000 fb2e 	bl	80015d0 <__restore_core_regs>

08000f74 <__gnu_Unwind_Resume_or_Rethrow>:
 8000f74:	68c2      	ldr	r2, [r0, #12]
 8000f76:	b12a      	cbz	r2, 8000f84 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000f78:	b410      	push	{r4}
 8000f7a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	640c      	str	r4, [r1, #64]	; 0x40
 8000f80:	bc10      	pop	{r4}
 8000f82:	e72d      	b.n	8000de0 <unwind_phase2_forced>
 8000f84:	e79a      	b.n	8000ebc <__gnu_Unwind_RaiseException>
 8000f86:	bf00      	nop

08000f88 <_Unwind_Complete>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_Unwind_DeleteException>:
 8000f8c:	6883      	ldr	r3, [r0, #8]
 8000f8e:	b113      	cbz	r3, 8000f96 <_Unwind_DeleteException+0xa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	2001      	movs	r0, #1
 8000f94:	4718      	bx	r3
 8000f96:	4770      	bx	lr

08000f98 <_Unwind_VRS_Get>:
 8000f98:	b500      	push	{lr}
 8000f9a:	2904      	cmp	r1, #4
 8000f9c:	d807      	bhi.n	8000fae <_Unwind_VRS_Get+0x16>
 8000f9e:	e8df f001 	tbb	[pc, r1]
 8000fa2:	0903      	.short	0x0903
 8000fa4:	0906      	.short	0x0906
 8000fa6:	09          	.byte	0x09
 8000fa7:	00          	.byte	0x00
 8000fa8:	b90b      	cbnz	r3, 8000fae <_Unwind_VRS_Get+0x16>
 8000faa:	2a0f      	cmp	r2, #15
 8000fac:	d905      	bls.n	8000fba <_Unwind_VRS_Get+0x22>
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000fbe:	6852      	ldr	r2, [r2, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fca:	bf00      	nop

08000fcc <_Unwind_GetGR>:
 8000fcc:	2300      	movs	r3, #0
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	ac03      	add	r4, sp, #12
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	9400      	str	r4, [sp, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff ffdd 	bl	8000f98 <_Unwind_VRS_Get>
 8000fde:	9803      	ldr	r0, [sp, #12]
 8000fe0:	b004      	add	sp, #16
 8000fe2:	bd10      	pop	{r4, pc}

08000fe4 <_Unwind_VRS_Set>:
 8000fe4:	b500      	push	{lr}
 8000fe6:	2904      	cmp	r1, #4
 8000fe8:	d807      	bhi.n	8000ffa <_Unwind_VRS_Set+0x16>
 8000fea:	e8df f001 	tbb	[pc, r1]
 8000fee:	0903      	.short	0x0903
 8000ff0:	0906      	.short	0x0906
 8000ff2:	09          	.byte	0x09
 8000ff3:	00          	.byte	0x00
 8000ff4:	b90b      	cbnz	r3, 8000ffa <_Unwind_VRS_Set+0x16>
 8000ff6:	2a0f      	cmp	r2, #15
 8000ff8:	d905      	bls.n	8001006 <_Unwind_VRS_Set+0x22>
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001000:	2001      	movs	r0, #1
 8001002:	f85d fb04 	ldr.w	pc, [sp], #4
 8001006:	9901      	ldr	r1, [sp, #4]
 8001008:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800100c:	6809      	ldr	r1, [r1, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	6051      	str	r1, [r2, #4]
 8001012:	f85d fb04 	ldr.w	pc, [sp], #4
 8001016:	bf00      	nop

08001018 <_Unwind_SetGR>:
 8001018:	2300      	movs	r3, #0
 800101a:	b510      	push	{r4, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	ac04      	add	r4, sp, #16
 8001020:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001024:	9400      	str	r4, [sp, #0]
 8001026:	460a      	mov	r2, r1
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff ffdb 	bl	8000fe4 <_Unwind_VRS_Set>
 800102e:	b004      	add	sp, #16
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop

08001034 <__gnu_Unwind_Backtrace>:
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	f04f 3eff 	mov.w	lr, #4294967295
 800103a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800103c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	1d15      	adds	r5, r2, #4
 8001044:	ac17      	add	r4, sp, #92	; 0x5c
 8001046:	4607      	mov	r7, r0
 8001048:	460e      	mov	r6, r1
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800105a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800105e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8001062:	e012      	b.n	800108a <__gnu_Unwind_Backtrace+0x56>
 8001064:	210c      	movs	r1, #12
 8001066:	a816      	add	r0, sp, #88	; 0x58
 8001068:	466a      	mov	r2, sp
 800106a:	f7ff ffd5 	bl	8001018 <_Unwind_SetGR>
 800106e:	4631      	mov	r1, r6
 8001070:	a816      	add	r0, sp, #88	; 0x58
 8001072:	47b8      	blx	r7
 8001074:	b978      	cbnz	r0, 8001096 <__gnu_Unwind_Backtrace+0x62>
 8001076:	9b04      	ldr	r3, [sp, #16]
 8001078:	aa16      	add	r2, sp, #88	; 0x58
 800107a:	4669      	mov	r1, sp
 800107c:	2008      	movs	r0, #8
 800107e:	4798      	blx	r3
 8001080:	2805      	cmp	r0, #5
 8001082:	4604      	mov	r4, r0
 8001084:	d008      	beq.n	8001098 <__gnu_Unwind_Backtrace+0x64>
 8001086:	2809      	cmp	r0, #9
 8001088:	d005      	beq.n	8001096 <__gnu_Unwind_Backtrace+0x62>
 800108a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800108c:	4668      	mov	r0, sp
 800108e:	f7ff fdff 	bl	8000c90 <get_eit_entry>
 8001092:	2800      	cmp	r0, #0
 8001094:	d0e6      	beq.n	8001064 <__gnu_Unwind_Backtrace+0x30>
 8001096:	2409      	movs	r4, #9
 8001098:	a816      	add	r0, sp, #88	; 0x58
 800109a:	f7ff fe4b 	bl	8000d34 <restore_non_core_regs>
 800109e:	4620      	mov	r0, r4
 80010a0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	bf00      	nop

080010a8 <__gnu_unwind_pr_common>:
 80010a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ac:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80010ae:	4691      	mov	r9, r2
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	b08b      	sub	sp, #44	; 0x2c
 80010b4:	3404      	adds	r4, #4
 80010b6:	460d      	mov	r5, r1
 80010b8:	9207      	str	r2, [sp, #28]
 80010ba:	9408      	str	r4, [sp, #32]
 80010bc:	f000 0b03 	and.w	fp, r0, #3
 80010c0:	461e      	mov	r6, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d160      	bne.n	8001188 <__gnu_unwind_pr_common+0xe0>
 80010c6:	2303      	movs	r3, #3
 80010c8:	0212      	lsls	r2, r2, #8
 80010ca:	9207      	str	r2, [sp, #28]
 80010cc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80010d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80010d4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010d6:	f1bb 0f02 	cmp.w	fp, #2
 80010da:	bf08      	it	eq
 80010dc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80010de:	f013 0301 	ands.w	r3, r3, #1
 80010e2:	d140      	bne.n	8001166 <__gnu_unwind_pr_common+0xbe>
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f000 0308 	and.w	r3, r0, #8
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	f8d4 8000 	ldr.w	r8, [r4]
 80010f0:	f1b8 0f00 	cmp.w	r8, #0
 80010f4:	d039      	beq.n	800116a <__gnu_unwind_pr_common+0xc2>
 80010f6:	2e02      	cmp	r6, #2
 80010f8:	d043      	beq.n	8001182 <__gnu_unwind_pr_common+0xda>
 80010fa:	f8b4 8000 	ldrh.w	r8, [r4]
 80010fe:	8867      	ldrh	r7, [r4, #2]
 8001100:	3404      	adds	r4, #4
 8001102:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001104:	f027 0a01 	bic.w	sl, r7, #1
 8001108:	210f      	movs	r1, #15
 800110a:	4648      	mov	r0, r9
 800110c:	449a      	add	sl, r3
 800110e:	f7ff ff5d 	bl	8000fcc <_Unwind_GetGR>
 8001112:	4582      	cmp	sl, r0
 8001114:	d833      	bhi.n	800117e <__gnu_unwind_pr_common+0xd6>
 8001116:	f028 0301 	bic.w	r3, r8, #1
 800111a:	449a      	add	sl, r3
 800111c:	4550      	cmp	r0, sl
 800111e:	bf2c      	ite	cs
 8001120:	2000      	movcs	r0, #0
 8001122:	2001      	movcc	r0, #1
 8001124:	007f      	lsls	r7, r7, #1
 8001126:	f007 0702 	and.w	r7, r7, #2
 800112a:	f008 0801 	and.w	r8, r8, #1
 800112e:	ea47 0708 	orr.w	r7, r7, r8
 8001132:	2f01      	cmp	r7, #1
 8001134:	d03e      	beq.n	80011b4 <__gnu_unwind_pr_common+0x10c>
 8001136:	d335      	bcc.n	80011a4 <__gnu_unwind_pr_common+0xfc>
 8001138:	2f02      	cmp	r7, #2
 800113a:	d11c      	bne.n	8001176 <__gnu_unwind_pr_common+0xce>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001142:	9202      	str	r2, [sp, #8]
 8001144:	f1bb 0f00 	cmp.w	fp, #0
 8001148:	d176      	bne.n	8001238 <__gnu_unwind_pr_common+0x190>
 800114a:	b128      	cbz	r0, 8001158 <__gnu_unwind_pr_common+0xb0>
 800114c:	9903      	ldr	r1, [sp, #12]
 800114e:	2900      	cmp	r1, #0
 8001150:	d07e      	beq.n	8001250 <__gnu_unwind_pr_common+0x1a8>
 8001152:	2a00      	cmp	r2, #0
 8001154:	f000 80a6 	beq.w	80012a4 <__gnu_unwind_pr_common+0x1fc>
 8001158:	2b00      	cmp	r3, #0
 800115a:	db77      	blt.n	800124c <__gnu_unwind_pr_common+0x1a4>
 800115c:	9b02      	ldr	r3, [sp, #8]
 800115e:	3301      	adds	r3, #1
 8001160:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001164:	e7c2      	b.n	80010ec <__gnu_unwind_pr_common+0x44>
 8001166:	2300      	movs	r3, #0
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2e02      	cmp	r6, #2
 800116c:	dd3e      	ble.n	80011ec <__gnu_unwind_pr_common+0x144>
 800116e:	f7ff fe13 	bl	8000d98 <__gnu_unwind_24bit.isra.1>
 8001172:	2800      	cmp	r0, #0
 8001174:	d040      	beq.n	80011f8 <__gnu_unwind_pr_common+0x150>
 8001176:	2009      	movs	r0, #9
 8001178:	b00b      	add	sp, #44	; 0x2c
 800117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800117e:	2000      	movs	r0, #0
 8001180:	e7d0      	b.n	8001124 <__gnu_unwind_pr_common+0x7c>
 8001182:	6867      	ldr	r7, [r4, #4]
 8001184:	3408      	adds	r4, #8
 8001186:	e7bc      	b.n	8001102 <__gnu_unwind_pr_common+0x5a>
 8001188:	2b02      	cmp	r3, #2
 800118a:	dca3      	bgt.n	80010d4 <__gnu_unwind_pr_common+0x2c>
 800118c:	2102      	movs	r1, #2
 800118e:	0c13      	lsrs	r3, r2, #16
 8001190:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001194:	0412      	lsls	r2, r2, #16
 8001196:	b2db      	uxtb	r3, r3
 8001198:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800119c:	9207      	str	r2, [sp, #28]
 800119e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80011a2:	e797      	b.n	80010d4 <__gnu_unwind_pr_common+0x2c>
 80011a4:	f1bb 0f00 	cmp.w	fp, #0
 80011a8:	d002      	beq.n	80011b0 <__gnu_unwind_pr_common+0x108>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	f040 80bd 	bne.w	800132a <__gnu_unwind_pr_common+0x282>
 80011b0:	3404      	adds	r4, #4
 80011b2:	e79b      	b.n	80010ec <__gnu_unwind_pr_common+0x44>
 80011b4:	f1bb 0f00 	cmp.w	fp, #0
 80011b8:	d125      	bne.n	8001206 <__gnu_unwind_pr_common+0x15e>
 80011ba:	b1a8      	cbz	r0, 80011e8 <__gnu_unwind_pr_common+0x140>
 80011bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80011c0:	1c99      	adds	r1, r3, #2
 80011c2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80011c6:	d0d6      	beq.n	8001176 <__gnu_unwind_pr_common+0xce>
 80011c8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80011cc:	3301      	adds	r3, #1
 80011ce:	9106      	str	r1, [sp, #24]
 80011d0:	f000 80a3 	beq.w	800131a <__gnu_unwind_pr_common+0x272>
 80011d4:	1d20      	adds	r0, r4, #4
 80011d6:	f7ff fdd9 	bl	8000d8c <_Unwind_decode_typeinfo_ptr.isra.0>
 80011da:	ab06      	add	r3, sp, #24
 80011dc:	4601      	mov	r1, r0
 80011de:	4628      	mov	r0, r5
 80011e0:	f3af 8000 	nop.w
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d177      	bne.n	80012d8 <__gnu_unwind_pr_common+0x230>
 80011e8:	3408      	adds	r4, #8
 80011ea:	e77f      	b.n	80010ec <__gnu_unwind_pr_common+0x44>
 80011ec:	a907      	add	r1, sp, #28
 80011ee:	4648      	mov	r0, r9
 80011f0:	f000 faf0 	bl	80017d4 <__gnu_unwind_execute>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d1be      	bne.n	8001176 <__gnu_unwind_pr_common+0xce>
 80011f8:	9b01      	ldr	r3, [sp, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d15c      	bne.n	80012b8 <__gnu_unwind_pr_common+0x210>
 80011fe:	2008      	movs	r0, #8
 8001200:	b00b      	add	sp, #44	; 0x2c
 8001202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001206:	210d      	movs	r1, #13
 8001208:	4648      	mov	r0, r9
 800120a:	6a2f      	ldr	r7, [r5, #32]
 800120c:	f7ff fede 	bl	8000fcc <_Unwind_GetGR>
 8001210:	4287      	cmp	r7, r0
 8001212:	d1e9      	bne.n	80011e8 <__gnu_unwind_pr_common+0x140>
 8001214:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001216:	429c      	cmp	r4, r3
 8001218:	d1e6      	bne.n	80011e8 <__gnu_unwind_pr_common+0x140>
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff fcea 	bl	8000bf4 <selfrel_offset31>
 8001220:	210f      	movs	r1, #15
 8001222:	4602      	mov	r2, r0
 8001224:	4648      	mov	r0, r9
 8001226:	f7ff fef7 	bl	8001018 <_Unwind_SetGR>
 800122a:	4648      	mov	r0, r9
 800122c:	462a      	mov	r2, r5
 800122e:	2100      	movs	r1, #0
 8001230:	f7ff fef2 	bl	8001018 <_Unwind_SetGR>
 8001234:	2007      	movs	r0, #7
 8001236:	e79f      	b.n	8001178 <__gnu_unwind_pr_common+0xd0>
 8001238:	210d      	movs	r1, #13
 800123a:	4648      	mov	r0, r9
 800123c:	6a2f      	ldr	r7, [r5, #32]
 800123e:	f7ff fec5 	bl	8000fcc <_Unwind_GetGR>
 8001242:	4287      	cmp	r7, r0
 8001244:	d058      	beq.n	80012f8 <__gnu_unwind_pr_common+0x250>
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da87      	bge.n	800115c <__gnu_unwind_pr_common+0xb4>
 800124c:	3404      	adds	r4, #4
 800124e:	e785      	b.n	800115c <__gnu_unwind_pr_common+0xb4>
 8001250:	9b02      	ldr	r3, [sp, #8]
 8001252:	b33b      	cbz	r3, 80012a4 <__gnu_unwind_pr_common+0x1fc>
 8001254:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001258:	1d27      	adds	r7, r4, #4
 800125a:	f8cd b010 	str.w	fp, [sp, #16]
 800125e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001262:	46a3      	mov	fp, r4
 8001264:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001268:	461c      	mov	r4, r3
 800126a:	9605      	str	r6, [sp, #20]
 800126c:	e002      	b.n	8001274 <__gnu_unwind_pr_common+0x1cc>
 800126e:	45b2      	cmp	sl, r6
 8001270:	46b0      	mov	r8, r6
 8001272:	d016      	beq.n	80012a2 <__gnu_unwind_pr_common+0x1fa>
 8001274:	4638      	mov	r0, r7
 8001276:	9406      	str	r4, [sp, #24]
 8001278:	f7ff fd88 	bl	8000d8c <_Unwind_decode_typeinfo_ptr.isra.0>
 800127c:	ab06      	add	r3, sp, #24
 800127e:	4601      	mov	r1, r0
 8001280:	2200      	movs	r2, #0
 8001282:	4628      	mov	r0, r5
 8001284:	f3af 8000 	nop.w
 8001288:	f108 0601 	add.w	r6, r8, #1
 800128c:	3704      	adds	r7, #4
 800128e:	2800      	cmp	r0, #0
 8001290:	d0ed      	beq.n	800126e <__gnu_unwind_pr_common+0x1c6>
 8001292:	9b02      	ldr	r3, [sp, #8]
 8001294:	465c      	mov	r4, fp
 8001296:	4543      	cmp	r3, r8
 8001298:	f8dd b010 	ldr.w	fp, [sp, #16]
 800129c:	9e05      	ldr	r6, [sp, #20]
 800129e:	d1d2      	bne.n	8001246 <__gnu_unwind_pr_common+0x19e>
 80012a0:	e000      	b.n	80012a4 <__gnu_unwind_pr_common+0x1fc>
 80012a2:	465c      	mov	r4, fp
 80012a4:	4648      	mov	r0, r9
 80012a6:	210d      	movs	r1, #13
 80012a8:	f7ff fe90 	bl	8000fcc <_Unwind_GetGR>
 80012ac:	9b06      	ldr	r3, [sp, #24]
 80012ae:	6228      	str	r0, [r5, #32]
 80012b0:	62ac      	str	r4, [r5, #40]	; 0x28
 80012b2:	626b      	str	r3, [r5, #36]	; 0x24
 80012b4:	2006      	movs	r0, #6
 80012b6:	e75f      	b.n	8001178 <__gnu_unwind_pr_common+0xd0>
 80012b8:	210f      	movs	r1, #15
 80012ba:	4648      	mov	r0, r9
 80012bc:	f7ff fe86 	bl	8000fcc <_Unwind_GetGR>
 80012c0:	210e      	movs	r1, #14
 80012c2:	4602      	mov	r2, r0
 80012c4:	4648      	mov	r0, r9
 80012c6:	f7ff fea7 	bl	8001018 <_Unwind_SetGR>
 80012ca:	4648      	mov	r0, r9
 80012cc:	4a29      	ldr	r2, [pc, #164]	; (8001374 <__gnu_unwind_pr_common+0x2cc>)
 80012ce:	210f      	movs	r1, #15
 80012d0:	f7ff fea2 	bl	8001018 <_Unwind_SetGR>
 80012d4:	2007      	movs	r0, #7
 80012d6:	e74f      	b.n	8001178 <__gnu_unwind_pr_common+0xd0>
 80012d8:	4607      	mov	r7, r0
 80012da:	210d      	movs	r1, #13
 80012dc:	4648      	mov	r0, r9
 80012de:	f7ff fe75 	bl	8000fcc <_Unwind_GetGR>
 80012e2:	2f02      	cmp	r7, #2
 80012e4:	6228      	str	r0, [r5, #32]
 80012e6:	d11d      	bne.n	8001324 <__gnu_unwind_pr_common+0x27c>
 80012e8:	462b      	mov	r3, r5
 80012ea:	9a06      	ldr	r2, [sp, #24]
 80012ec:	f843 2f2c 	str.w	r2, [r3, #44]!
 80012f0:	626b      	str	r3, [r5, #36]	; 0x24
 80012f2:	62ac      	str	r4, [r5, #40]	; 0x28
 80012f4:	2006      	movs	r0, #6
 80012f6:	e73f      	b.n	8001178 <__gnu_unwind_pr_common+0xd0>
 80012f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d1a3      	bne.n	8001246 <__gnu_unwind_pr_common+0x19e>
 80012fe:	2204      	movs	r2, #4
 8001300:	2700      	movs	r7, #0
 8001302:	9902      	ldr	r1, [sp, #8]
 8001304:	18a3      	adds	r3, r4, r2
 8001306:	62a9      	str	r1, [r5, #40]	; 0x28
 8001308:	62ef      	str	r7, [r5, #44]	; 0x2c
 800130a:	632a      	str	r2, [r5, #48]	; 0x30
 800130c:	636b      	str	r3, [r5, #52]	; 0x34
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	42bb      	cmp	r3, r7
 8001312:	db1d      	blt.n	8001350 <__gnu_unwind_pr_common+0x2a8>
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	e720      	b.n	800115c <__gnu_unwind_pr_common+0xb4>
 800131a:	4648      	mov	r0, r9
 800131c:	210d      	movs	r1, #13
 800131e:	f7ff fe55 	bl	8000fcc <_Unwind_GetGR>
 8001322:	6228      	str	r0, [r5, #32]
 8001324:	9b06      	ldr	r3, [sp, #24]
 8001326:	626b      	str	r3, [r5, #36]	; 0x24
 8001328:	e7e3      	b.n	80012f2 <__gnu_unwind_pr_common+0x24a>
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff fc62 	bl	8000bf4 <selfrel_offset31>
 8001330:	3404      	adds	r4, #4
 8001332:	4606      	mov	r6, r0
 8001334:	63ac      	str	r4, [r5, #56]	; 0x38
 8001336:	4628      	mov	r0, r5
 8001338:	f3af 8000 	nop.w
 800133c:	2800      	cmp	r0, #0
 800133e:	f43f af1a 	beq.w	8001176 <__gnu_unwind_pr_common+0xce>
 8001342:	4648      	mov	r0, r9
 8001344:	4632      	mov	r2, r6
 8001346:	210f      	movs	r1, #15
 8001348:	f7ff fe66 	bl	8001018 <_Unwind_SetGR>
 800134c:	2007      	movs	r0, #7
 800134e:	e713      	b.n	8001178 <__gnu_unwind_pr_common+0xd0>
 8001350:	4608      	mov	r0, r1
 8001352:	3001      	adds	r0, #1
 8001354:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001358:	f7ff fc4c 	bl	8000bf4 <selfrel_offset31>
 800135c:	210f      	movs	r1, #15
 800135e:	4602      	mov	r2, r0
 8001360:	4648      	mov	r0, r9
 8001362:	f7ff fe59 	bl	8001018 <_Unwind_SetGR>
 8001366:	4648      	mov	r0, r9
 8001368:	462a      	mov	r2, r5
 800136a:	4639      	mov	r1, r7
 800136c:	f7ff fe54 	bl	8001018 <_Unwind_SetGR>
 8001370:	2007      	movs	r0, #7
 8001372:	e701      	b.n	8001178 <__gnu_unwind_pr_common+0xd0>
 8001374:	00000000 	.word	0x00000000

08001378 <__aeabi_unwind_cpp_pr0>:
 8001378:	2300      	movs	r3, #0
 800137a:	e695      	b.n	80010a8 <__gnu_unwind_pr_common>

0800137c <__aeabi_unwind_cpp_pr1>:
 800137c:	2301      	movs	r3, #1
 800137e:	e693      	b.n	80010a8 <__gnu_unwind_pr_common>

08001380 <__aeabi_unwind_cpp_pr2>:
 8001380:	2302      	movs	r3, #2
 8001382:	e691      	b.n	80010a8 <__gnu_unwind_pr_common>

08001384 <_Unwind_VRS_Pop>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	4604      	mov	r4, r0
 8001388:	b0c5      	sub	sp, #276	; 0x114
 800138a:	2904      	cmp	r1, #4
 800138c:	d80d      	bhi.n	80013aa <_Unwind_VRS_Pop+0x26>
 800138e:	e8df f001 	tbb	[pc, r1]
 8001392:	0355      	.short	0x0355
 8001394:	310c      	.short	0x310c
 8001396:	0f          	.byte	0x0f
 8001397:	00          	.byte	0x00
 8001398:	2b01      	cmp	r3, #1
 800139a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800139e:	b295      	uxth	r5, r2
 80013a0:	d164      	bne.n	800146c <_Unwind_VRS_Pop+0xe8>
 80013a2:	1972      	adds	r2, r6, r5
 80013a4:	2a10      	cmp	r2, #16
 80013a6:	f240 809d 	bls.w	80014e4 <_Unwind_VRS_Pop+0x160>
 80013aa:	2002      	movs	r0, #2
 80013ac:	b045      	add	sp, #276	; 0x114
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1fa      	bne.n	80013aa <_Unwind_VRS_Pop+0x26>
 80013b4:	2a10      	cmp	r2, #16
 80013b6:	d8f8      	bhi.n	80013aa <_Unwind_VRS_Pop+0x26>
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	06d8      	lsls	r0, r3, #27
 80013bc:	f100 80c8 	bmi.w	8001550 <_Unwind_VRS_Pop+0x1cc>
 80013c0:	ae22      	add	r6, sp, #136	; 0x88
 80013c2:	4630      	mov	r0, r6
 80013c4:	9201      	str	r2, [sp, #4]
 80013c6:	2501      	movs	r5, #1
 80013c8:	f000 f974 	bl	80016b4 <__gnu_Unwind_Save_WMMXC>
 80013cc:	2300      	movs	r3, #0
 80013ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013d0:	9a01      	ldr	r2, [sp, #4]
 80013d2:	fa05 f103 	lsl.w	r1, r5, r3
 80013d6:	4211      	tst	r1, r2
 80013d8:	d003      	beq.n	80013e2 <_Unwind_VRS_Pop+0x5e>
 80013da:	6801      	ldr	r1, [r0, #0]
 80013dc:	3004      	adds	r0, #4
 80013de:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80013e2:	3301      	adds	r3, #1
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d1f4      	bne.n	80013d2 <_Unwind_VRS_Pop+0x4e>
 80013e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80013ea:	4630      	mov	r0, r6
 80013ec:	f000 f958 	bl	80016a0 <__gnu_Unwind_Restore_WMMXC>
 80013f0:	2000      	movs	r0, #0
 80013f2:	e7db      	b.n	80013ac <_Unwind_VRS_Pop+0x28>
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d1d8      	bne.n	80013aa <_Unwind_VRS_Pop+0x26>
 80013f8:	0c15      	lsrs	r5, r2, #16
 80013fa:	b297      	uxth	r7, r2
 80013fc:	19eb      	adds	r3, r5, r7
 80013fe:	2b10      	cmp	r3, #16
 8001400:	d8d3      	bhi.n	80013aa <_Unwind_VRS_Pop+0x26>
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	071e      	lsls	r6, r3, #28
 8001406:	f100 80b7 	bmi.w	8001578 <_Unwind_VRS_Pop+0x1f4>
 800140a:	ae22      	add	r6, sp, #136	; 0x88
 800140c:	4630      	mov	r0, r6
 800140e:	f000 f925 	bl	800165c <__gnu_Unwind_Save_WMMXD>
 8001412:	00ed      	lsls	r5, r5, #3
 8001414:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001416:	b15f      	cbz	r7, 8001430 <_Unwind_VRS_Pop+0xac>
 8001418:	3d04      	subs	r5, #4
 800141a:	4603      	mov	r3, r0
 800141c:	1971      	adds	r1, r6, r5
 800141e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001422:	f853 2b04 	ldr.w	r2, [r3], #4
 8001426:	4283      	cmp	r3, r0
 8001428:	f841 2f04 	str.w	r2, [r1, #4]!
 800142c:	d1f9      	bne.n	8001422 <_Unwind_VRS_Pop+0x9e>
 800142e:	4618      	mov	r0, r3
 8001430:	63a0      	str	r0, [r4, #56]	; 0x38
 8001432:	4630      	mov	r0, r6
 8001434:	f000 f8f0 	bl	8001618 <__gnu_Unwind_Restore_WMMXD>
 8001438:	2000      	movs	r0, #0
 800143a:	e7b7      	b.n	80013ac <_Unwind_VRS_Pop+0x28>
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1b4      	bne.n	80013aa <_Unwind_VRS_Pop+0x26>
 8001440:	2701      	movs	r7, #1
 8001442:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001444:	b296      	uxth	r6, r2
 8001446:	1d20      	adds	r0, r4, #4
 8001448:	fa07 f103 	lsl.w	r1, r7, r3
 800144c:	4231      	tst	r1, r6
 800144e:	f103 0301 	add.w	r3, r3, #1
 8001452:	d002      	beq.n	800145a <_Unwind_VRS_Pop+0xd6>
 8001454:	6829      	ldr	r1, [r5, #0]
 8001456:	3504      	adds	r5, #4
 8001458:	6001      	str	r1, [r0, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	f100 0004 	add.w	r0, r0, #4
 8001460:	d1f2      	bne.n	8001448 <_Unwind_VRS_Pop+0xc4>
 8001462:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001466:	d13b      	bne.n	80014e0 <_Unwind_VRS_Pop+0x15c>
 8001468:	63a5      	str	r5, [r4, #56]	; 0x38
 800146a:	e79f      	b.n	80013ac <_Unwind_VRS_Pop+0x28>
 800146c:	2b05      	cmp	r3, #5
 800146e:	d19c      	bne.n	80013aa <_Unwind_VRS_Pop+0x26>
 8001470:	1977      	adds	r7, r6, r5
 8001472:	2f20      	cmp	r7, #32
 8001474:	d899      	bhi.n	80013aa <_Unwind_VRS_Pop+0x26>
 8001476:	2e0f      	cmp	r6, #15
 8001478:	d966      	bls.n	8001548 <_Unwind_VRS_Pop+0x1c4>
 800147a:	462f      	mov	r7, r5
 800147c:	2d00      	cmp	r5, #0
 800147e:	d13a      	bne.n	80014f6 <_Unwind_VRS_Pop+0x172>
 8001480:	462a      	mov	r2, r5
 8001482:	2700      	movs	r7, #0
 8001484:	2a00      	cmp	r2, #0
 8001486:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001488:	dd72      	ble.n	8001570 <_Unwind_VRS_Pop+0x1ec>
 800148a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800148e:	4601      	mov	r1, r0
 8001490:	a844      	add	r0, sp, #272	; 0x110
 8001492:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001496:	388c      	subs	r0, #140	; 0x8c
 8001498:	f851 5b04 	ldr.w	r5, [r1], #4
 800149c:	4291      	cmp	r1, r2
 800149e:	f840 5f04 	str.w	r5, [r0, #4]!
 80014a2:	d1f9      	bne.n	8001498 <_Unwind_VRS_Pop+0x114>
 80014a4:	4608      	mov	r0, r1
 80014a6:	b197      	cbz	r7, 80014ce <_Unwind_VRS_Pop+0x14a>
 80014a8:	2e10      	cmp	r6, #16
 80014aa:	4632      	mov	r2, r6
 80014ac:	bf38      	it	cc
 80014ae:	2210      	movcc	r2, #16
 80014b0:	a944      	add	r1, sp, #272	; 0x110
 80014b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80014b6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80014ba:	0079      	lsls	r1, r7, #1
 80014bc:	3a04      	subs	r2, #4
 80014be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80014c2:	f850 5b04 	ldr.w	r5, [r0], #4
 80014c6:	4288      	cmp	r0, r1
 80014c8:	f842 5f04 	str.w	r5, [r2, #4]!
 80014cc:	d1f9      	bne.n	80014c2 <_Unwind_VRS_Pop+0x13e>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d048      	beq.n	8001564 <_Unwind_VRS_Pop+0x1e0>
 80014d2:	2e0f      	cmp	r6, #15
 80014d4:	63a1      	str	r1, [r4, #56]	; 0x38
 80014d6:	d933      	bls.n	8001540 <_Unwind_VRS_Pop+0x1bc>
 80014d8:	b117      	cbz	r7, 80014e0 <_Unwind_VRS_Pop+0x15c>
 80014da:	a802      	add	r0, sp, #8
 80014dc:	f000 f894 	bl	8001608 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80014e0:	2000      	movs	r0, #0
 80014e2:	e763      	b.n	80013ac <_Unwind_VRS_Pop+0x28>
 80014e4:	2e0f      	cmp	r6, #15
 80014e6:	f63f af60 	bhi.w	80013aa <_Unwind_VRS_Pop+0x26>
 80014ea:	2700      	movs	r7, #0
 80014ec:	6822      	ldr	r2, [r4, #0]
 80014ee:	07d1      	lsls	r1, r2, #31
 80014f0:	d417      	bmi.n	8001522 <_Unwind_VRS_Pop+0x19e>
 80014f2:	2f00      	cmp	r7, #0
 80014f4:	d060      	beq.n	80015b8 <_Unwind_VRS_Pop+0x234>
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	0751      	lsls	r1, r2, #29
 80014fa:	d445      	bmi.n	8001588 <_Unwind_VRS_Pop+0x204>
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d04d      	beq.n	800159c <_Unwind_VRS_Pop+0x218>
 8001500:	2e0f      	cmp	r6, #15
 8001502:	d806      	bhi.n	8001512 <_Unwind_VRS_Pop+0x18e>
 8001504:	a822      	add	r0, sp, #136	; 0x88
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	f000 f87a 	bl	8001600 <__gnu_Unwind_Save_VFP_D>
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	2f00      	cmp	r7, #0
 8001510:	d0b6      	beq.n	8001480 <_Unwind_VRS_Pop+0xfc>
 8001512:	a802      	add	r0, sp, #8
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	f000 f87b 	bl	8001610 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	f1c6 0210 	rsb	r2, r6, #16
 8001520:	e7b0      	b.n	8001484 <_Unwind_VRS_Pop+0x100>
 8001522:	f022 0101 	bic.w	r1, r2, #1
 8001526:	2b05      	cmp	r3, #5
 8001528:	6021      	str	r1, [r4, #0]
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	4620      	mov	r0, r4
 800152e:	d03b      	beq.n	80015a8 <_Unwind_VRS_Pop+0x224>
 8001530:	f022 0203 	bic.w	r2, r2, #3
 8001534:	f840 2b48 	str.w	r2, [r0], #72
 8001538:	f000 f85a 	bl	80015f0 <__gnu_Unwind_Save_VFP>
 800153c:	9b01      	ldr	r3, [sp, #4]
 800153e:	e7d8      	b.n	80014f2 <_Unwind_VRS_Pop+0x16e>
 8001540:	a822      	add	r0, sp, #136	; 0x88
 8001542:	f000 f859 	bl	80015f8 <__gnu_Unwind_Restore_VFP_D>
 8001546:	e7c7      	b.n	80014d8 <_Unwind_VRS_Pop+0x154>
 8001548:	2f10      	cmp	r7, #16
 800154a:	d9ce      	bls.n	80014ea <_Unwind_VRS_Pop+0x166>
 800154c:	3f10      	subs	r7, #16
 800154e:	e7cd      	b.n	80014ec <_Unwind_VRS_Pop+0x168>
 8001550:	f023 0310 	bic.w	r3, r3, #16
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	f000 f8aa 	bl	80016b4 <__gnu_Unwind_Save_WMMXC>
 8001560:	9a01      	ldr	r2, [sp, #4]
 8001562:	e72d      	b.n	80013c0 <_Unwind_VRS_Pop+0x3c>
 8001564:	3104      	adds	r1, #4
 8001566:	63a1      	str	r1, [r4, #56]	; 0x38
 8001568:	a822      	add	r0, sp, #136	; 0x88
 800156a:	f000 f83d 	bl	80015e8 <__gnu_Unwind_Restore_VFP>
 800156e:	e7b7      	b.n	80014e0 <_Unwind_VRS_Pop+0x15c>
 8001570:	2f00      	cmp	r7, #0
 8001572:	d199      	bne.n	80014a8 <_Unwind_VRS_Pop+0x124>
 8001574:	4601      	mov	r1, r0
 8001576:	e7aa      	b.n	80014ce <_Unwind_VRS_Pop+0x14a>
 8001578:	f023 0308 	bic.w	r3, r3, #8
 800157c:	6023      	str	r3, [r4, #0]
 800157e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001582:	f000 f86b 	bl	800165c <__gnu_Unwind_Save_WMMXD>
 8001586:	e740      	b.n	800140a <_Unwind_VRS_Pop+0x86>
 8001588:	4620      	mov	r0, r4
 800158a:	f022 0204 	bic.w	r2, r2, #4
 800158e:	f840 2bd0 	str.w	r2, [r0], #208
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f000 f83c 	bl	8001610 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	e7af      	b.n	80014fc <_Unwind_VRS_Pop+0x178>
 800159c:	a822      	add	r0, sp, #136	; 0x88
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f000 f826 	bl	80015f0 <__gnu_Unwind_Save_VFP>
 80015a4:	9b01      	ldr	r3, [sp, #4]
 80015a6:	e7b9      	b.n	800151c <_Unwind_VRS_Pop+0x198>
 80015a8:	f041 0102 	orr.w	r1, r1, #2
 80015ac:	f840 1b48 	str.w	r1, [r0], #72
 80015b0:	f000 f826 	bl	8001600 <__gnu_Unwind_Save_VFP_D>
 80015b4:	9b01      	ldr	r3, [sp, #4]
 80015b6:	e79c      	b.n	80014f2 <_Unwind_VRS_Pop+0x16e>
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d003      	beq.n	80015c4 <_Unwind_VRS_Pop+0x240>
 80015bc:	2e0f      	cmp	r6, #15
 80015be:	f63f af5f 	bhi.w	8001480 <_Unwind_VRS_Pop+0xfc>
 80015c2:	e79f      	b.n	8001504 <_Unwind_VRS_Pop+0x180>
 80015c4:	a822      	add	r0, sp, #136	; 0x88
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f000 f812 	bl	80015f0 <__gnu_Unwind_Save_VFP>
 80015cc:	9b01      	ldr	r3, [sp, #4]
 80015ce:	e757      	b.n	8001480 <_Unwind_VRS_Pop+0xfc>

080015d0 <__restore_core_regs>:
 80015d0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80015d4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80015d8:	469c      	mov	ip, r3
 80015da:	46a6      	mov	lr, r4
 80015dc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80015e0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80015e4:	46e5      	mov	sp, ip
 80015e6:	bd00      	pop	{pc}

080015e8 <__gnu_Unwind_Restore_VFP>:
 80015e8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <__gnu_Unwind_Save_VFP>:
 80015f0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <__gnu_Unwind_Restore_VFP_D>:
 80015f8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <__gnu_Unwind_Save_VFP_D>:
 8001600:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop

08001608 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001608:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001610:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <__gnu_Unwind_Restore_WMMXD>:
 8001618:	ecf0 0102 	ldfe	f0, [r0], #8
 800161c:	ecf0 1102 	ldfe	f1, [r0], #8
 8001620:	ecf0 2102 	ldfe	f2, [r0], #8
 8001624:	ecf0 3102 	ldfe	f3, [r0], #8
 8001628:	ecf0 4102 	ldfe	f4, [r0], #8
 800162c:	ecf0 5102 	ldfe	f5, [r0], #8
 8001630:	ecf0 6102 	ldfe	f6, [r0], #8
 8001634:	ecf0 7102 	ldfe	f7, [r0], #8
 8001638:	ecf0 8102 	ldfp	f0, [r0], #8
 800163c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001640:	ecf0 a102 	ldfp	f2, [r0], #8
 8001644:	ecf0 b102 	ldfp	f3, [r0], #8
 8001648:	ecf0 c102 	ldfp	f4, [r0], #8
 800164c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001650:	ecf0 e102 	ldfp	f6, [r0], #8
 8001654:	ecf0 f102 	ldfp	f7, [r0], #8
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <__gnu_Unwind_Save_WMMXD>:
 800165c:	ece0 0102 	stfe	f0, [r0], #8
 8001660:	ece0 1102 	stfe	f1, [r0], #8
 8001664:	ece0 2102 	stfe	f2, [r0], #8
 8001668:	ece0 3102 	stfe	f3, [r0], #8
 800166c:	ece0 4102 	stfe	f4, [r0], #8
 8001670:	ece0 5102 	stfe	f5, [r0], #8
 8001674:	ece0 6102 	stfe	f6, [r0], #8
 8001678:	ece0 7102 	stfe	f7, [r0], #8
 800167c:	ece0 8102 	stfp	f0, [r0], #8
 8001680:	ece0 9102 	stfp	f1, [r0], #8
 8001684:	ece0 a102 	stfp	f2, [r0], #8
 8001688:	ece0 b102 	stfp	f3, [r0], #8
 800168c:	ece0 c102 	stfp	f4, [r0], #8
 8001690:	ece0 d102 	stfp	f5, [r0], #8
 8001694:	ece0 e102 	stfp	f6, [r0], #8
 8001698:	ece0 f102 	stfp	f7, [r0], #8
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <__gnu_Unwind_Restore_WMMXC>:
 80016a0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80016a4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80016a8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80016ac:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <__gnu_Unwind_Save_WMMXC>:
 80016b4:	fca0 8101 	stc2	1, cr8, [r0], #4
 80016b8:	fca0 9101 	stc2	1, cr9, [r0], #4
 80016bc:	fca0 a101 	stc2	1, cr10, [r0], #4
 80016c0:	fca0 b101 	stc2	1, cr11, [r0], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <_Unwind_RaiseException>:
 80016c8:	46ec      	mov	ip, sp
 80016ca:	b500      	push	{lr}
 80016cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80016dc:	a901      	add	r1, sp, #4
 80016de:	f7ff fbed 	bl	8000ebc <__gnu_Unwind_RaiseException>
 80016e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80016e6:	b012      	add	sp, #72	; 0x48
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <_Unwind_Resume>:
 80016ec:	46ec      	mov	ip, sp
 80016ee:	b500      	push	{lr}
 80016f0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001700:	a901      	add	r1, sp, #4
 8001702:	f7ff fc15 	bl	8000f30 <__gnu_Unwind_Resume>
 8001706:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800170a:	b012      	add	sp, #72	; 0x48
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop

08001710 <_Unwind_Resume_or_Rethrow>:
 8001710:	46ec      	mov	ip, sp
 8001712:	b500      	push	{lr}
 8001714:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001718:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001724:	a901      	add	r1, sp, #4
 8001726:	f7ff fc25 	bl	8000f74 <__gnu_Unwind_Resume_or_Rethrow>
 800172a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800172e:	b012      	add	sp, #72	; 0x48
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <_Unwind_ForcedUnwind>:
 8001734:	46ec      	mov	ip, sp
 8001736:	b500      	push	{lr}
 8001738:	e92d 5000 	stmdb	sp!, {ip, lr}
 800173c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001748:	ab01      	add	r3, sp, #4
 800174a:	f7ff fbe7 	bl	8000f1c <__gnu_Unwind_ForcedUnwind>
 800174e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001752:	b012      	add	sp, #72	; 0x48
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <_Unwind_Backtrace>:
 8001758:	46ec      	mov	ip, sp
 800175a:	b500      	push	{lr}
 800175c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001760:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e92d 000c 	stmdb	sp!, {r2, r3}
 800176c:	aa01      	add	r2, sp, #4
 800176e:	f7ff fc61 	bl	8001034 <__gnu_Unwind_Backtrace>
 8001772:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001776:	b012      	add	sp, #72	; 0x48
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <next_unwind_byte>:
 800177c:	7a02      	ldrb	r2, [r0, #8]
 800177e:	b91a      	cbnz	r2, 8001788 <next_unwind_byte+0xc>
 8001780:	7a43      	ldrb	r3, [r0, #9]
 8001782:	b943      	cbnz	r3, 8001796 <next_unwind_byte+0x1a>
 8001784:	20b0      	movs	r0, #176	; 0xb0
 8001786:	4770      	bx	lr
 8001788:	6803      	ldr	r3, [r0, #0]
 800178a:	3a01      	subs	r2, #1
 800178c:	7202      	strb	r2, [r0, #8]
 800178e:	021a      	lsls	r2, r3, #8
 8001790:	6002      	str	r2, [r0, #0]
 8001792:	0e18      	lsrs	r0, r3, #24
 8001794:	4770      	bx	lr
 8001796:	2103      	movs	r1, #3
 8001798:	6842      	ldr	r2, [r0, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	b410      	push	{r4}
 800179e:	7243      	strb	r3, [r0, #9]
 80017a0:	6813      	ldr	r3, [r2, #0]
 80017a2:	1d14      	adds	r4, r2, #4
 80017a4:	7201      	strb	r1, [r0, #8]
 80017a6:	021a      	lsls	r2, r3, #8
 80017a8:	6044      	str	r4, [r0, #4]
 80017aa:	6002      	str	r2, [r0, #0]
 80017ac:	bc10      	pop	{r4}
 80017ae:	0e18      	lsrs	r0, r3, #24
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop

080017b4 <_Unwind_GetGR.constprop.0>:
 80017b4:	2300      	movs	r3, #0
 80017b6:	b500      	push	{lr}
 80017b8:	b085      	sub	sp, #20
 80017ba:	aa03      	add	r2, sp, #12
 80017bc:	9200      	str	r2, [sp, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	220c      	movs	r2, #12
 80017c2:	f7ff fbe9 	bl	8000f98 <_Unwind_VRS_Get>
 80017c6:	9803      	ldr	r0, [sp, #12]
 80017c8:	b005      	add	sp, #20
 80017ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ce:	bf00      	nop

080017d0 <unwind_UCB_from_context>:
 80017d0:	e7f0      	b.n	80017b4 <_Unwind_GetGR.constprop.0>
 80017d2:	bf00      	nop

080017d4 <__gnu_unwind_execute>:
 80017d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d8:	4606      	mov	r6, r0
 80017da:	460f      	mov	r7, r1
 80017dc:	f04f 0800 	mov.w	r8, #0
 80017e0:	b085      	sub	sp, #20
 80017e2:	4638      	mov	r0, r7
 80017e4:	f7ff ffca 	bl	800177c <next_unwind_byte>
 80017e8:	28b0      	cmp	r0, #176	; 0xb0
 80017ea:	4604      	mov	r4, r0
 80017ec:	d023      	beq.n	8001836 <__gnu_unwind_execute+0x62>
 80017ee:	0605      	lsls	r5, r0, #24
 80017f0:	d427      	bmi.n	8001842 <__gnu_unwind_execute+0x6e>
 80017f2:	2300      	movs	r3, #0
 80017f4:	f10d 090c 	add.w	r9, sp, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	0085      	lsls	r5, r0, #2
 80017fc:	220d      	movs	r2, #13
 80017fe:	f8cd 9000 	str.w	r9, [sp]
 8001802:	4630      	mov	r0, r6
 8001804:	f7ff fbc8 	bl	8000f98 <_Unwind_VRS_Get>
 8001808:	b2ed      	uxtb	r5, r5
 800180a:	9b03      	ldr	r3, [sp, #12]
 800180c:	0660      	lsls	r0, r4, #25
 800180e:	f105 0504 	add.w	r5, r5, #4
 8001812:	bf4c      	ite	mi
 8001814:	1b5d      	submi	r5, r3, r5
 8001816:	18ed      	addpl	r5, r5, r3
 8001818:	2300      	movs	r3, #0
 800181a:	220d      	movs	r2, #13
 800181c:	4619      	mov	r1, r3
 800181e:	f8cd 9000 	str.w	r9, [sp]
 8001822:	4630      	mov	r0, r6
 8001824:	9503      	str	r5, [sp, #12]
 8001826:	f7ff fbdd 	bl	8000fe4 <_Unwind_VRS_Set>
 800182a:	4638      	mov	r0, r7
 800182c:	f7ff ffa6 	bl	800177c <next_unwind_byte>
 8001830:	28b0      	cmp	r0, #176	; 0xb0
 8001832:	4604      	mov	r4, r0
 8001834:	d1db      	bne.n	80017ee <__gnu_unwind_execute+0x1a>
 8001836:	f1b8 0f00 	cmp.w	r8, #0
 800183a:	f000 8094 	beq.w	8001966 <__gnu_unwind_execute+0x192>
 800183e:	2000      	movs	r0, #0
 8001840:	e01c      	b.n	800187c <__gnu_unwind_execute+0xa8>
 8001842:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001846:	2b80      	cmp	r3, #128	; 0x80
 8001848:	d05c      	beq.n	8001904 <__gnu_unwind_execute+0x130>
 800184a:	2b90      	cmp	r3, #144	; 0x90
 800184c:	d019      	beq.n	8001882 <__gnu_unwind_execute+0xae>
 800184e:	2ba0      	cmp	r3, #160	; 0xa0
 8001850:	d02c      	beq.n	80018ac <__gnu_unwind_execute+0xd8>
 8001852:	2bb0      	cmp	r3, #176	; 0xb0
 8001854:	d03e      	beq.n	80018d4 <__gnu_unwind_execute+0x100>
 8001856:	2bc0      	cmp	r3, #192	; 0xc0
 8001858:	d06b      	beq.n	8001932 <__gnu_unwind_execute+0x15e>
 800185a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800185e:	2bd0      	cmp	r3, #208	; 0xd0
 8001860:	d10b      	bne.n	800187a <__gnu_unwind_execute+0xa6>
 8001862:	f000 0207 	and.w	r2, r0, #7
 8001866:	3201      	adds	r2, #1
 8001868:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800186c:	2305      	movs	r3, #5
 800186e:	2101      	movs	r1, #1
 8001870:	4630      	mov	r0, r6
 8001872:	f7ff fd87 	bl	8001384 <_Unwind_VRS_Pop>
 8001876:	2800      	cmp	r0, #0
 8001878:	d0b3      	beq.n	80017e2 <__gnu_unwind_execute+0xe>
 800187a:	2009      	movs	r0, #9
 800187c:	b005      	add	sp, #20
 800187e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001882:	f000 030d 	and.w	r3, r0, #13
 8001886:	2b0d      	cmp	r3, #13
 8001888:	d0f7      	beq.n	800187a <__gnu_unwind_execute+0xa6>
 800188a:	2300      	movs	r3, #0
 800188c:	ad03      	add	r5, sp, #12
 800188e:	f000 020f 	and.w	r2, r0, #15
 8001892:	4619      	mov	r1, r3
 8001894:	9500      	str	r5, [sp, #0]
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff fb7e 	bl	8000f98 <_Unwind_VRS_Get>
 800189c:	2300      	movs	r3, #0
 800189e:	9500      	str	r5, [sp, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	220d      	movs	r2, #13
 80018a4:	4630      	mov	r0, r6
 80018a6:	f7ff fb9d 	bl	8000fe4 <_Unwind_VRS_Set>
 80018aa:	e79a      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 80018ac:	43c3      	mvns	r3, r0
 80018ae:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	411a      	asrs	r2, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	0701      	lsls	r1, r0, #28
 80018bc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80018c0:	bf48      	it	mi
 80018c2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80018c6:	4619      	mov	r1, r3
 80018c8:	4630      	mov	r0, r6
 80018ca:	f7ff fd5b 	bl	8001384 <_Unwind_VRS_Pop>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d1d3      	bne.n	800187a <__gnu_unwind_execute+0xa6>
 80018d2:	e786      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 80018d4:	28b1      	cmp	r0, #177	; 0xb1
 80018d6:	d057      	beq.n	8001988 <__gnu_unwind_execute+0x1b4>
 80018d8:	28b2      	cmp	r0, #178	; 0xb2
 80018da:	d068      	beq.n	80019ae <__gnu_unwind_execute+0x1da>
 80018dc:	28b3      	cmp	r0, #179	; 0xb3
 80018de:	f000 8095 	beq.w	8001a0c <__gnu_unwind_execute+0x238>
 80018e2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80018e6:	2bb4      	cmp	r3, #180	; 0xb4
 80018e8:	d0c7      	beq.n	800187a <__gnu_unwind_execute+0xa6>
 80018ea:	2301      	movs	r3, #1
 80018ec:	f000 0207 	and.w	r2, r0, #7
 80018f0:	441a      	add	r2, r3
 80018f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018f6:	4619      	mov	r1, r3
 80018f8:	4630      	mov	r0, r6
 80018fa:	f7ff fd43 	bl	8001384 <_Unwind_VRS_Pop>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d1bb      	bne.n	800187a <__gnu_unwind_execute+0xa6>
 8001902:	e76e      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 8001904:	4638      	mov	r0, r7
 8001906:	f7ff ff39 	bl	800177c <next_unwind_byte>
 800190a:	0224      	lsls	r4, r4, #8
 800190c:	4304      	orrs	r4, r0
 800190e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001912:	d0b2      	beq.n	800187a <__gnu_unwind_execute+0xa6>
 8001914:	2300      	movs	r3, #0
 8001916:	0124      	lsls	r4, r4, #4
 8001918:	b2a2      	uxth	r2, r4
 800191a:	4619      	mov	r1, r3
 800191c:	4630      	mov	r0, r6
 800191e:	f7ff fd31 	bl	8001384 <_Unwind_VRS_Pop>
 8001922:	2800      	cmp	r0, #0
 8001924:	d1a9      	bne.n	800187a <__gnu_unwind_execute+0xa6>
 8001926:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800192a:	bf18      	it	ne
 800192c:	f04f 0801 	movne.w	r8, #1
 8001930:	e757      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 8001932:	28c6      	cmp	r0, #198	; 0xc6
 8001934:	d07d      	beq.n	8001a32 <__gnu_unwind_execute+0x25e>
 8001936:	28c7      	cmp	r0, #199	; 0xc7
 8001938:	f000 8086 	beq.w	8001a48 <__gnu_unwind_execute+0x274>
 800193c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001940:	2bc0      	cmp	r3, #192	; 0xc0
 8001942:	f000 8094 	beq.w	8001a6e <__gnu_unwind_execute+0x29a>
 8001946:	28c8      	cmp	r0, #200	; 0xc8
 8001948:	f000 809f 	beq.w	8001a8a <__gnu_unwind_execute+0x2b6>
 800194c:	28c9      	cmp	r0, #201	; 0xc9
 800194e:	d194      	bne.n	800187a <__gnu_unwind_execute+0xa6>
 8001950:	4638      	mov	r0, r7
 8001952:	f7ff ff13 	bl	800177c <next_unwind_byte>
 8001956:	0302      	lsls	r2, r0, #12
 8001958:	f000 000f 	and.w	r0, r0, #15
 800195c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001960:	3001      	adds	r0, #1
 8001962:	4302      	orrs	r2, r0
 8001964:	e782      	b.n	800186c <__gnu_unwind_execute+0x98>
 8001966:	ac03      	add	r4, sp, #12
 8001968:	4643      	mov	r3, r8
 800196a:	220e      	movs	r2, #14
 800196c:	4641      	mov	r1, r8
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	4630      	mov	r0, r6
 8001972:	f7ff fb11 	bl	8000f98 <_Unwind_VRS_Get>
 8001976:	9400      	str	r4, [sp, #0]
 8001978:	4630      	mov	r0, r6
 800197a:	4643      	mov	r3, r8
 800197c:	220f      	movs	r2, #15
 800197e:	4641      	mov	r1, r8
 8001980:	f7ff fb30 	bl	8000fe4 <_Unwind_VRS_Set>
 8001984:	4640      	mov	r0, r8
 8001986:	e779      	b.n	800187c <__gnu_unwind_execute+0xa8>
 8001988:	4638      	mov	r0, r7
 800198a:	f7ff fef7 	bl	800177c <next_unwind_byte>
 800198e:	2800      	cmp	r0, #0
 8001990:	f43f af73 	beq.w	800187a <__gnu_unwind_execute+0xa6>
 8001994:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001998:	f47f af6f 	bne.w	800187a <__gnu_unwind_execute+0xa6>
 800199c:	4602      	mov	r2, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4630      	mov	r0, r6
 80019a2:	f7ff fcef 	bl	8001384 <_Unwind_VRS_Pop>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	f47f af67 	bne.w	800187a <__gnu_unwind_execute+0xa6>
 80019ac:	e719      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 80019ae:	2300      	movs	r3, #0
 80019b0:	f10d 090c 	add.w	r9, sp, #12
 80019b4:	220d      	movs	r2, #13
 80019b6:	4619      	mov	r1, r3
 80019b8:	f8cd 9000 	str.w	r9, [sp]
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff faeb 	bl	8000f98 <_Unwind_VRS_Get>
 80019c2:	4638      	mov	r0, r7
 80019c4:	f7ff feda 	bl	800177c <next_unwind_byte>
 80019c8:	0602      	lsls	r2, r0, #24
 80019ca:	f04f 0402 	mov.w	r4, #2
 80019ce:	d50c      	bpl.n	80019ea <__gnu_unwind_execute+0x216>
 80019d0:	9b03      	ldr	r3, [sp, #12]
 80019d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80019d6:	40a0      	lsls	r0, r4
 80019d8:	4403      	add	r3, r0
 80019da:	4638      	mov	r0, r7
 80019dc:	9303      	str	r3, [sp, #12]
 80019de:	f7ff fecd 	bl	800177c <next_unwind_byte>
 80019e2:	0603      	lsls	r3, r0, #24
 80019e4:	f104 0407 	add.w	r4, r4, #7
 80019e8:	d4f2      	bmi.n	80019d0 <__gnu_unwind_execute+0x1fc>
 80019ea:	2300      	movs	r3, #0
 80019ec:	9903      	ldr	r1, [sp, #12]
 80019ee:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80019f2:	40a2      	lsls	r2, r4
 80019f4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 80019f8:	188c      	adds	r4, r1, r2
 80019fa:	f8cd 9000 	str.w	r9, [sp]
 80019fe:	4619      	mov	r1, r3
 8001a00:	220d      	movs	r2, #13
 8001a02:	4630      	mov	r0, r6
 8001a04:	9403      	str	r4, [sp, #12]
 8001a06:	f7ff faed 	bl	8000fe4 <_Unwind_VRS_Set>
 8001a0a:	e6ea      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	f7ff feb5 	bl	800177c <next_unwind_byte>
 8001a12:	2301      	movs	r3, #1
 8001a14:	0301      	lsls	r1, r0, #12
 8001a16:	f000 000f 	and.w	r0, r0, #15
 8001a1a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001a1e:	18c2      	adds	r2, r0, r3
 8001a20:	430a      	orrs	r2, r1
 8001a22:	4630      	mov	r0, r6
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff fcad 	bl	8001384 <_Unwind_VRS_Pop>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	f47f af25 	bne.w	800187a <__gnu_unwind_execute+0xa6>
 8001a30:	e6d7      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 8001a32:	4638      	mov	r0, r7
 8001a34:	f7ff fea2 	bl	800177c <next_unwind_byte>
 8001a38:	0301      	lsls	r1, r0, #12
 8001a3a:	f000 000f 	and.w	r0, r0, #15
 8001a3e:	2303      	movs	r3, #3
 8001a40:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001a44:	1c42      	adds	r2, r0, #1
 8001a46:	e7eb      	b.n	8001a20 <__gnu_unwind_execute+0x24c>
 8001a48:	4638      	mov	r0, r7
 8001a4a:	f7ff fe97 	bl	800177c <next_unwind_byte>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	f43f af13 	beq.w	800187a <__gnu_unwind_execute+0xa6>
 8001a54:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001a58:	f47f af0f 	bne.w	800187a <__gnu_unwind_execute+0xa6>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4630      	mov	r0, r6
 8001a62:	f7ff fc8f 	bl	8001384 <_Unwind_VRS_Pop>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	f47f af07 	bne.w	800187a <__gnu_unwind_execute+0xa6>
 8001a6c:	e6b9      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f000 020f 	and.w	r2, r0, #15
 8001a74:	3201      	adds	r2, #1
 8001a76:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	f7ff fc81 	bl	8001384 <_Unwind_VRS_Pop>
 8001a82:	2800      	cmp	r0, #0
 8001a84:	f47f aef9 	bne.w	800187a <__gnu_unwind_execute+0xa6>
 8001a88:	e6ab      	b.n	80017e2 <__gnu_unwind_execute+0xe>
 8001a8a:	4638      	mov	r0, r7
 8001a8c:	f7ff fe76 	bl	800177c <next_unwind_byte>
 8001a90:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001a94:	f000 030f 	and.w	r3, r0, #15
 8001a98:	3210      	adds	r2, #16
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001aa0:	e6e4      	b.n	800186c <__gnu_unwind_execute+0x98>
 8001aa2:	bf00      	nop

08001aa4 <__gnu_unwind_frame>:
 8001aa4:	b530      	push	{r4, r5, lr}
 8001aa6:	2403      	movs	r4, #3
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001aac:	b085      	sub	sp, #20
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	f88d 400c 	strb.w	r4, [sp, #12]
 8001ab4:	79dc      	ldrb	r4, [r3, #7]
 8001ab6:	0212      	lsls	r2, r2, #8
 8001ab8:	3308      	adds	r3, #8
 8001aba:	a901      	add	r1, sp, #4
 8001abc:	4628      	mov	r0, r5
 8001abe:	9201      	str	r2, [sp, #4]
 8001ac0:	f88d 400d 	strb.w	r4, [sp, #13]
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	f7ff fe85 	bl	80017d4 <__gnu_unwind_execute>
 8001aca:	b005      	add	sp, #20
 8001acc:	bd30      	pop	{r4, r5, pc}
 8001ace:	bf00      	nop

08001ad0 <_Unwind_GetRegionStart>:
 8001ad0:	b508      	push	{r3, lr}
 8001ad2:	f7ff fe7d 	bl	80017d0 <unwind_UCB_from_context>
 8001ad6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop

08001adc <_Unwind_GetLanguageSpecificData>:
 8001adc:	b508      	push	{r3, lr}
 8001ade:	f7ff fe77 	bl	80017d0 <unwind_UCB_from_context>
 8001ae2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001ae4:	79c3      	ldrb	r3, [r0, #7]
 8001ae6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001aea:	3008      	adds	r0, #8
 8001aec:	bd08      	pop	{r3, pc}
 8001aee:	bf00      	nop

08001af0 <_Unwind_GetTextRelBase>:
 8001af0:	b508      	push	{r3, lr}
 8001af2:	f008 fc41 	bl	800a378 <abort>
 8001af6:	bf00      	nop

08001af8 <_Unwind_GetDataRelBase>:
 8001af8:	b508      	push	{r3, lr}
 8001afa:	f7ff fff9 	bl	8001af0 <_Unwind_GetTextRelBase>
 8001afe:	bf00      	nop

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b510      	push	{r4, lr}
 8001b02:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_InitTick+0x40>)
 8001b06:	7818      	ldrb	r0, [r3, #0]
 8001b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_InitTick+0x44>)
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b18:	f000 f88e 	bl	8001c38 <HAL_SYSTICK_Config>
 8001b1c:	b968      	cbnz	r0, 8001b3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	2c0f      	cmp	r4, #15
 8001b20:	d901      	bls.n	8001b26 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001b24:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b26:	2200      	movs	r2, #0
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2e:	f000 f843 	bl	8001bb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_InitTick+0x48>)
 8001b34:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001b36:	2000      	movs	r0, #0
 8001b38:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_Init>:
{
 8001b4c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4e:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x20>)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f81b 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff ffce 	bl	8001b00 <HAL_InitTick>
  HAL_MspInit();
 8001b64:	f006 fb5c 	bl	8008220 <HAL_MspInit>
}
 8001b68:	2000      	movs	r0, #0
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x10>)
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_IncTick+0x14>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	440b      	add	r3, r1
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20002c7c 	.word	0x20002c7c
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b88:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <HAL_GetTick+0x8>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20002c7c 	.word	0x20002c7c

08001b94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba0:	0200      	lsls	r0, r0, #8
 8001ba2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001ba8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001bac:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001bb0:	60d0      	str	r0, [r2, #12]
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_NVIC_SetPriority+0x5c>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc2:	f1c3 0407 	rsb	r4, r3, #7
 8001bc6:	2c04      	cmp	r4, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bcc:	1d1d      	adds	r5, r3, #4
 8001bce:	2d06      	cmp	r5, #6
 8001bd0:	d917      	bls.n	8001c02 <HAL_NVIC_SetPriority+0x4a>
 8001bd2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	2501      	movs	r5, #1
 8001bd6:	fa05 f404 	lsl.w	r4, r5, r4
 8001bda:	3c01      	subs	r4, #1
 8001bdc:	4021      	ands	r1, r4
 8001bde:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	fa05 f303 	lsl.w	r3, r5, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001bea:	2800      	cmp	r0, #0
 8001bec:	db0b      	blt.n	8001c06 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	0109      	lsls	r1, r1, #4
 8001bf0:	b2c9      	uxtb	r1, r1
 8001bf2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001bf6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001bfa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bfe:	bc30      	pop	{r4, r5}
 8001c00:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	2300      	movs	r3, #0
 8001c04:	e7e6      	b.n	8001bd4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	f000 000f 	and.w	r0, r0, #15
 8001c0a:	0109      	lsls	r1, r1, #4
 8001c0c:	b2c9      	uxtb	r1, r1
 8001c0e:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <HAL_NVIC_SetPriority+0x60>)
 8001c10:	5419      	strb	r1, [r3, r0]
 8001c12:	e7f4      	b.n	8001bfe <HAL_NVIC_SetPriority+0x46>
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	e000ed14 	.word	0xe000ed14

08001c1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	db08      	blt.n	8001c32 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c20:	0942      	lsrs	r2, r0, #5
 8001c22:	f000 001f 	and.w	r0, r0, #31
 8001c26:	2301      	movs	r3, #1
 8001c28:	fa03 f000 	lsl.w	r0, r3, r0
 8001c2c:	4b01      	ldr	r3, [pc, #4]	; (8001c34 <HAL_NVIC_EnableIRQ+0x18>)
 8001c2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	3801      	subs	r0, #1
 8001c3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c3e:	d20a      	bcs.n	8001c56 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_SYSTICK_Config+0x24>)
 8001c42:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	21f0      	movs	r1, #240	; 0xf0
 8001c46:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_SYSTICK_Config+0x28>)
 8001c48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c66:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001c68:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001c6a:	2401      	movs	r4, #1
 8001c6c:	40b4      	lsls	r4, r6
 8001c6e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c70:	6804      	ldr	r4, [r0, #0]
 8001c72:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c74:	6843      	ldr	r3, [r0, #4]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d005      	beq.n	8001c86 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c7a:	6803      	ldr	r3, [r0, #0]
 8001c7c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c7e:	6803      	ldr	r3, [r0, #0]
 8001c80:	60da      	str	r2, [r3, #12]
  }
}
 8001c82:	bc70      	pop	{r4, r5, r6}
 8001c84:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001c86:	6803      	ldr	r3, [r0, #0]
 8001c88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c8a:	6803      	ldr	r3, [r0, #0]
 8001c8c:	60d9      	str	r1, [r3, #12]
 8001c8e:	e7f8      	b.n	8001c82 <DMA_SetConfig+0x1e>

08001c90 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001c90:	b360      	cbz	r0, 8001cec <HAL_DMA_Init+0x5c>
{
 8001c92:	b410      	push	{r4}
 8001c94:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c96:	6800      	ldr	r0, [r0, #0]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_DMA_Init+0x60>)
 8001c9a:	4402      	add	r2, r0
 8001c9c:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <HAL_DMA_Init+0x64>)
 8001c9e:	fba1 1202 	umull	r1, r2, r1, r2
 8001ca2:	0912      	lsrs	r2, r2, #4
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_DMA_Init+0x68>)
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001cb2:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cb4:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8001cb8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001cbc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cc0:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	68dc      	ldr	r4, [r3, #12]
 8001cc4:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc8:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	695c      	ldr	r4, [r3, #20]
 8001ccc:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cce:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd2:	69dc      	ldr	r4, [r3, #28]
 8001cd4:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001cd6:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8001cd8:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cda:	2000      	movs	r0, #0
 8001cdc:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001ce4:	f883 0020 	strb.w	r0, [r3, #32]
}
 8001ce8:	bc10      	pop	{r4}
 8001cea:	4770      	bx	lr
    return HAL_ERROR;
 8001cec:	2001      	movs	r0, #1
 8001cee:	4770      	bx	lr
 8001cf0:	bffdfff8 	.word	0xbffdfff8
 8001cf4:	cccccccd 	.word	0xcccccccd
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_DMA_Start_IT>:
{
 8001cfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001cfe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001d02:	2c01      	cmp	r4, #1
 8001d04:	d032      	beq.n	8001d6c <HAL_DMA_Start_IT+0x70>
 8001d06:	2401      	movs	r4, #1
 8001d08:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001d10:	2c01      	cmp	r4, #1
 8001d12:	d004      	beq.n	8001d1e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001d14:	2300      	movs	r3, #0
 8001d16:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	bd38      	pop	{r3, r4, r5, pc}
 8001d1e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d20:	2002      	movs	r0, #2
 8001d22:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d26:	2000      	movs	r0, #0
 8001d28:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001d2a:	6825      	ldr	r5, [r4, #0]
 8001d2c:	6828      	ldr	r0, [r5, #0]
 8001d2e:	f020 0001 	bic.w	r0, r0, #1
 8001d32:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff ff95 	bl	8001c64 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d3c:	b15b      	cbz	r3, 8001d56 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	f043 030e 	orr.w	r3, r3, #14
 8001d46:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2000      	movs	r0, #0
 8001d54:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f043 030a 	orr.w	r3, r3, #10
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e7ed      	b.n	8001d48 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001d6c:	2002      	movs	r0, #2
}
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}

08001d70 <HAL_DMA_Abort_IT>:
{  
 8001d70:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d72:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	6802      	ldr	r2, [r0, #0]
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	f023 030e 	bic.w	r3, r3, #14
 8001d8a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d8c:	6802      	ldr	r2, [r0, #0]
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d96:	6803      	ldr	r3, [r0, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_DMA_Abort_IT+0x90>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d014      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x58>
 8001d9e:	3214      	adds	r2, #20
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d01f      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x74>
 8001da4:	3214      	adds	r2, #20
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01e      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x78>
 8001daa:	3214      	adds	r2, #20
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d01e      	beq.n	8001dee <HAL_DMA_Abort_IT+0x7e>
 8001db0:	3214      	adds	r2, #20
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01e      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x84>
 8001db6:	3214      	adds	r2, #20
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d002      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x52>
 8001dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc0:	e003      	b.n	8001dca <HAL_DMA_Abort_IT+0x5a>
 8001dc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dc6:	e000      	b.n	8001dca <HAL_DMA_Abort_IT+0x5a>
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_DMA_Abort_IT+0x94>)
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001dda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ddc:	b16b      	cbz	r3, 8001dfa <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001dde:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2000      	movs	r0, #0
 8001de2:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001de4:	2210      	movs	r2, #16
 8001de6:	e7f0      	b.n	8001dca <HAL_DMA_Abort_IT+0x5a>
 8001de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dec:	e7ed      	b.n	8001dca <HAL_DMA_Abort_IT+0x5a>
 8001dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df2:	e7ea      	b.n	8001dca <HAL_DMA_Abort_IT+0x5a>
 8001df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001df8:	e7e7      	b.n	8001dca <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2000      	movs	r0, #0
}
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020008 	.word	0x40020008
 8001e04:	40020000 	.word	0x40020000

08001e08 <HAL_DMA_IRQHandler>:
{
 8001e08:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e0a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001e0c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e0e:	6804      	ldr	r4, [r0, #0]
 8001e10:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e12:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e14:	2304      	movs	r3, #4
 8001e16:	408b      	lsls	r3, r1
 8001e18:	421a      	tst	r2, r3
 8001e1a:	d036      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x82>
 8001e1c:	f015 0f04 	tst.w	r5, #4
 8001e20:	d033      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x82>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f013 0f20 	tst.w	r3, #32
 8001e28:	d103      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e32:	6803      	ldr	r3, [r0, #0]
 8001e34:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <HAL_DMA_IRQHandler+0x13c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d014      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x5c>
 8001e3a:	3214      	adds	r2, #20
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d019      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x6c>
 8001e40:	3214      	adds	r2, #20
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x70>
 8001e46:	3214      	adds	r2, #20
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x76>
 8001e4c:	3214      	adds	r2, #20
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d018      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x7c>
 8001e52:	3214      	adds	r2, #20
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d002      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x56>
 8001e58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e5c:	e003      	b.n	8001e66 <HAL_DMA_IRQHandler+0x5e>
 8001e5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x5e>
 8001e64:	2204      	movs	r2, #4
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_DMA_IRQHandler+0x140>)
 8001e68:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d067      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x138>
      hdma->XferHalfCpltCallback(hdma);
 8001e70:	4798      	blx	r3
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e74:	2240      	movs	r2, #64	; 0x40
 8001e76:	e7f6      	b.n	8001e66 <HAL_DMA_IRQHandler+0x5e>
 8001e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7c:	e7f3      	b.n	8001e66 <HAL_DMA_IRQHandler+0x5e>
 8001e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e82:	e7f0      	b.n	8001e66 <HAL_DMA_IRQHandler+0x5e>
 8001e84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e88:	e7ed      	b.n	8001e66 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	408b      	lsls	r3, r1
 8001e8e:	421a      	tst	r2, r3
 8001e90:	d03b      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x102>
 8001e92:	f015 0f02 	tst.w	r5, #2
 8001e96:	d038      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	f013 0f20 	tst.w	r3, #32
 8001e9e:	d106      	bne.n	8001eae <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	f023 030a 	bic.w	r3, r3, #10
 8001ea6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001eae:	6803      	ldr	r3, [r0, #0]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_DMA_IRQHandler+0x13c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d014      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0xd8>
 8001eb6:	3214      	adds	r2, #20
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d01b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xec>
 8001ebc:	3214      	adds	r2, #20
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01a      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xf0>
 8001ec2:	3214      	adds	r2, #20
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d01a      	beq.n	8001efe <HAL_DMA_IRQHandler+0xf6>
 8001ec8:	3214      	adds	r2, #20
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01a      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xfc>
 8001ece:	3214      	adds	r2, #20
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d002      	beq.n	8001eda <HAL_DMA_IRQHandler+0xd2>
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed8:	e003      	b.n	8001ee2 <HAL_DMA_IRQHandler+0xda>
 8001eda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_IRQHandler+0xda>
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_DMA_IRQHandler+0x140>)
 8001ee4:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001eec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001eee:	b33b      	cbz	r3, 8001f40 <HAL_DMA_IRQHandler+0x138>
      hdma->XferCpltCallback(hdma);
 8001ef0:	4798      	blx	r3
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	e7f4      	b.n	8001ee2 <HAL_DMA_IRQHandler+0xda>
 8001ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efc:	e7f1      	b.n	8001ee2 <HAL_DMA_IRQHandler+0xda>
 8001efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f02:	e7ee      	b.n	8001ee2 <HAL_DMA_IRQHandler+0xda>
 8001f04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f08:	e7eb      	b.n	8001ee2 <HAL_DMA_IRQHandler+0xda>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	fa03 f101 	lsl.w	r1, r3, r1
 8001f10:	420a      	tst	r2, r1
 8001f12:	d015      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x138>
 8001f14:	f015 0f08 	tst.w	r5, #8
 8001f18:	d012      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x138>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	f023 030e 	bic.w	r3, r3, #14
 8001f20:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f22:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001f26:	2301      	movs	r3, #1
 8001f28:	fa03 f202 	lsl.w	r2, r3, r2
 8001f2c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f2e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001f30:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001f34:	2300      	movs	r3, #0
 8001f36:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001f3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f3c:	b103      	cbz	r3, 8001f40 <HAL_DMA_IRQHandler+0x138>
      hdma->XferErrorCallback(hdma);
 8001f3e:	4798      	blx	r3
 8001f40:	bd38      	pop	{r3, r4, r5, pc}
 8001f42:	bf00      	nop
 8001f44:	40020008 	.word	0x40020008
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f50:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001f52:	4634      	mov	r4, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f54:	e071      	b.n	800203a <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f56:	2d00      	cmp	r5, #0
 8001f58:	f000 80a2 	beq.w	80020a0 <HAL_GPIO_Init+0x154>
 8001f5c:	2d01      	cmp	r5, #1
 8001f5e:	d100      	bne.n	8001f62 <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f60:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f62:	2bff      	cmp	r3, #255	; 0xff
 8001f64:	f200 80b0 	bhi.w	80020c8 <HAL_GPIO_Init+0x17c>
 8001f68:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f6a:	2bff      	cmp	r3, #255	; 0xff
 8001f6c:	f200 80af 	bhi.w	80020ce <HAL_GPIO_Init+0x182>
 8001f70:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f72:	f8de 2000 	ldr.w	r2, [lr]
 8001f76:	270f      	movs	r7, #15
 8001f78:	40af      	lsls	r7, r5
 8001f7a:	ea22 0207 	bic.w	r2, r2, r7
 8001f7e:	fa06 f505 	lsl.w	r5, r6, r5
 8001f82:	432a      	orrs	r2, r5
 8001f84:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f88:	684a      	ldr	r2, [r1, #4]
 8001f8a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001f8e:	d053      	beq.n	8002038 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f90:	4a64      	ldr	r2, [pc, #400]	; (8002124 <HAL_GPIO_Init+0x1d8>)
 8001f92:	6995      	ldr	r5, [r2, #24]
 8001f94:	f045 0501 	orr.w	r5, r5, #1
 8001f98:	6195      	str	r5, [r2, #24]
 8001f9a:	6992      	ldr	r2, [r2, #24]
 8001f9c:	f002 0201 	and.w	r2, r2, #1
 8001fa0:	9201      	str	r2, [sp, #4]
 8001fa2:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa4:	08a5      	lsrs	r5, r4, #2
 8001fa6:	1caf      	adds	r7, r5, #2
 8001fa8:	4a5f      	ldr	r2, [pc, #380]	; (8002128 <HAL_GPIO_Init+0x1dc>)
 8001faa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fae:	f004 0703 	and.w	r7, r4, #3
 8001fb2:	00bf      	lsls	r7, r7, #2
 8001fb4:	f04f 0e0f 	mov.w	lr, #15
 8001fb8:	fa0e fe07 	lsl.w	lr, lr, r7
 8001fbc:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc0:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002138 <HAL_GPIO_Init+0x1ec>
 8001fc4:	4570      	cmp	r0, lr
 8001fc6:	f000 8089 	beq.w	80020dc <HAL_GPIO_Init+0x190>
 8001fca:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001fce:	4570      	cmp	r0, lr
 8001fd0:	f000 8087 	beq.w	80020e2 <HAL_GPIO_Init+0x196>
 8001fd4:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001fd8:	4570      	cmp	r0, lr
 8001fda:	f000 8085 	beq.w	80020e8 <HAL_GPIO_Init+0x19c>
 8001fde:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001fe2:	4570      	cmp	r0, lr
 8001fe4:	d077      	beq.n	80020d6 <HAL_GPIO_Init+0x18a>
 8001fe6:	f04f 0e04 	mov.w	lr, #4
 8001fea:	fa0e f707 	lsl.w	r7, lr, r7
 8001fee:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff0:	3502      	adds	r5, #2
 8001ff2:	4f4d      	ldr	r7, [pc, #308]	; (8002128 <HAL_GPIO_Init+0x1dc>)
 8001ff4:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff8:	684a      	ldr	r2, [r1, #4]
 8001ffa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001ffe:	d076      	beq.n	80020ee <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002000:	4d4a      	ldr	r5, [pc, #296]	; (800212c <HAL_GPIO_Init+0x1e0>)
 8002002:	682a      	ldr	r2, [r5, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002008:	684a      	ldr	r2, [r1, #4]
 800200a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800200e:	d074      	beq.n	80020fa <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002010:	4d46      	ldr	r5, [pc, #280]	; (800212c <HAL_GPIO_Init+0x1e0>)
 8002012:	686a      	ldr	r2, [r5, #4]
 8002014:	431a      	orrs	r2, r3
 8002016:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002018:	684a      	ldr	r2, [r1, #4]
 800201a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800201e:	d072      	beq.n	8002106 <HAL_GPIO_Init+0x1ba>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002020:	4d42      	ldr	r5, [pc, #264]	; (800212c <HAL_GPIO_Init+0x1e0>)
 8002022:	68aa      	ldr	r2, [r5, #8]
 8002024:	431a      	orrs	r2, r3
 8002026:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002028:	684a      	ldr	r2, [r1, #4]
 800202a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800202e:	d070      	beq.n	8002112 <HAL_GPIO_Init+0x1c6>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002030:	4d3e      	ldr	r5, [pc, #248]	; (800212c <HAL_GPIO_Init+0x1e0>)
 8002032:	68ea      	ldr	r2, [r5, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002038:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	680b      	ldr	r3, [r1, #0]
 800203c:	fa33 f204 	lsrs.w	r2, r3, r4
 8002040:	d06d      	beq.n	800211e <HAL_GPIO_Init+0x1d2>
    ioposition = (0x01uL << position);
 8002042:	2201      	movs	r2, #1
 8002044:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8002048:	429a      	cmp	r2, r3
 800204a:	d1f5      	bne.n	8002038 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 800204c:	684d      	ldr	r5, [r1, #4]
 800204e:	2d12      	cmp	r5, #18
 8002050:	d030      	beq.n	80020b4 <HAL_GPIO_Init+0x168>
 8002052:	d80b      	bhi.n	800206c <HAL_GPIO_Init+0x120>
 8002054:	2d02      	cmp	r5, #2
 8002056:	d02a      	beq.n	80020ae <HAL_GPIO_Init+0x162>
 8002058:	f67f af7d 	bls.w	8001f56 <HAL_GPIO_Init+0xa>
 800205c:	2d03      	cmp	r5, #3
 800205e:	d02f      	beq.n	80020c0 <HAL_GPIO_Init+0x174>
 8002060:	2d11      	cmp	r5, #17
 8002062:	f47f af7e 	bne.w	8001f62 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002066:	68ce      	ldr	r6, [r1, #12]
 8002068:	3604      	adds	r6, #4
          break;
 800206a:	e77a      	b.n	8001f62 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800206c:	4f30      	ldr	r7, [pc, #192]	; (8002130 <HAL_GPIO_Init+0x1e4>)
 800206e:	42bd      	cmp	r5, r7
 8002070:	d016      	beq.n	80020a0 <HAL_GPIO_Init+0x154>
 8002072:	d90c      	bls.n	800208e <HAL_GPIO_Init+0x142>
 8002074:	4f2f      	ldr	r7, [pc, #188]	; (8002134 <HAL_GPIO_Init+0x1e8>)
 8002076:	42bd      	cmp	r5, r7
 8002078:	d012      	beq.n	80020a0 <HAL_GPIO_Init+0x154>
 800207a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800207e:	42bd      	cmp	r5, r7
 8002080:	d00e      	beq.n	80020a0 <HAL_GPIO_Init+0x154>
 8002082:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002086:	42bd      	cmp	r5, r7
 8002088:	f47f af6b 	bne.w	8001f62 <HAL_GPIO_Init+0x16>
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x154>
 800208e:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002092:	42bd      	cmp	r5, r7
 8002094:	d004      	beq.n	80020a0 <HAL_GPIO_Init+0x154>
 8002096:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800209a:	42bd      	cmp	r5, r7
 800209c:	f47f af61 	bne.w	8001f62 <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020a0:	688d      	ldr	r5, [r1, #8]
 80020a2:	b17d      	cbz	r5, 80020c4 <HAL_GPIO_Init+0x178>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a4:	2d01      	cmp	r5, #1
 80020a6:	d008      	beq.n	80020ba <HAL_GPIO_Init+0x16e>
            GPIOx->BRR = ioposition;
 80020a8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020aa:	2608      	movs	r6, #8
 80020ac:	e759      	b.n	8001f62 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ae:	68ce      	ldr	r6, [r1, #12]
 80020b0:	3608      	adds	r6, #8
          break;
 80020b2:	e756      	b.n	8001f62 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b4:	68ce      	ldr	r6, [r1, #12]
 80020b6:	360c      	adds	r6, #12
          break;
 80020b8:	e753      	b.n	8001f62 <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 80020ba:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2608      	movs	r6, #8
 80020be:	e750      	b.n	8001f62 <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c0:	2600      	movs	r6, #0
 80020c2:	e74e      	b.n	8001f62 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020c4:	2604      	movs	r6, #4
 80020c6:	e74c      	b.n	8001f62 <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020c8:	f100 0e04 	add.w	lr, r0, #4
 80020cc:	e74d      	b.n	8001f6a <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ce:	f1a4 0508 	sub.w	r5, r4, #8
 80020d2:	00ad      	lsls	r5, r5, #2
 80020d4:	e74d      	b.n	8001f72 <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d6:	f04f 0e03 	mov.w	lr, #3
 80020da:	e786      	b.n	8001fea <HAL_GPIO_Init+0x9e>
 80020dc:	f04f 0e00 	mov.w	lr, #0
 80020e0:	e783      	b.n	8001fea <HAL_GPIO_Init+0x9e>
 80020e2:	f04f 0e01 	mov.w	lr, #1
 80020e6:	e780      	b.n	8001fea <HAL_GPIO_Init+0x9e>
 80020e8:	f04f 0e02 	mov.w	lr, #2
 80020ec:	e77d      	b.n	8001fea <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ee:	4d0f      	ldr	r5, [pc, #60]	; (800212c <HAL_GPIO_Init+0x1e0>)
 80020f0:	682a      	ldr	r2, [r5, #0]
 80020f2:	ea22 0203 	bic.w	r2, r2, r3
 80020f6:	602a      	str	r2, [r5, #0]
 80020f8:	e786      	b.n	8002008 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fa:	4d0c      	ldr	r5, [pc, #48]	; (800212c <HAL_GPIO_Init+0x1e0>)
 80020fc:	686a      	ldr	r2, [r5, #4]
 80020fe:	ea22 0203 	bic.w	r2, r2, r3
 8002102:	606a      	str	r2, [r5, #4]
 8002104:	e788      	b.n	8002018 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002106:	4d09      	ldr	r5, [pc, #36]	; (800212c <HAL_GPIO_Init+0x1e0>)
 8002108:	68aa      	ldr	r2, [r5, #8]
 800210a:	ea22 0203 	bic.w	r2, r2, r3
 800210e:	60aa      	str	r2, [r5, #8]
 8002110:	e78a      	b.n	8002028 <HAL_GPIO_Init+0xdc>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002112:	4d06      	ldr	r5, [pc, #24]	; (800212c <HAL_GPIO_Init+0x1e0>)
 8002114:	68ea      	ldr	r2, [r5, #12]
 8002116:	ea22 0303 	bic.w	r3, r2, r3
 800211a:	60eb      	str	r3, [r5, #12]
 800211c:	e78c      	b.n	8002038 <HAL_GPIO_Init+0xec>
  }
}
 800211e:	b003      	add	sp, #12
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010400 	.word	0x40010400
 8002130:	10210000 	.word	0x10210000
 8002134:	10310000 	.word	0x10310000
 8002138:	40010800 	.word	0x40010800

0800213c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213c:	b912      	cbnz	r2, 8002144 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213e:	0409      	lsls	r1, r1, #16
 8002140:	6101      	str	r1, [r0, #16]
 8002142:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002144:	6101      	str	r1, [r0, #16]
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002148:	68c3      	ldr	r3, [r0, #12]
 800214a:	420b      	tst	r3, r1
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	6101      	str	r1, [r0, #16]
 8002150:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002152:	6141      	str	r1, [r0, #20]
 8002154:	4770      	bx	lr
	...

08002158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002158:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <RCC_Delay+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <RCC_Delay+0x28>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0a5b      	lsrs	r3, r3, #9
 8002166:	fb00 f003 	mul.w	r0, r0, r3
 800216a:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 800216c:	bf00      	nop
  }
  while (Delay --);
 800216e:	9b01      	ldr	r3, [sp, #4]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	9201      	str	r2, [sp, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f9      	bne.n	800216c <RCC_Delay+0x14>
}
 8002178:	b002      	add	sp, #8
 800217a:	4770      	bx	lr
 800217c:	20000008 	.word	0x20000008
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002184:	2800      	cmp	r0, #0
 8002186:	f000 81f5 	beq.w	8002574 <HAL_RCC_OscConfig+0x3f0>
{
 800218a:	b570      	push	{r4, r5, r6, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	f013 0f01 	tst.w	r3, #1
 8002196:	d03d      	beq.n	8002214 <HAL_RCC_OscConfig+0x90>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4bab      	ldr	r3, [pc, #684]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d02e      	beq.n	8002202 <HAL_RCC_OscConfig+0x7e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a4:	4ba8      	ldr	r3, [pc, #672]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d023      	beq.n	80021f8 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	6863      	ldr	r3, [r4, #4]
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b6:	d051      	beq.n	800225c <HAL_RCC_OscConfig+0xd8>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d155      	bne.n	8002268 <HAL_RCC_OscConfig+0xe4>
 80021bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d060      	beq.n	800229c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80021da:	f7ff fcd5 	bl	8001b88 <HAL_GetTick>
 80021de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e0:	4b99      	ldr	r3, [pc, #612]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021e8:	d114      	bne.n	8002214 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ea:	f7ff fccd 	bl	8001b88 <HAL_GetTick>
 80021ee:	1b40      	subs	r0, r0, r5
 80021f0:	2864      	cmp	r0, #100	; 0x64
 80021f2:	d9f5      	bls.n	80021e0 <HAL_RCC_OscConfig+0x5c>
            return HAL_TIMEOUT;
 80021f4:	2003      	movs	r0, #3
 80021f6:	e1c2      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f8:	4b93      	ldr	r3, [pc, #588]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002200:	d0d6      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b91      	ldr	r3, [pc, #580]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800220a:	d003      	beq.n	8002214 <HAL_RCC_OscConfig+0x90>
 800220c:	6863      	ldr	r3, [r4, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 81b2 	beq.w	8002578 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f013 0f02 	tst.w	r3, #2
 800221a:	d065      	beq.n	80022e8 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221c:	4b8a      	ldr	r3, [pc, #552]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f013 0f0c 	tst.w	r3, #12
 8002224:	d04e      	beq.n	80022c4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d043      	beq.n	80022ba <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002232:	6923      	ldr	r3, [r4, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d079      	beq.n	800232c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002238:	2201      	movs	r2, #1
 800223a:	4b84      	ldr	r3, [pc, #528]	; (800244c <HAL_RCC_OscConfig+0x2c8>)
 800223c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800223e:	f7ff fca3 	bl	8001b88 <HAL_GetTick>
 8002242:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b80      	ldr	r3, [pc, #512]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f013 0f02 	tst.w	r3, #2
 800224c:	d165      	bne.n	800231a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fc9b 	bl	8001b88 <HAL_GetTick>
 8002252:	1b40      	subs	r0, r0, r5
 8002254:	2802      	cmp	r0, #2
 8002256:	d9f5      	bls.n	8002244 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002258:	2003      	movs	r0, #3
 800225a:	e190      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	4a7a      	ldr	r2, [pc, #488]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 800225e:	6813      	ldr	r3, [r2, #0]
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e7b5      	b.n	80021d4 <HAL_RCC_OscConfig+0x50>
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d009      	beq.n	8002282 <HAL_RCC_OscConfig+0xfe>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e7a8      	b.n	80021d4 <HAL_RCC_OscConfig+0x50>
 8002282:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002286:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e79b      	b.n	80021d4 <HAL_RCC_OscConfig+0x50>
        tickstart = HAL_GetTick();
 800229c:	f7ff fc74 	bl	8001b88 <HAL_GetTick>
 80022a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b69      	ldr	r3, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022aa:	d0b3      	beq.n	8002214 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff fc6c 	bl	8001b88 <HAL_GetTick>
 80022b0:	1b40      	subs	r0, r0, r5
 80022b2:	2864      	cmp	r0, #100	; 0x64
 80022b4:	d9f5      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80022b6:	2003      	movs	r0, #3
 80022b8:	e161      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80022c2:	d1b6      	bne.n	8002232 <HAL_RCC_OscConfig+0xae>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c4:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f013 0f02 	tst.w	r3, #2
 80022cc:	d004      	beq.n	80022d8 <HAL_RCC_OscConfig+0x154>
 80022ce:	6923      	ldr	r3, [r4, #16]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e152      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4a5b      	ldr	r2, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022e0:	6961      	ldr	r1, [r4, #20]
 80022e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022e6:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f013 0f08 	tst.w	r3, #8
 80022ee:	d032      	beq.n	8002356 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f0:	69a3      	ldr	r3, [r4, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d06e      	beq.n	80023d4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_LSI_ENABLE();
 80022f6:	2201      	movs	r2, #1
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCC_OscConfig+0x2cc>)
 80022fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022fc:	f7ff fc44 	bl	8001b88 <HAL_GetTick>
 8002300:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f013 0f02 	tst.w	r3, #2
 800230a:	d121      	bne.n	8002350 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff fc3c 	bl	8001b88 <HAL_GetTick>
 8002310:	1b40      	subs	r0, r0, r5
 8002312:	2802      	cmp	r0, #2
 8002314:	d9f5      	bls.n	8002302 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002316:	2003      	movs	r0, #3
 8002318:	e131      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002322:	6961      	ldr	r1, [r4, #20]
 8002324:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e7dd      	b.n	80022e8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800232c:	2200      	movs	r2, #0
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_OscConfig+0x2c8>)
 8002330:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002332:	f7ff fc29 	bl	8001b88 <HAL_GetTick>
 8002336:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f013 0f02 	tst.w	r3, #2
 8002340:	d0d2      	beq.n	80022e8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7ff fc21 	bl	8001b88 <HAL_GetTick>
 8002346:	1b40      	subs	r0, r0, r5
 8002348:	2802      	cmp	r0, #2
 800234a:	d9f5      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800234c:	2003      	movs	r0, #3
 800234e:	e116      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff ff01 	bl	8002158 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	f013 0f04 	tst.w	r3, #4
 800235c:	f000 8098 	beq.w	8002490 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002368:	d146      	bne.n	80023f8 <HAL_RCC_OscConfig+0x274>
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002372:	61da      	str	r2, [r3, #28]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800237e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <HAL_RCC_OscConfig+0x2d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002388:	d038      	beq.n	80023fc <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238a:	68e3      	ldr	r3, [r4, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d049      	beq.n	8002424 <HAL_RCC_OscConfig+0x2a0>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d14d      	bne.n	8002430 <HAL_RCC_OscConfig+0x2ac>
 8002394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002398:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ac:	68e3      	ldr	r3, [r4, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d05c      	beq.n	800246c <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 80023b2:	f7ff fbe9 	bl	8001b88 <HAL_GetTick>
 80023b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f013 0f02 	tst.w	r3, #2
 80023c0:	d165      	bne.n	800248e <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7ff fbe1 	bl	8001b88 <HAL_GetTick>
 80023c6:	1b80      	subs	r0, r0, r6
 80023c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80023cc:	4298      	cmp	r0, r3
 80023ce:	d9f3      	bls.n	80023b8 <HAL_RCC_OscConfig+0x234>
          return HAL_TIMEOUT;
 80023d0:	2003      	movs	r0, #3
 80023d2:	e0d4      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_LSI_DISABLE();
 80023d4:	2200      	movs	r2, #0
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCC_OscConfig+0x2cc>)
 80023d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023da:	f7ff fbd5 	bl	8001b88 <HAL_GetTick>
 80023de:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f013 0f02 	tst.w	r3, #2
 80023e8:	d0b5      	beq.n	8002356 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff fbcd 	bl	8001b88 <HAL_GetTick>
 80023ee:	1b40      	subs	r0, r0, r5
 80023f0:	2802      	cmp	r0, #2
 80023f2:	d9f5      	bls.n	80023e0 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 80023f4:	2003      	movs	r0, #3
 80023f6:	e0c2      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 80023f8:	2500      	movs	r5, #0
 80023fa:	e7c1      	b.n	8002380 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <HAL_RCC_OscConfig+0x2d0>)
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002406:	f7ff fbbf 	bl	8001b88 <HAL_GetTick>
 800240a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_OscConfig+0x2d0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002414:	d1b9      	bne.n	800238a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7ff fbb7 	bl	8001b88 <HAL_GetTick>
 800241a:	1b80      	subs	r0, r0, r6
 800241c:	2864      	cmp	r0, #100	; 0x64
 800241e:	d9f5      	bls.n	800240c <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8002420:	2003      	movs	r0, #3
 8002422:	e0ac      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002426:	6a13      	ldr	r3, [r2, #32]
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	e7bd      	b.n	80023ac <HAL_RCC_OscConfig+0x228>
 8002430:	2b05      	cmp	r3, #5
 8002432:	d011      	beq.n	8002458 <HAL_RCC_OscConfig+0x2d4>
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_RCC_OscConfig+0x2c4>)
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	621a      	str	r2, [r3, #32]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	f022 0204 	bic.w	r2, r2, #4
 8002444:	621a      	str	r2, [r3, #32]
 8002446:	e7b1      	b.n	80023ac <HAL_RCC_OscConfig+0x228>
 8002448:	40021000 	.word	0x40021000
 800244c:	42420000 	.word	0x42420000
 8002450:	42420480 	.word	0x42420480
 8002454:	40007000 	.word	0x40007000
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_OscConfig+0x408>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	f042 0204 	orr.w	r2, r2, #4
 8002460:	621a      	str	r2, [r3, #32]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	621a      	str	r2, [r3, #32]
 800246a:	e79f      	b.n	80023ac <HAL_RCC_OscConfig+0x228>
      tickstart = HAL_GetTick();
 800246c:	f7ff fb8c 	bl	8001b88 <HAL_GetTick>
 8002470:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x408>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f013 0f02 	tst.w	r3, #2
 800247a:	d008      	beq.n	800248e <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7ff fb84 	bl	8001b88 <HAL_GetTick>
 8002480:	1b80      	subs	r0, r0, r6
 8002482:	f241 3388 	movw	r3, #5000	; 0x1388
 8002486:	4298      	cmp	r0, r3
 8002488:	d9f3      	bls.n	8002472 <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 800248a:	2003      	movs	r0, #3
 800248c:	e077      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 800248e:	b9e5      	cbnz	r5, 80024ca <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002490:	69e3      	ldr	r3, [r4, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d072      	beq.n	800257c <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002496:	4a3d      	ldr	r2, [pc, #244]	; (800258c <HAL_RCC_OscConfig+0x408>)
 8002498:	6852      	ldr	r2, [r2, #4]
 800249a:	f002 020c 	and.w	r2, r2, #12
 800249e:	2a08      	cmp	r2, #8
 80024a0:	d056      	beq.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d017      	beq.n	80024d6 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 80024a6:	2200      	movs	r2, #0
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_RCC_OscConfig+0x40c>)
 80024aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024ac:	f7ff fb6c 	bl	8001b88 <HAL_GetTick>
 80024b0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x408>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024ba:	d047      	beq.n	800254c <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7ff fb64 	bl	8001b88 <HAL_GetTick>
 80024c0:	1b00      	subs	r0, r0, r4
 80024c2:	2802      	cmp	r0, #2
 80024c4:	d9f5      	bls.n	80024b2 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 80024c6:	2003      	movs	r0, #3
 80024c8:	e059      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x408>)
 80024cc:	69d3      	ldr	r3, [r2, #28]
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	e7dc      	b.n	8002490 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 80024d6:	2200      	movs	r2, #0
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x40c>)
 80024da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024dc:	f7ff fb54 	bl	8001b88 <HAL_GetTick>
 80024e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_OscConfig+0x408>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024ea:	d006      	beq.n	80024fa <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff fb4c 	bl	8001b88 <HAL_GetTick>
 80024f0:	1b40      	subs	r0, r0, r5
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d9f5      	bls.n	80024e2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80024f6:	2003      	movs	r0, #3
 80024f8:	e041      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024fa:	6a23      	ldr	r3, [r4, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d01a      	beq.n	8002538 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	4922      	ldr	r1, [pc, #136]	; (800258c <HAL_RCC_OscConfig+0x408>)
 8002504:	684b      	ldr	r3, [r1, #4]
 8002506:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800250a:	6a22      	ldr	r2, [r4, #32]
 800250c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800250e:	4302      	orrs	r2, r0
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002514:	2201      	movs	r2, #1
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_RCC_OscConfig+0x40c>)
 8002518:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800251a:	f7ff fb35 	bl	8001b88 <HAL_GetTick>
 800251e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCC_OscConfig+0x408>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002528:	d10e      	bne.n	8002548 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff fb2d 	bl	8001b88 <HAL_GetTick>
 800252e:	1b00      	subs	r0, r0, r4
 8002530:	2802      	cmp	r0, #2
 8002532:	d9f5      	bls.n	8002520 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
 8002536:	e022      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_RCC_OscConfig+0x408>)
 800253a:	6853      	ldr	r3, [r2, #4]
 800253c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002540:	68a1      	ldr	r1, [r4, #8]
 8002542:	430b      	orrs	r3, r1
 8002544:	6053      	str	r3, [r2, #4]
 8002546:	e7dc      	b.n	8002502 <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8002548:	2000      	movs	r0, #0
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
 800254c:	2000      	movs	r0, #0
 800254e:	e016      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	2b01      	cmp	r3, #1
 8002552:	d016      	beq.n	8002582 <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_RCC_OscConfig+0x408>)
 8002556:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002558:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800255c:	6a22      	ldr	r2, [r4, #32]
 800255e:	4291      	cmp	r1, r2
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8002562:	2001      	movs	r0, #1
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002566:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800256a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	4293      	cmp	r3, r2
 800256e:	d00a      	beq.n	8002586 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8002570:	2001      	movs	r0, #1
 8002572:	e004      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
 8002576:	4770      	bx	lr
        return HAL_ERROR;
 8002578:	2001      	movs	r0, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 800257c:	2000      	movs	r0, #0
}
 800257e:	b002      	add	sp, #8
 8002580:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
 8002584:	e7fb      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002586:	2000      	movs	r0, #0
 8002588:	e7f9      	b.n	800257e <HAL_RCC_OscConfig+0x3fa>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	42420060 	.word	0x42420060

08002594 <HAL_RCC_GetSysClockFreq>:
{
 8002594:	b510      	push	{r4, lr}
 8002596:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002598:	4c15      	ldr	r4, [pc, #84]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800259a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800259e:	f10d 0e18 	add.w	lr, sp, #24
 80025a2:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025a6:	8a23      	ldrh	r3, [r4, #16]
 80025a8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x60>)
 80025ae:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80025b0:	f003 020c 	and.w	r2, r3, #12
 80025b4:	2a08      	cmp	r2, #8
 80025b6:	d118      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80025bc:	4472      	add	r2, lr
 80025be:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80025c6:	d103      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c8:	480b      	ldr	r0, [pc, #44]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80025ca:	fb00 f002 	mul.w	r0, r0, r2
 80025ce:	e00d      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x60>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80025d8:	4473      	add	r3, lr
 80025da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <HAL_RCC_GetSysClockFreq+0x68>)
 80025e0:	fb00 f002 	mul.w	r0, r0, r2
 80025e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80025e8:	e000      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 80025ea:	4804      	ldr	r0, [pc, #16]	; (80025fc <HAL_RCC_GetSysClockFreq+0x68>)
}
 80025ec:	b006      	add	sp, #24
 80025ee:	bd10      	pop	{r4, pc}
 80025f0:	0800a428 	.word	0x0800a428
 80025f4:	40021000 	.word	0x40021000
 80025f8:	003d0900 	.word	0x003d0900
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002600:	2800      	cmp	r0, #0
 8002602:	f000 80a3 	beq.w	800274c <HAL_RCC_ClockConfig+0x14c>
{
 8002606:	b570      	push	{r4, r5, r6, lr}
 8002608:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCC_ClockConfig+0x154>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	428b      	cmp	r3, r1
 8002614:	d20c      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_RCC_ClockConfig+0x154>)
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	f023 0307 	bic.w	r3, r3, #7
 800261e:	430b      	orrs	r3, r1
 8002620:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4299      	cmp	r1, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
 800262e:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f013 0f02 	tst.w	r3, #2
 8002636:	d017      	beq.n	8002668 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	f013 0f04 	tst.w	r3, #4
 800263c:	d004      	beq.n	8002648 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263e:	4a46      	ldr	r2, [pc, #280]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 8002640:	6853      	ldr	r3, [r2, #4]
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002646:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f013 0f08 	tst.w	r3, #8
 800264e:	d004      	beq.n	800265a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002650:	4a41      	ldr	r2, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 8002652:	6853      	ldr	r3, [r2, #4]
 8002654:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002658:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265a:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 800265c:	6853      	ldr	r3, [r2, #4]
 800265e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002662:	68a0      	ldr	r0, [r4, #8]
 8002664:	4303      	orrs	r3, r0
 8002666:	6053      	str	r3, [r2, #4]
 8002668:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	f013 0f01 	tst.w	r3, #1
 8002670:	d031      	beq.n	80026d6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	6863      	ldr	r3, [r4, #4]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002678:	2b02      	cmp	r3, #2
 800267a:	d025      	beq.n	80026c8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4a36      	ldr	r2, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	f012 0f02 	tst.w	r2, #2
 8002684:	d064      	beq.n	8002750 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 8002688:	684a      	ldr	r2, [r1, #4]
 800268a:	f022 0203 	bic.w	r2, r2, #3
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002692:	f7ff fa79 	bl	8001b88 <HAL_GetTick>
 8002696:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002698:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	6862      	ldr	r2, [r4, #4]
 80026a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026a6:	d016      	beq.n	80026d6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff fa6e 	bl	8001b88 <HAL_GetTick>
 80026ac:	1b80      	subs	r0, r0, r6
 80026ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80026b2:	4298      	cmp	r0, r3
 80026b4:	d9f0      	bls.n	8002698 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80026b6:	2003      	movs	r0, #3
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80026c2:	d1e0      	bne.n	8002686 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80026d0:	d1d9      	bne.n	8002686 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80026d2:	2001      	movs	r0, #1
 80026d4:	bd70      	pop	{r4, r5, r6, pc}
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_ClockConfig+0x154>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	429d      	cmp	r5, r3
 80026e0:	d20c      	bcs.n	80026fc <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_RCC_ClockConfig+0x154>)
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	432b      	orrs	r3, r5
 80026ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	429d      	cmp	r5, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
}
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	f013 0f04 	tst.w	r3, #4
 8002702:	d006      	beq.n	8002712 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 8002706:	6853      	ldr	r3, [r2, #4]
 8002708:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800270c:	68e1      	ldr	r1, [r4, #12]
 800270e:	430b      	orrs	r3, r1
 8002710:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	f013 0f08 	tst.w	r3, #8
 8002718:	d007      	beq.n	800272a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 800271c:	6853      	ldr	r3, [r2, #4]
 800271e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002722:	6921      	ldr	r1, [r4, #16]
 8002724:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002728:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272a:	f7ff ff33 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x158>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x15c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	40d8      	lsrs	r0, r3
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_ClockConfig+0x160>)
 800273e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_ClockConfig+0x164>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	f7ff f9dc 	bl	8001b00 <HAL_InitTick>
  return HAL_OK;
 8002748:	2000      	movs	r0, #0
 800274a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
 800274e:	4770      	bx	lr
        return HAL_ERROR;
 8002750:	2001      	movs	r0, #1
 8002752:	bd70      	pop	{r4, r5, r6, pc}
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	0800ad40 	.word	0x0800ad40
 8002760:	20000008 	.word	0x20000008
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetHCLKFreq>:
}
 8002768:	4b01      	ldr	r3, [pc, #4]	; (8002770 <HAL_RCC_GetHCLKFreq+0x8>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000008 	.word	0x20000008

08002774 <HAL_RCC_GetPCLK1Freq>:
{
 8002774:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002776:	f7ff fff7 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_RCC_GetPCLK1Freq+0x18>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002782:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
}
 8002786:	40d8      	lsrs	r0, r3
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	0800ad50 	.word	0x0800ad50

08002794 <HAL_RCC_GetPCLK2Freq>:
{
 8002794:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002796:	f7ff ffe7 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x18>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80027a2:	4a03      	ldr	r2, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80027a6:	40d8      	lsrs	r0, r3
 80027a8:	bd08      	pop	{r3, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	0800ad50 	.word	0x0800ad50

080027b4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027b4:	6802      	ldr	r2, [r0, #0]
 80027b6:	68d3      	ldr	r3, [r2, #12]
 80027b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027bc:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027be:	2320      	movs	r3, #32
 80027c0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80027c4:	4770      	bx	lr

080027c6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c6:	6802      	ldr	r2, [r0, #0]
 80027c8:	68d3      	ldr	r3, [r2, #12]
 80027ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ce:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d0:	6802      	ldr	r2, [r0, #0]
 80027d2:	6953      	ldr	r3, [r2, #20]
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027da:	2320      	movs	r3, #32
 80027dc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80027e0:	4770      	bx	lr

080027e2 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b21      	cmp	r3, #33	; 0x21
 80027ea:	d001      	beq.n	80027f0 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2002      	movs	r0, #2
 80027ee:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027f0:	6883      	ldr	r3, [r0, #8]
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d017      	beq.n	8002828 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027f8:	6802      	ldr	r2, [r0, #0]
 80027fa:	6a03      	ldr	r3, [r0, #32]
 80027fc:	1c59      	adds	r1, r3, #1
 80027fe:	6201      	str	r1, [r0, #32]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8002804:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800280e:	b9db      	cbnz	r3, 8002848 <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	68d3      	ldr	r3, [r2, #12]
 8002814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002818:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800281a:	6802      	ldr	r2, [r0, #0]
 800281c:	68d3      	ldr	r3, [r2, #12]
 800281e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002822:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002824:	2000      	movs	r0, #0
 8002826:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002828:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800282a:	6802      	ldr	r2, [r0, #0]
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002834:	6903      	ldr	r3, [r0, #16]
 8002836:	b91b      	cbnz	r3, 8002840 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8002838:	6a03      	ldr	r3, [r0, #32]
 800283a:	3302      	adds	r3, #2
 800283c:	6203      	str	r3, [r0, #32]
 800283e:	e7e1      	b.n	8002804 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8002840:	6a03      	ldr	r3, [r0, #32]
 8002842:	3301      	adds	r3, #1
 8002844:	6203      	str	r3, [r0, #32]
 8002846:	e7dd      	b.n	8002804 <UART_Transmit_IT+0x22>
    return HAL_OK;
 8002848:	2000      	movs	r0, #0
  }
}
 800284a:	4770      	bx	lr

0800284c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002850:	6802      	ldr	r2, [r0, #0]
 8002852:	6913      	ldr	r3, [r2, #16]
 8002854:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002858:	68c1      	ldr	r1, [r0, #12]
 800285a:	430b      	orrs	r3, r1
 800285c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800285e:	6883      	ldr	r3, [r0, #8]
 8002860:	6902      	ldr	r2, [r0, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	6942      	ldr	r2, [r0, #20]
 8002866:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8002868:	6801      	ldr	r1, [r0, #0]
 800286a:	68ca      	ldr	r2, [r1, #12]
 800286c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002870:	f022 020c 	bic.w	r2, r2, #12
 8002874:	4313      	orrs	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002878:	6802      	ldr	r2, [r0, #0]
 800287a:	6953      	ldr	r3, [r2, #20]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	6981      	ldr	r1, [r0, #24]
 8002882:	430b      	orrs	r3, r1
 8002884:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002886:	6802      	ldr	r2, [r0, #0]
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <UART_SetConfig+0xc4>)
 800288a:	429a      	cmp	r2, r3
 800288c:	d01f      	beq.n	80028ce <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800288e:	f7ff ff71 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002892:	6821      	ldr	r1, [r4, #0]
 8002894:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002898:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800289c:	6863      	ldr	r3, [r4, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80028a4:	4d1b      	ldr	r5, [pc, #108]	; (8002914 <UART_SetConfig+0xc8>)
 80028a6:	fba5 3200 	umull	r3, r2, r5, r0
 80028aa:	0954      	lsrs	r4, r2, #5
 80028ac:	2264      	movs	r2, #100	; 0x64
 80028ae:	fb02 0214 	mls	r2, r2, r4, r0
 80028b2:	0113      	lsls	r3, r2, #4
 80028b4:	3332      	adds	r3, #50	; 0x32
 80028b6:	fba5 2303 	umull	r2, r3, r5, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028c0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	4413      	add	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80028ce:	f7ff ff61 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d2:	6821      	ldr	r1, [r4, #0]
 80028d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028dc:	6863      	ldr	r3, [r4, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80028e4:	4d0b      	ldr	r5, [pc, #44]	; (8002914 <UART_SetConfig+0xc8>)
 80028e6:	fba5 3200 	umull	r3, r2, r5, r0
 80028ea:	0954      	lsrs	r4, r2, #5
 80028ec:	2264      	movs	r2, #100	; 0x64
 80028ee:	fb02 0214 	mls	r2, r2, r4, r0
 80028f2:	0113      	lsls	r3, r2, #4
 80028f4:	3332      	adds	r3, #50	; 0x32
 80028f6:	fba5 2303 	umull	r2, r3, r5, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002900:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	4413      	add	r3, r2
 800290a:	608b      	str	r3, [r1, #8]
 800290c:	bd38      	pop	{r3, r4, r5, pc}
 800290e:	bf00      	nop
 8002910:	40013800 	.word	0x40013800
 8002914:	51eb851f 	.word	0x51eb851f

08002918 <UART_WaitOnFlagUntilTimeout>:
{
 8002918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800291c:	4605      	mov	r5, r0
 800291e:	460f      	mov	r7, r1
 8002920:	4616      	mov	r6, r2
 8002922:	4698      	mov	r8, r3
 8002924:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	ea37 0303 	bics.w	r3, r7, r3
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	42b3      	cmp	r3, r6
 8002936:	d11e      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002938:	f1b4 3fff 	cmp.w	r4, #4294967295
 800293c:	d0f3      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293e:	b12c      	cbz	r4, 800294c <UART_WaitOnFlagUntilTimeout+0x34>
 8002940:	f7ff f922 	bl	8001b88 <HAL_GetTick>
 8002944:	eba0 0008 	sub.w	r0, r0, r8
 8002948:	4284      	cmp	r4, r0
 800294a:	d2ec      	bcs.n	8002926 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294c:	682a      	ldr	r2, [r5, #0]
 800294e:	68d3      	ldr	r3, [r2, #12]
 8002950:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002954:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	682a      	ldr	r2, [r5, #0]
 8002958:	6953      	ldr	r3, [r2, #20]
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002960:	2320      	movs	r3, #32
 8002962:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002966:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800296a:	2300      	movs	r3, #0
 800296c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002970:	2003      	movs	r0, #3
 8002972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
}
 8002978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800297c <HAL_UART_Init>:
  if (huart == NULL)
 800297c:	b358      	cbz	r0, 80029d6 <HAL_UART_Init+0x5a>
{
 800297e:	b510      	push	{r4, lr}
 8002980:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002986:	b30b      	cbz	r3, 80029cc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002988:	2324      	movs	r3, #36	; 0x24
 800298a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	68d3      	ldr	r3, [r2, #12]
 8002992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002996:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002998:	4620      	mov	r0, r4
 800299a:	f7ff ff57 	bl	800284c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	6913      	ldr	r3, [r2, #16]
 80029a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80029a6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	6953      	ldr	r3, [r2, #20]
 80029ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80029b0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80029b2:	6822      	ldr	r2, [r4, #0]
 80029b4:	68d3      	ldr	r3, [r2, #12]
 80029b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ba:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	2000      	movs	r0, #0
 80029be:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029c0:	2320      	movs	r3, #32
 80029c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80029ca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80029cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80029d0:	f005 fc48 	bl	8008264 <HAL_UART_MspInit>
 80029d4:	e7d8      	b.n	8002988 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
 80029d8:	4770      	bx	lr

080029da <HAL_UART_Transmit>:
{
 80029da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80029e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d004      	beq.n	80029f6 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	b002      	add	sp, #8
 80029f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80029fc:	2900      	cmp	r1, #0
 80029fe:	d055      	beq.n	8002aac <HAL_UART_Transmit+0xd2>
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d055      	beq.n	8002ab0 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8002a04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_UART_Transmit+0x36>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e7ee      	b.n	80029ee <HAL_UART_Transmit+0x14>
 8002a10:	2301      	movs	r3, #1
 8002a12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a1a:	2321      	movs	r3, #33	; 0x21
 8002a1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a20:	f7ff f8b2 	bl	8001b88 <HAL_GetTick>
 8002a24:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002a26:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a2a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a2e:	e010      	b.n	8002a52 <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a30:	9600      	str	r6, [sp, #0]
 8002a32:	463b      	mov	r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff ff6d 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d138      	bne.n	8002ab4 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a42:	6822      	ldr	r2, [r4, #0]
 8002a44:	882b      	ldrh	r3, [r5, #0]
 8002a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a4c:	6923      	ldr	r3, [r4, #16]
 8002a4e:	b9cb      	cbnz	r3, 8002a84 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8002a50:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8002a52:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b1bb      	cbz	r3, 8002a88 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8002a58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d0e2      	beq.n	8002a30 <HAL_UART_Transmit+0x56>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	9600      	str	r6, [sp, #0]
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ff50 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 8002a78:	b9f0      	cbnz	r0, 8002ab8 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	782a      	ldrb	r2, [r5, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	3501      	adds	r5, #1
 8002a82:	e7e6      	b.n	8002a52 <HAL_UART_Transmit+0x78>
          pData += 1U;
 8002a84:	3501      	adds	r5, #1
 8002a86:	e7e4      	b.n	8002a52 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a88:	9600      	str	r6, [sp, #0]
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ff41 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b108      	cbz	r0, 8002a9e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e7a7      	b.n	80029ee <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002aaa:	e7a0      	b.n	80029ee <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e79e      	b.n	80029ee <HAL_UART_Transmit+0x14>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e79c      	b.n	80029ee <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e79a      	b.n	80029ee <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e798      	b.n	80029ee <HAL_UART_Transmit+0x14>

08002abc <HAL_UART_Transmit_DMA>:
{
 8002abc:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8002abe:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8002ac2:	b2e4      	uxtb	r4, r4
 8002ac4:	2c20      	cmp	r4, #32
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8002ac8:	2002      	movs	r0, #2
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
    if ((pData == NULL) || (Size == 0U))
 8002acc:	2900      	cmp	r1, #0
 8002ace:	d031      	beq.n	8002b34 <HAL_UART_Transmit_DMA+0x78>
 8002ad0:	2a00      	cmp	r2, #0
 8002ad2:	d031      	beq.n	8002b38 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8002ad4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Transmit_DMA+0x24>
 8002adc:	2002      	movs	r0, #2
}
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8002aea:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002aec:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aee:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af0:	2500      	movs	r5, #0
 8002af2:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af4:	2221      	movs	r2, #33	; 0x21
 8002af6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002afa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002afc:	480f      	ldr	r0, [pc, #60]	; (8002b3c <HAL_UART_Transmit_DMA+0x80>)
 8002afe:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b02:	480f      	ldr	r0, [pc, #60]	; (8002b40 <HAL_UART_Transmit_DMA+0x84>)
 8002b04:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b08:	480e      	ldr	r0, [pc, #56]	; (8002b44 <HAL_UART_Transmit_DMA+0x88>)
 8002b0a:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8002b0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b0e:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	3204      	adds	r2, #4
 8002b14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b16:	f7ff f8f1 	bl	8001cfc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b20:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002b22:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b26:	6822      	ldr	r2, [r4, #0]
 8002b28:	6953      	ldr	r3, [r2, #20]
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002b30:	4628      	mov	r0, r5
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	2001      	movs	r0, #1
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
 8002b3c:	08002bf1 	.word	0x08002bf1
 8002b40:	08002c3d 	.word	0x08002c3d
 8002b44:	08002d31 	.word	0x08002d31

08002b48 <HAL_UART_Receive_DMA>:
{
 8002b48:	b530      	push	{r4, r5, lr}
 8002b4a:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b4c:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8002b50:	b2e4      	uxtb	r4, r4
 8002b52:	2c20      	cmp	r4, #32
 8002b54:	d002      	beq.n	8002b5c <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY;
 8002b56:	2002      	movs	r0, #2
}
 8002b58:	b003      	add	sp, #12
 8002b5a:	bd30      	pop	{r4, r5, pc}
    if ((pData == NULL) || (Size == 0U))
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d03d      	beq.n	8002bdc <HAL_UART_Receive_DMA+0x94>
 8002b60:	2a00      	cmp	r2, #0
 8002b62:	d03d      	beq.n	8002be0 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 8002b64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Receive_DMA+0x28>
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	e7f3      	b.n	8002b58 <HAL_UART_Receive_DMA+0x10>
 8002b70:	4613      	mov	r3, r2
 8002b72:	460a      	mov	r2, r1
 8002b74:	4604      	mov	r4, r0
 8002b76:	2101      	movs	r1, #1
 8002b78:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002b7c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b7e:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	2500      	movs	r5, #0
 8002b82:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b84:	2122      	movs	r1, #34	; 0x22
 8002b86:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002b8c:	4815      	ldr	r0, [pc, #84]	; (8002be4 <HAL_UART_Receive_DMA+0x9c>)
 8002b8e:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b92:	4815      	ldr	r0, [pc, #84]	; (8002be8 <HAL_UART_Receive_DMA+0xa0>)
 8002b94:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b98:	4814      	ldr	r0, [pc, #80]	; (8002bec <HAL_UART_Receive_DMA+0xa4>)
 8002b9a:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8002b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9e:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ba0:	6821      	ldr	r1, [r4, #0]
 8002ba2:	3104      	adds	r1, #4
 8002ba4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002ba6:	f7ff f8a9 	bl	8001cfc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002baa:	9501      	str	r5, [sp, #4]
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	9201      	str	r2, [sp, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	9201      	str	r2, [sp, #4]
 8002bb6:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8002bb8:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	6953      	ldr	r3, [r2, #20]
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	6953      	ldr	r3, [r2, #20]
 8002bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd6:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002bd8:	4628      	mov	r0, r5
 8002bda:	e7bd      	b.n	8002b58 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
 8002bde:	e7bb      	b.n	8002b58 <HAL_UART_Receive_DMA+0x10>
 8002be0:	2001      	movs	r0, #1
 8002be2:	e7b9      	b.n	8002b58 <HAL_UART_Receive_DMA+0x10>
 8002be4:	08002c47 	.word	0x08002c47
 8002be8:	08002d25 	.word	0x08002d25
 8002bec:	08002d31 	.word	0x08002d31

08002bf0 <UART_DMATransmitCplt>:
{
 8002bf0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf4:	6802      	ldr	r2, [r0, #0]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	f012 0f20 	tst.w	r2, #32
 8002bfc:	d10c      	bne.n	8002c18 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0x00U;
 8002bfe:	2200      	movs	r2, #0
 8002c00:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	694a      	ldr	r2, [r1, #20]
 8002c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c0a:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68d3      	ldr	r3, [r2, #12]
 8002c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c14:	60d3      	str	r3, [r2, #12]
 8002c16:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f004 fb15 	bl	8007248 <HAL_UART_TxCpltCallback>
 8002c1e:	bd08      	pop	{r3, pc}

08002c20 <UART_EndTransmit_IT>:
{
 8002c20:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c22:	6801      	ldr	r1, [r0, #0]
 8002c24:	68cb      	ldr	r3, [r1, #12]
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002c32:	f004 fb09 	bl	8007248 <HAL_UART_TxCpltCallback>
}
 8002c36:	2000      	movs	r0, #0
 8002c38:	bd08      	pop	{r3, pc}

08002c3a <HAL_UART_TxHalfCpltCallback>:
{
 8002c3a:	4770      	bx	lr

08002c3c <UART_DMATxHalfCplt>:
{
 8002c3c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002c3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002c40:	f7ff fffb 	bl	8002c3a <HAL_UART_TxHalfCpltCallback>
 8002c44:	bd08      	pop	{r3, pc}

08002c46 <UART_DMAReceiveCplt>:
{
 8002c46:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4a:	6802      	ldr	r2, [r0, #0]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	f012 0f20 	tst.w	r2, #32
 8002c52:	d113      	bne.n	8002c7c <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8002c54:	2200      	movs	r2, #0
 8002c56:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	68ca      	ldr	r2, [r1, #12]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	694a      	ldr	r2, [r1, #20]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	694a      	ldr	r2, [r1, #20]
 8002c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c74:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 faf5 	bl	800726c <HAL_UART_RxCpltCallback>
 8002c82:	bd08      	pop	{r3, pc}

08002c84 <UART_Receive_IT>:
{
 8002c84:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c86:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b22      	cmp	r3, #34	; 0x22
 8002c8e:	d001      	beq.n	8002c94 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8002c90:	2002      	movs	r0, #2
 8002c92:	bd08      	pop	{r3, pc}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c94:	6883      	ldr	r3, [r0, #8]
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	d00f      	beq.n	8002cbc <UART_Receive_IT+0x38>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c9c:	6903      	ldr	r3, [r0, #16]
 8002c9e:	bb0b      	cbnz	r3, 8002ce4 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	6282      	str	r2, [r0, #40]	; 0x28
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6852      	ldr	r2, [r2, #4]
 8002caa:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002cac:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002cb6:	b1f3      	cbz	r3, 8002cf6 <UART_Receive_IT+0x72>
    return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
}
 8002cba:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002cbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cbe:	6903      	ldr	r3, [r0, #16]
 8002cc0:	b943      	cbnz	r3, 8002cd4 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cca:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002ccc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cce:	3302      	adds	r3, #2
 8002cd0:	6283      	str	r3, [r0, #40]	; 0x28
 8002cd2:	e7eb      	b.n	8002cac <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cde:	3301      	adds	r3, #1
 8002ce0:	6283      	str	r3, [r0, #40]	; 0x28
 8002ce2:	e7e3      	b.n	8002cac <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ce4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002ce6:	1c53      	adds	r3, r2, #1
 8002ce8:	6283      	str	r3, [r0, #40]	; 0x28
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf2:	7013      	strb	r3, [r2, #0]
 8002cf4:	e7da      	b.n	8002cac <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cf6:	6802      	ldr	r2, [r0, #0]
 8002cf8:	68d3      	ldr	r3, [r2, #12]
 8002cfa:	f023 0320 	bic.w	r3, r3, #32
 8002cfe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d00:	6802      	ldr	r2, [r0, #0]
 8002d02:	68d3      	ldr	r3, [r2, #12]
 8002d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d08:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d0a:	6802      	ldr	r2, [r0, #0]
 8002d0c:	6953      	ldr	r3, [r2, #20]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002d14:	2320      	movs	r3, #32
 8002d16:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002d1a:	f004 faa7 	bl	800726c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002d1e:	2000      	movs	r0, #0
 8002d20:	bd08      	pop	{r3, pc}

08002d22 <HAL_UART_RxHalfCpltCallback>:
{
 8002d22:	4770      	bx	lr

08002d24 <UART_DMARxHalfCplt>:
{
 8002d24:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8002d26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002d28:	f7ff fffb 	bl	8002d22 <HAL_UART_RxHalfCpltCallback>
 8002d2c:	bd08      	pop	{r3, pc}

08002d2e <HAL_UART_ErrorCallback>:
{
 8002d2e:	4770      	bx	lr

08002d30 <UART_DMAError>:
{
 8002d30:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d32:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d38:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b21      	cmp	r3, #33	; 0x21
 8002d40:	d010      	beq.n	8002d64 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d4a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b22      	cmp	r3, #34	; 0x22
 8002d52:	d011      	beq.n	8002d78 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d56:	f043 0310 	orr.w	r3, r3, #16
 8002d5a:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ffe6 	bl	8002d2e <HAL_UART_ErrorCallback>
 8002d62:	bd10      	pop	{r4, pc}
 8002d64:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d0ea      	beq.n	8002d42 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff fd1f 	bl	80027b4 <UART_EndTxTransfer>
 8002d76:	e7e4      	b.n	8002d42 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	d0eb      	beq.n	8002d54 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff fd20 	bl	80027c6 <UART_EndRxTransfer>
 8002d86:	e7e5      	b.n	8002d54 <UART_DMAError+0x24>

08002d88 <HAL_UART_IRQHandler>:
{
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d8c:	6802      	ldr	r2, [r0, #0]
 8002d8e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d90:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d92:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002d94:	f013 000f 	ands.w	r0, r3, #15
 8002d98:	d105      	bne.n	8002da6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d9a:	f013 0f20 	tst.w	r3, #32
 8002d9e:	d002      	beq.n	8002da6 <HAL_UART_IRQHandler+0x1e>
 8002da0:	f011 0f20 	tst.w	r1, #32
 8002da4:	d153      	bne.n	8002e4e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d067      	beq.n	8002e7a <HAL_UART_IRQHandler+0xf2>
 8002daa:	f012 0201 	ands.w	r2, r2, #1
 8002dae:	d102      	bne.n	8002db6 <HAL_UART_IRQHandler+0x2e>
 8002db0:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002db4:	d061      	beq.n	8002e7a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002db6:	f013 0f01 	tst.w	r3, #1
 8002dba:	d006      	beq.n	8002dca <HAL_UART_IRQHandler+0x42>
 8002dbc:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002dc0:	d003      	beq.n	8002dca <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002dc4:	f040 0001 	orr.w	r0, r0, #1
 8002dc8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dca:	f013 0f04 	tst.w	r3, #4
 8002dce:	d004      	beq.n	8002dda <HAL_UART_IRQHandler+0x52>
 8002dd0:	b11a      	cbz	r2, 8002dda <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002dd4:	f040 0002 	orr.w	r0, r0, #2
 8002dd8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dda:	f013 0f02 	tst.w	r3, #2
 8002dde:	d004      	beq.n	8002dea <HAL_UART_IRQHandler+0x62>
 8002de0:	b11a      	cbz	r2, 8002dea <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002de4:	f040 0004 	orr.w	r0, r0, #4
 8002de8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dea:	f013 0f08 	tst.w	r3, #8
 8002dee:	d004      	beq.n	8002dfa <HAL_UART_IRQHandler+0x72>
 8002df0:	b11a      	cbz	r2, 8002dfa <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002df2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002df4:	f042 0208 	orr.w	r2, r2, #8
 8002df8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dfa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d048      	beq.n	8002e92 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e00:	f013 0f20 	tst.w	r3, #32
 8002e04:	d002      	beq.n	8002e0c <HAL_UART_IRQHandler+0x84>
 8002e06:	f011 0f20 	tst.w	r1, #32
 8002e0a:	d124      	bne.n	8002e56 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e16:	f012 0f08 	tst.w	r2, #8
 8002e1a:	d100      	bne.n	8002e1e <HAL_UART_IRQHandler+0x96>
 8002e1c:	b33b      	cbz	r3, 8002e6e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7ff fcd1 	bl	80027c6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e2c:	d01b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e34:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e38:	b18b      	cbz	r3, 8002e5e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_UART_IRQHandler+0x11c>)
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e40:	f7fe ff96 	bl	8001d70 <HAL_DMA_Abort_IT>
 8002e44:	b328      	cbz	r0, 8002e92 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e4a:	4798      	blx	r3
 8002e4c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7ff ff18 	bl	8002c84 <UART_Receive_IT>
      return;
 8002e54:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff ff14 	bl	8002c84 <UART_Receive_IT>
 8002e5c:	e7d6      	b.n	8002e0c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff ff65 	bl	8002d2e <HAL_UART_ErrorCallback>
 8002e64:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff ff61 	bl	8002d2e <HAL_UART_ErrorCallback>
 8002e6c:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7ff ff5d 	bl	8002d2e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002e78:	bd10      	pop	{r4, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e7e:	d002      	beq.n	8002e86 <HAL_UART_IRQHandler+0xfe>
 8002e80:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e8a:	d002      	beq.n	8002e92 <HAL_UART_IRQHandler+0x10a>
 8002e8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_IRQHandler+0x114>
 8002e92:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff fca4 	bl	80027e2 <UART_Transmit_IT>
    return;
 8002e9a:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7ff febf 	bl	8002c20 <UART_EndTransmit_IT>
    return;
 8002ea2:	e7f6      	b.n	8002e92 <HAL_UART_IRQHandler+0x10a>
 8002ea4:	08002ea9 	.word	0x08002ea9

08002ea8 <UART_DMAAbortOnError>:
{
 8002ea8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eaa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eb0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002eb2:	f7ff ff3c 	bl	8002d2e <HAL_UART_ErrorCallback>
 8002eb6:	bd08      	pop	{r3, pc}

08002eb8 <_Z11cobs_encodePKhjPh>:
/* Stuffs "length" bytes of data at the location pointed to by
 * "input", writing the output to the location pointed to by
 * "output". Returns the number of bytes written to "output".
 */
size_t cobs_encode(const uint8_t * input, size_t length_input, uint8_t * output)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	4607      	mov	r7, r0
    size_t read_index = 0;
    size_t write_index = 1;
    size_t code_index = 0;
    uint8_t code = 1;
 8002ebc:	2401      	movs	r4, #1
    size_t code_index = 0;
 8002ebe:	2600      	movs	r6, #0
    size_t write_index = 1;
 8002ec0:	4620      	mov	r0, r4
    size_t read_index = 0;
 8002ec2:	4633      	mov	r3, r6
 8002ec4:	e008      	b.n	8002ed8 <_Z11cobs_encodePKhjPh+0x20>
            code_index = write_index++;
            read_index++;
        }
        else
        {
            output[write_index++] = input[read_index++];
 8002ec6:	f100 0e01 	add.w	lr, r0, #1
 8002eca:	3301      	adds	r3, #1
 8002ecc:	5415      	strb	r5, [r2, r0]
            code++;
 8002ece:	3401      	adds	r4, #1
 8002ed0:	b2e4      	uxtb	r4, r4
            if(code == 0xFF)
 8002ed2:	2cff      	cmp	r4, #255	; 0xff
 8002ed4:	d00b      	beq.n	8002eee <_Z11cobs_encodePKhjPh+0x36>
            output[write_index++] = input[read_index++];
 8002ed6:	4670      	mov	r0, lr
    while(read_index < length_input)
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	d20d      	bcs.n	8002ef8 <_Z11cobs_encodePKhjPh+0x40>
        if(input[read_index] == 0)
 8002edc:	5cfd      	ldrb	r5, [r7, r3]
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	d1f1      	bne.n	8002ec6 <_Z11cobs_encodePKhjPh+0xe>
            output[code_index] = code;
 8002ee2:	5594      	strb	r4, [r2, r6]
            read_index++;
 8002ee4:	3301      	adds	r3, #1
            code_index = write_index++;
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	3001      	adds	r0, #1
            code = 1;
 8002eea:	2401      	movs	r4, #1
 8002eec:	e7f4      	b.n	8002ed8 <_Z11cobs_encodePKhjPh+0x20>
            {
                output[code_index] = code;
 8002eee:	5594      	strb	r4, [r2, r6]
                code = 1;
                code_index = write_index++;
 8002ef0:	3002      	adds	r0, #2
 8002ef2:	4676      	mov	r6, lr
                code = 1;
 8002ef4:	2401      	movs	r4, #1
 8002ef6:	e7ef      	b.n	8002ed8 <_Z11cobs_encodePKhjPh+0x20>
            }
        }
    }

    output[code_index] = code;
 8002ef8:	5594      	strb	r4, [r2, r6]

    return write_index;
}
 8002efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002efc <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002efc:	7903      	ldrb	r3, [r0, #4]
 8002efe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002f00:	7943      	ldrb	r3, [r0, #5]
 8002f02:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002f04:	7983      	ldrb	r3, [r0, #6]
 8002f06:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002f08:	79c3      	ldrb	r3, [r0, #7]
 8002f0a:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002f0c:	7a03      	ldrb	r3, [r0, #8]
 8002f0e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002f10:	7a43      	ldrb	r3, [r0, #9]
 8002f12:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002f14:	7a83      	ldrb	r3, [r0, #10]
 8002f16:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002f18:	7ac3      	ldrb	r3, [r0, #11]
 8002f1a:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8002f1c:	2008      	movs	r0, #8
 8002f1e:	4770      	bx	lr

08002f20 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002f20:	780b      	ldrb	r3, [r1, #0]
 8002f22:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f24:	784a      	ldrb	r2, [r1, #1]
 8002f26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f2a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f2c:	788a      	ldrb	r2, [r1, #2]
 8002f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f32:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f34:	78ca      	ldrb	r2, [r1, #3]
 8002f36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f3a:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002f3c:	790b      	ldrb	r3, [r1, #4]
 8002f3e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f40:	794a      	ldrb	r2, [r1, #5]
 8002f42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f46:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f48:	798a      	ldrb	r2, [r1, #6]
 8002f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f4e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f50:	79ca      	ldrb	r2, [r1, #7]
 8002f52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f56:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8002f58:	2008      	movs	r0, #8
 8002f5a:	4770      	bx	lr

08002f5c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002f5c:	4800      	ldr	r0, [pc, #0]	; (8002f60 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8002f5e:	4770      	bx	lr
 8002f60:	0800acdc 	.word	0x0800acdc

08002f64 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002f64:	4800      	ldr	r0, [pc, #0]	; (8002f68 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8002f66:	4770      	bx	lr
 8002f68:	0800acb8 	.word	0x0800acb8

08002f6c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002f6c:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002f6e:	780b      	ldrb	r3, [r1, #0]
 8002f70:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f72:	784a      	ldrb	r2, [r1, #1]
 8002f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f78:	8083      	strh	r3, [r0, #4]

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
 8002f7a:	2400      	movs	r4, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d806      	bhi.n	8002f90 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x24>
      var |= (arr[i] << (8 * i));
 8002f82:	18ca      	adds	r2, r1, r3
 8002f84:	7892      	ldrb	r2, [r2, #2]
 8002f86:	00dd      	lsls	r5, r3, #3
 8002f88:	40aa      	lsls	r2, r5
 8002f8a:	4314      	orrs	r4, r2
    for (size_t i = 0; i < sizeof(V); i++)
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e7f6      	b.n	8002f7e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12>
 8002f90:	2306      	movs	r3, #6
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002f92:	1da2      	adds	r2, r4, #6
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d204      	bcs.n	8002fa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x36>
          inbuffer[k-1]=inbuffer[k];
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	5ccd      	ldrb	r5, [r1, r3]
 8002f9c:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	e7f7      	b.n	8002f92 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002fa2:	3405      	adds	r4, #5
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	550b      	strb	r3, [r1, r4]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002fa8:	1d4c      	adds	r4, r1, #5
 8002faa:	6084      	str	r4, [r0, #8]
    var = 0;
 8002fac:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d806      	bhi.n	8002fc0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x54>
      var |= (arr[i] << (8 * i));
 8002fb2:	188c      	adds	r4, r1, r2
 8002fb4:	5ce4      	ldrb	r4, [r4, r3]
 8002fb6:	00dd      	lsls	r5, r3, #3
 8002fb8:	40ac      	lsls	r4, r5
 8002fba:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e7f6      	b.n	8002fae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x42>
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8002fc0:	1d14      	adds	r4, r2, #4
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	19a2      	adds	r2, r4, r6
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d204      	bcs.n	8002fd4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	5ccd      	ldrb	r5, [r1, r3]
 8002fce:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e7f7      	b.n	8002fc4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x58>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002fd4:	1e55      	subs	r5, r2, #1
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	554b      	strb	r3, [r1, r5]
      this->message_type = (char *)(inbuffer + offset-1);
 8002fda:	3c01      	subs	r4, #1
 8002fdc:	440c      	add	r4, r1
 8002fde:	60c4      	str	r4, [r0, #12]
    var = 0;
 8002fe0:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d806      	bhi.n	8002ff4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
      var |= (arr[i] << (8 * i));
 8002fe6:	188c      	adds	r4, r1, r2
 8002fe8:	5ce4      	ldrb	r4, [r4, r3]
 8002fea:	00dd      	lsls	r5, r3, #3
 8002fec:	40ac      	lsls	r4, r5
 8002fee:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e7f6      	b.n	8002fe2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8002ff4:	3204      	adds	r2, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	1994      	adds	r4, r2, r6
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	d204      	bcs.n	8003008 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
          inbuffer[k-1]=inbuffer[k];
 8002ffe:	1e5c      	subs	r4, r3, #1
 8003000:	5ccd      	ldrb	r5, [r1, r3]
 8003002:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003004:	3301      	adds	r3, #1
 8003006:	e7f7      	b.n	8002ff8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003008:	1e63      	subs	r3, r4, #1
 800300a:	2500      	movs	r5, #0
 800300c:	54cd      	strb	r5, [r1, r3]
      this->md5sum = (char *)(inbuffer + offset-1);
 800300e:	3a01      	subs	r2, #1
 8003010:	440a      	add	r2, r1
 8003012:	6102      	str	r2, [r0, #16]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003014:	5d0b      	ldrb	r3, [r1, r4]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003016:	1c62      	adds	r2, r4, #1
 8003018:	5c8a      	ldrb	r2, [r1, r2]
 800301a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800301e:	1ca2      	adds	r2, r4, #2
 8003020:	5c8a      	ldrb	r2, [r1, r2]
 8003022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003026:	1ce2      	adds	r2, r4, #3
 8003028:	5c8a      	ldrb	r2, [r1, r2]
 800302a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 800302e:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8003030:	1d20      	adds	r0, r4, #4
 8003032:	bc70      	pop	{r4, r5, r6}
 8003034:	4770      	bx	lr
	...

08003038 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003038:	4800      	ldr	r0, [pc, #0]	; (800303c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 800303a:	4770      	bx	lr
 800303c:	0800abf4 	.word	0x0800abf4

08003040 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003040:	4800      	ldr	r0, [pc, #0]	; (8003044 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8003042:	4770      	bx	lr
 8003044:	0800abd0 	.word	0x0800abd0

08003048 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8003048:	b470      	push	{r4, r5, r6}
 800304a:	4606      	mov	r6, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800304c:	780b      	ldrb	r3, [r1, #0]
 800304e:	7103      	strb	r3, [r0, #4]
    var = 0;
 8003050:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8003052:	4613      	mov	r3, r2
 8003054:	2b03      	cmp	r3, #3
 8003056:	d807      	bhi.n	8003068 <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
 8003058:	1c58      	adds	r0, r3, #1
      var |= (arr[i] << (8 * i));
 800305a:	5c0c      	ldrb	r4, [r1, r0]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	fa04 f303 	lsl.w	r3, r4, r3
 8003062:	431a      	orrs	r2, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8003064:	4603      	mov	r3, r0
 8003066:	e7f5      	b.n	8003054 <_ZN14rosserial_msgs3Log11deserializeEPh+0xc>
 8003068:	2305      	movs	r3, #5
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800306a:	1d50      	adds	r0, r2, #5
 800306c:	4283      	cmp	r3, r0
 800306e:	d204      	bcs.n	800307a <_ZN14rosserial_msgs3Log11deserializeEPh+0x32>
          inbuffer[k-1]=inbuffer[k];
 8003070:	1e5c      	subs	r4, r3, #1
 8003072:	5ccd      	ldrb	r5, [r1, r3]
 8003074:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003076:	3301      	adds	r3, #1
 8003078:	e7f7      	b.n	800306a <_ZN14rosserial_msgs3Log11deserializeEPh+0x22>
      }
      inbuffer[offset+length_msg-1]=0;
 800307a:	3204      	adds	r2, #4
 800307c:	2300      	movs	r3, #0
 800307e:	548b      	strb	r3, [r1, r2]
      this->msg = (char *)(inbuffer + offset-1);
 8003080:	3104      	adds	r1, #4
 8003082:	60b1      	str	r1, [r6, #8]
      offset += length_msg;
     return offset;
    }
 8003084:	bc70      	pop	{r4, r5, r6}
 8003086:	4770      	bx	lr

08003088 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003088:	4800      	ldr	r0, [pc, #0]	; (800308c <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 800308a:	4770      	bx	lr
 800308c:	0800abbc 	.word	0x0800abbc

08003090 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003090:	4800      	ldr	r0, [pc, #0]	; (8003094 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8003092:	4770      	bx	lr
 8003094:	0800ab98 	.word	0x0800ab98

08003098 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8003098:	4800      	ldr	r0, [pc, #0]	; (800309c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 800309a:	4770      	bx	lr
 800309c:	0800a43c 	.word	0x0800a43c

080030a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80030a0:	4800      	ldr	r0, [pc, #0]	; (80030a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 80030a2:	4770      	bx	lr
 80030a4:	0800ab74 	.word	0x0800ab74

080030a8 <_ZN8std_msgs6Header11deserializeEPh>:
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
      offset += length_frame_id;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80030a8:	b470      	push	{r4, r5, r6}
 80030aa:	4606      	mov	r6, r0
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80030ac:	780b      	ldrb	r3, [r1, #0]
 80030ae:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030b0:	784a      	ldrb	r2, [r1, #1]
 80030b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030b6:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030b8:	788a      	ldrb	r2, [r1, #2]
 80030ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030be:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030c0:	78ca      	ldrb	r2, [r1, #3]
 80030c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030c6:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80030c8:	790b      	ldrb	r3, [r1, #4]
 80030ca:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030cc:	794a      	ldrb	r2, [r1, #5]
 80030ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030d2:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030d4:	798a      	ldrb	r2, [r1, #6]
 80030d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030da:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030dc:	79ca      	ldrb	r2, [r1, #7]
 80030de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030e2:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80030e4:	7a0b      	ldrb	r3, [r1, #8]
 80030e6:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030e8:	7a4a      	ldrb	r2, [r1, #9]
 80030ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030ee:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030f0:	7a8a      	ldrb	r2, [r1, #10]
 80030f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030f6:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030f8:	7aca      	ldrb	r2, [r1, #11]
 80030fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030fe:	60c3      	str	r3, [r0, #12]
    var = 0;
 8003100:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8003102:	4613      	mov	r3, r2
 8003104:	2b03      	cmp	r3, #3
 8003106:	d806      	bhi.n	8003116 <_ZN8std_msgs6Header11deserializeEPh+0x6e>
      var |= (arr[i] << (8 * i));
 8003108:	18c8      	adds	r0, r1, r3
 800310a:	7b04      	ldrb	r4, [r0, #12]
 800310c:	00d8      	lsls	r0, r3, #3
 800310e:	4084      	lsls	r4, r0
 8003110:	4322      	orrs	r2, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8003112:	3301      	adds	r3, #1
 8003114:	e7f6      	b.n	8003104 <_ZN8std_msgs6Header11deserializeEPh+0x5c>
 8003116:	2310      	movs	r3, #16
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003118:	f102 0010 	add.w	r0, r2, #16
 800311c:	4283      	cmp	r3, r0
 800311e:	d204      	bcs.n	800312a <_ZN8std_msgs6Header11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003120:	1e5c      	subs	r4, r3, #1
 8003122:	5ccd      	ldrb	r5, [r1, r3]
 8003124:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003126:	3301      	adds	r3, #1
 8003128:	e7f6      	b.n	8003118 <_ZN8std_msgs6Header11deserializeEPh+0x70>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800312a:	320f      	adds	r2, #15
 800312c:	2300      	movs	r3, #0
 800312e:	548b      	strb	r3, [r1, r2]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003130:	310f      	adds	r1, #15
 8003132:	6131      	str	r1, [r6, #16]
      offset += length_frame_id;
     return offset;
    }
 8003134:	bc70      	pop	{r4, r5, r6}
 8003136:	4770      	bx	lr

08003138 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003138:	4800      	ldr	r0, [pc, #0]	; (800313c <_ZN8std_msgs6Header7getTypeEv+0x4>)
 800313a:	4770      	bx	lr
 800313c:	0800ad10 	.word	0x0800ad10

08003140 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8003140:	4800      	ldr	r0, [pc, #0]	; (8003144 <_ZN8std_msgs6Header6getMD5Ev+0x4>)
 8003142:	4770      	bx	lr
 8003144:	0800acec 	.word	0x0800acec

08003148 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8003148:	b410      	push	{r4}
 800314a:	6882      	ldr	r2, [r0, #8]
 800314c:	68c3      	ldr	r3, [r0, #12]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800314e:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003150:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8003154:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003156:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800315a:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800315c:	0e12      	lsrs	r2, r2, #24
 800315e:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003160:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003162:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003166:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003168:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800316c:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800316e:	0e1b      	lsrs	r3, r3, #24
 8003170:	71cb      	strb	r3, [r1, #7]
 8003172:	6902      	ldr	r2, [r0, #16]
 8003174:	6943      	ldr	r3, [r0, #20]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003176:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003178:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800317c:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800317e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003182:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003184:	0e12      	lsrs	r2, r2, #24
 8003186:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003188:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800318a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800318e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003190:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003194:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003196:	0e1b      	lsrs	r3, r3, #24
 8003198:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->y);
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800319a:	6982      	ldr	r2, [r0, #24]
 800319c:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800319e:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80031a0:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80031a4:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80031a6:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80031aa:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80031ac:	0e12      	lsrs	r2, r2, #24
 80031ae:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80031b0:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80031b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80031b6:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80031b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80031bc:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80031be:	0e1b      	lsrs	r3, r3, #24
 80031c0:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      return offset;
    }
 80031c2:	2018      	movs	r0, #24
 80031c4:	bc10      	pop	{r4}
 80031c6:	4770      	bx	lr

080031c8 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031c8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031cc:	780a      	ldrb	r2, [r1, #0]
 80031ce:	2300      	movs	r3, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031d0:	784e      	ldrb	r6, [r1, #1]
 80031d2:	2500      	movs	r5, #0
 80031d4:	0234      	lsls	r4, r6, #8
 80031d6:	4322      	orrs	r2, r4
 80031d8:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031da:	788e      	ldrb	r6, [r1, #2]
 80031dc:	2500      	movs	r5, #0
 80031de:	0434      	lsls	r4, r6, #16
 80031e0:	4322      	orrs	r2, r4
 80031e2:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031e4:	78ce      	ldrb	r6, [r1, #3]
 80031e6:	0a35      	lsrs	r5, r6, #8
 80031e8:	0634      	lsls	r4, r6, #24
 80031ea:	4322      	orrs	r2, r4
 80031ec:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031ee:	2400      	movs	r4, #0
 80031f0:	790d      	ldrb	r5, [r1, #4]
 80031f2:	4322      	orrs	r2, r4
 80031f4:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80031f6:	f891 8005 	ldrb.w	r8, [r1, #5]
 80031fa:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80031fe:	4322      	orrs	r2, r4
 8003200:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003202:	f891 8006 	ldrb.w	r8, [r1, #6]
 8003206:	ea4f 4708 	mov.w	r7, r8, lsl #16
 800320a:	4322      	orrs	r2, r4
 800320c:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800320e:	f891 8007 	ldrb.w	r8, [r1, #7]
 8003212:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8003216:	4322      	orrs	r2, r4
 8003218:	433b      	orrs	r3, r7
 800321a:	e9c0 2302 	strd	r2, r3, [r0, #8]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800321e:	7a0e      	ldrb	r6, [r1, #8]
 8003220:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003222:	f891 8009 	ldrb.w	r8, [r1, #9]
 8003226:	2300      	movs	r3, #0
 8003228:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800322c:	4316      	orrs	r6, r2
 800322e:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003230:	f891 800a 	ldrb.w	r8, [r1, #10]
 8003234:	2300      	movs	r3, #0
 8003236:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800323a:	4316      	orrs	r6, r2
 800323c:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800323e:	f891 800b 	ldrb.w	r8, [r1, #11]
 8003242:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8003246:	ea4f 6208 	mov.w	r2, r8, lsl #24
 800324a:	4316      	orrs	r6, r2
 800324c:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800324e:	7b0b      	ldrb	r3, [r1, #12]
 8003250:	4326      	orrs	r6, r4
 8003252:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003254:	f891 800d 	ldrb.w	r8, [r1, #13]
 8003258:	ea4f 2308 	mov.w	r3, r8, lsl #8
 800325c:	4326      	orrs	r6, r4
 800325e:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003260:	f891 800e 	ldrb.w	r8, [r1, #14]
 8003264:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8003268:	4326      	orrs	r6, r4
 800326a:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800326c:	f891 800f 	ldrb.w	r8, [r1, #15]
 8003270:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8003274:	4622      	mov	r2, r4
      this->y = u_y.real;
 8003276:	4332      	orrs	r2, r6
 8003278:	433b      	orrs	r3, r7
 800327a:	e9c0 2304 	strd	r2, r3, [r0, #16]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800327e:	7c0e      	ldrb	r6, [r1, #16]
 8003280:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003282:	f891 8011 	ldrb.w	r8, [r1, #17]
 8003286:	2300      	movs	r3, #0
 8003288:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800328c:	4316      	orrs	r6, r2
 800328e:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003290:	f891 8012 	ldrb.w	r8, [r1, #18]
 8003294:	2300      	movs	r3, #0
 8003296:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800329a:	4316      	orrs	r6, r2
 800329c:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800329e:	f891 8013 	ldrb.w	r8, [r1, #19]
 80032a2:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80032a6:	ea4f 6208 	mov.w	r2, r8, lsl #24
 80032aa:	4316      	orrs	r6, r2
 80032ac:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032ae:	7d0b      	ldrb	r3, [r1, #20]
 80032b0:	4326      	orrs	r6, r4
 80032b2:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032b4:	f891 8015 	ldrb.w	r8, [r1, #21]
 80032b8:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80032bc:	4326      	orrs	r6, r4
 80032be:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032c0:	f891 8016 	ldrb.w	r8, [r1, #22]
 80032c4:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80032c8:	4326      	orrs	r6, r4
 80032ca:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032cc:	f891 8017 	ldrb.w	r8, [r1, #23]
 80032d0:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80032d4:	4622      	mov	r2, r4
      this->z = u_z.real;
 80032d6:	4332      	orrs	r2, r6
 80032d8:	433b      	orrs	r3, r7
 80032da:	e9c0 2306 	strd	r2, r3, [r0, #24]
      offset += sizeof(this->z);
     return offset;
    }
 80032de:	2018      	movs	r0, #24
 80032e0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80032e4:	4770      	bx	lr
	...

080032e8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80032e8:	4800      	ldr	r0, [pc, #0]	; (80032ec <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 80032ea:	4770      	bx	lr
 80032ec:	0800ab20 	.word	0x0800ab20

080032f0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80032f0:	4800      	ldr	r0, [pc, #0]	; (80032f4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 80032f2:	4770      	bx	lr
 80032f4:	0800aafc 	.word	0x0800aafc

080032f8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:
      z(0),
      w(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 80032f8:	b410      	push	{r4}
 80032fa:	6882      	ldr	r2, [r0, #8]
 80032fc:	68c3      	ldr	r3, [r0, #12]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80032fe:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003300:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8003304:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003306:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800330a:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800330c:	0e12      	lsrs	r2, r2, #24
 800330e:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003310:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003312:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003316:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003318:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800331c:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	71cb      	strb	r3, [r1, #7]
 8003322:	6902      	ldr	r2, [r0, #16]
 8003324:	6943      	ldr	r3, [r0, #20]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003326:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003328:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800332c:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800332e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003332:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003334:	0e12      	lsrs	r2, r2, #24
 8003336:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003338:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800333a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800333e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003340:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003344:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	73cb      	strb	r3, [r1, #15]
 800334a:	6982      	ldr	r2, [r0, #24]
 800334c:	69c3      	ldr	r3, [r0, #28]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800334e:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003350:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8003354:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003356:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800335a:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800335c:	0e12      	lsrs	r2, r2, #24
 800335e:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003360:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003362:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003366:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003368:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800336c:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003372:	6a02      	ldr	r2, [r0, #32]
 8003374:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8003376:	760a      	strb	r2, [r1, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8003378:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800337c:	7648      	strb	r0, [r1, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 800337e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8003382:	7688      	strb	r0, [r1, #26]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003384:	0e12      	lsrs	r2, r2, #24
 8003386:	76ca      	strb	r2, [r1, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003388:	770b      	strb	r3, [r1, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 800338a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800338e:	774a      	strb	r2, [r1, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003390:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003394:	778a      	strb	r2, [r1, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	77cb      	strb	r3, [r1, #31]
      offset += sizeof(this->w);
      return offset;
    }
 800339a:	2020      	movs	r0, #32
 800339c:	bc10      	pop	{r4}
 800339e:	4770      	bx	lr

080033a0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033a0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033a4:	780c      	ldrb	r4, [r1, #0]
 80033a6:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033a8:	784e      	ldrb	r6, [r1, #1]
 80033aa:	2300      	movs	r3, #0
 80033ac:	0232      	lsls	r2, r6, #8
 80033ae:	4314      	orrs	r4, r2
 80033b0:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033b2:	788e      	ldrb	r6, [r1, #2]
 80033b4:	2300      	movs	r3, #0
 80033b6:	0432      	lsls	r2, r6, #16
 80033b8:	4314      	orrs	r4, r2
 80033ba:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033bc:	78ce      	ldrb	r6, [r1, #3]
 80033be:	0a33      	lsrs	r3, r6, #8
 80033c0:	0632      	lsls	r2, r6, #24
 80033c2:	4314      	orrs	r4, r2
 80033c4:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80033c6:	2200      	movs	r2, #0
 80033c8:	790b      	ldrb	r3, [r1, #4]
 80033ca:	4314      	orrs	r4, r2
 80033cc:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033ce:	f891 8005 	ldrb.w	r8, [r1, #5]
 80033d2:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80033d6:	4314      	orrs	r4, r2
 80033d8:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033da:	f891 8006 	ldrb.w	r8, [r1, #6]
 80033de:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80033e2:	4314      	orrs	r4, r2
 80033e4:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033e6:	f891 8007 	ldrb.w	r8, [r1, #7]
 80033ea:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 80033ee:	4314      	orrs	r4, r2
 80033f0:	433d      	orrs	r5, r7
 80033f2:	e9c0 4502 	strd	r4, r5, [r0, #8]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033f6:	7a0e      	ldrb	r6, [r1, #8]
 80033f8:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033fa:	f891 8009 	ldrb.w	r8, [r1, #9]
 80033fe:	2500      	movs	r5, #0
 8003400:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8003404:	4326      	orrs	r6, r4
 8003406:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003408:	f891 800a 	ldrb.w	r8, [r1, #10]
 800340c:	2500      	movs	r5, #0
 800340e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8003412:	4326      	orrs	r6, r4
 8003414:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003416:	f891 800b 	ldrb.w	r8, [r1, #11]
 800341a:	ea4f 2518 	mov.w	r5, r8, lsr #8
 800341e:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8003422:	4326      	orrs	r6, r4
 8003424:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003426:	7b0d      	ldrb	r5, [r1, #12]
 8003428:	4316      	orrs	r6, r2
 800342a:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800342c:	f891 800d 	ldrb.w	r8, [r1, #13]
 8003430:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8003434:	4316      	orrs	r6, r2
 8003436:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003438:	f891 800e 	ldrb.w	r8, [r1, #14]
 800343c:	ea4f 4508 	mov.w	r5, r8, lsl #16
 8003440:	4316      	orrs	r6, r2
 8003442:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003444:	f891 800f 	ldrb.w	r8, [r1, #15]
 8003448:	ea4f 6508 	mov.w	r5, r8, lsl #24
 800344c:	4614      	mov	r4, r2
      this->y = u_y.real;
 800344e:	4334      	orrs	r4, r6
 8003450:	433d      	orrs	r5, r7
 8003452:	e9c0 4504 	strd	r4, r5, [r0, #16]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003456:	7c0e      	ldrb	r6, [r1, #16]
 8003458:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800345a:	f891 8011 	ldrb.w	r8, [r1, #17]
 800345e:	2500      	movs	r5, #0
 8003460:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8003464:	4326      	orrs	r6, r4
 8003466:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003468:	f891 8012 	ldrb.w	r8, [r1, #18]
 800346c:	2500      	movs	r5, #0
 800346e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8003472:	4326      	orrs	r6, r4
 8003474:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003476:	f891 8013 	ldrb.w	r8, [r1, #19]
 800347a:	ea4f 2518 	mov.w	r5, r8, lsr #8
 800347e:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8003482:	4326      	orrs	r6, r4
 8003484:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003486:	7d0d      	ldrb	r5, [r1, #20]
 8003488:	4316      	orrs	r6, r2
 800348a:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800348c:	f891 8015 	ldrb.w	r8, [r1, #21]
 8003490:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8003494:	4316      	orrs	r6, r2
 8003496:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003498:	f891 8016 	ldrb.w	r8, [r1, #22]
 800349c:	ea4f 4508 	mov.w	r5, r8, lsl #16
 80034a0:	4316      	orrs	r6, r2
 80034a2:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80034a4:	f891 8017 	ldrb.w	r8, [r1, #23]
 80034a8:	ea4f 6508 	mov.w	r5, r8, lsl #24
 80034ac:	4614      	mov	r4, r2
      this->z = u_z.real;
 80034ae:	4334      	orrs	r4, r6
 80034b0:	433d      	orrs	r5, r7
 80034b2:	e9c0 4506 	strd	r4, r5, [r0, #24]
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80034b6:	7e0e      	ldrb	r6, [r1, #24]
 80034b8:	2700      	movs	r7, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034ba:	f891 8019 	ldrb.w	r8, [r1, #25]
 80034be:	2500      	movs	r5, #0
 80034c0:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80034c4:	4326      	orrs	r6, r4
 80034c6:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034c8:	f891 801a 	ldrb.w	r8, [r1, #26]
 80034cc:	2500      	movs	r5, #0
 80034ce:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80034d2:	4326      	orrs	r6, r4
 80034d4:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034d6:	f891 801b 	ldrb.w	r8, [r1, #27]
 80034da:	ea4f 2518 	mov.w	r5, r8, lsr #8
 80034de:	ea4f 6408 	mov.w	r4, r8, lsl #24
 80034e2:	4326      	orrs	r6, r4
 80034e4:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034e6:	7f0d      	ldrb	r5, [r1, #28]
 80034e8:	4316      	orrs	r6, r2
 80034ea:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034ec:	f891 801d 	ldrb.w	r8, [r1, #29]
 80034f0:	ea4f 2508 	mov.w	r5, r8, lsl #8
 80034f4:	4316      	orrs	r6, r2
 80034f6:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034f8:	f891 801e 	ldrb.w	r8, [r1, #30]
 80034fc:	ea4f 4508 	mov.w	r5, r8, lsl #16
 8003500:	4316      	orrs	r6, r2
 8003502:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003504:	f891 801f 	ldrb.w	r8, [r1, #31]
 8003508:	ea4f 6508 	mov.w	r5, r8, lsl #24
 800350c:	4614      	mov	r4, r2
      this->w = u_w.real;
 800350e:	4334      	orrs	r4, r6
 8003510:	433d      	orrs	r5, r7
 8003512:	e9c0 4508 	strd	r4, r5, [r0, #32]
      offset += sizeof(this->w);
     return offset;
    }
 8003516:	2020      	movs	r0, #32
 8003518:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800351c:	4770      	bx	lr
	...

08003520 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003520:	4800      	ldr	r0, [pc, #0]	; (8003524 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x4>)
 8003522:	4770      	bx	lr
 8003524:	0800a988 	.word	0x0800a988

08003528 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003528:	4800      	ldr	r0, [pc, #0]	; (800352c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x4>)
 800352a:	4770      	bx	lr
 800352c:	0800a964 	.word	0x0800a964

08003530 <_ZN13geometry_msgs9Transform7getTypeEv>:
      offset += this->translation.deserialize(inbuffer + offset);
      offset += this->rotation.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Transform"; };
 8003530:	4800      	ldr	r0, [pc, #0]	; (8003534 <_ZN13geometry_msgs9Transform7getTypeEv+0x4>)
 8003532:	4770      	bx	lr
 8003534:	0800ab5c 	.word	0x0800ab5c

08003538 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8003538:	4800      	ldr	r0, [pc, #0]	; (800353c <_ZN13geometry_msgs9Transform6getMD5Ev+0x4>)
 800353a:	4770      	bx	lr
 800353c:	0800ab38 	.word	0x0800ab38

08003540 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:
      offset += length_child_frame_id;
      offset += this->transform.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 8003540:	4800      	ldr	r0, [pc, #0]	; (8003544 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x4>)
 8003542:	4770      	bx	lr
 8003544:	0800a9c8 	.word	0x0800a9c8

08003548 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 8003548:	4800      	ldr	r0, [pc, #0]	; (800354c <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x4>)
 800354a:	4770      	bx	lr
 800354c:	0800a9a4 	.word	0x0800a9a4

08003550 <_ZNK2tf9tfMessage9serializeEPh>:
    tfMessage():
      transforms_length(0), transforms(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	4606      	mov	r6, r0
 8003554:	460f      	mov	r7, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8003556:	7903      	ldrb	r3, [r0, #4]
 8003558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 800355a:	7943      	ldrb	r3, [r0, #5]
 800355c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 800355e:	7983      	ldrb	r3, [r0, #6]
 8003560:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8003562:	79c3      	ldrb	r3, [r0, #7]
 8003564:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->transforms_length);
      for( uint32_t i = 0; i < transforms_length; i++){
 8003566:	2400      	movs	r4, #0
      offset += sizeof(this->transforms_length);
 8003568:	2504      	movs	r5, #4
      for( uint32_t i = 0; i < transforms_length; i++){
 800356a:	6873      	ldr	r3, [r6, #4]
 800356c:	429c      	cmp	r4, r3
 800356e:	d20b      	bcs.n	8003588 <_ZNK2tf9tfMessage9serializeEPh+0x38>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8003570:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 8003572:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8003576:	0113      	lsls	r3, r2, #4
 8003578:	58c2      	ldr	r2, [r0, r3]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	1979      	adds	r1, r7, r5
 800357e:	4418      	add	r0, r3
 8003580:	4790      	blx	r2
 8003582:	4405      	add	r5, r0
      for( uint32_t i = 0; i < transforms_length; i++){
 8003584:	3401      	adds	r4, #1
 8003586:	e7f0      	b.n	800356a <_ZNK2tf9tfMessage9serializeEPh+0x1a>
      }
      return offset;
    }
 8003588:	4628      	mov	r0, r5
 800358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800358c <_ZN2tf9tfMessage7getTypeEv>:
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
      }
     return offset;
    }

    const char * getType(){ return "tf/tfMessage"; };
 800358c:	4800      	ldr	r0, [pc, #0]	; (8003590 <_ZN2tf9tfMessage7getTypeEv+0x4>)
 800358e:	4770      	bx	lr
 8003590:	0800ac34 	.word	0x0800ac34

08003594 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8003594:	4800      	ldr	r0, [pc, #0]	; (8003598 <_ZN2tf9tfMessage6getMD5Ev+0x4>)
 8003596:	4770      	bx	lr
 8003598:	0800ac10 	.word	0x0800ac10

0800359c <_ZNK13geometry_msgs5Point9serializeEPh>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800359c:	b410      	push	{r4}
 800359e:	6882      	ldr	r2, [r0, #8]
 80035a0:	68c3      	ldr	r3, [r0, #12]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80035a2:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80035a4:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80035a8:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80035aa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80035ae:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80035b0:	0e12      	lsrs	r2, r2, #24
 80035b2:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80035b4:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80035b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80035ba:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80035bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80035c0:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80035c2:	0e1b      	lsrs	r3, r3, #24
 80035c4:	71cb      	strb	r3, [r1, #7]
 80035c6:	6902      	ldr	r2, [r0, #16]
 80035c8:	6943      	ldr	r3, [r0, #20]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035ca:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80035cc:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80035d0:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80035d2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80035d6:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80035d8:	0e12      	lsrs	r2, r2, #24
 80035da:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80035dc:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80035de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80035e2:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80035e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80035e8:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80035ea:	0e1b      	lsrs	r3, r3, #24
 80035ec:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->y);
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80035ee:	6982      	ldr	r2, [r0, #24]
 80035f0:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80035f2:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80035f4:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80035f8:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80035fa:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80035fe:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003600:	0e12      	lsrs	r2, r2, #24
 8003602:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003604:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003606:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800360a:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800360c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003610:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003612:	0e1b      	lsrs	r3, r3, #24
 8003614:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      return offset;
    }
 8003616:	2018      	movs	r0, #24
 8003618:	bc10      	pop	{r4}
 800361a:	4770      	bx	lr

0800361c <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800361c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003620:	780a      	ldrb	r2, [r1, #0]
 8003622:	2300      	movs	r3, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003624:	784e      	ldrb	r6, [r1, #1]
 8003626:	2500      	movs	r5, #0
 8003628:	0234      	lsls	r4, r6, #8
 800362a:	4322      	orrs	r2, r4
 800362c:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800362e:	788e      	ldrb	r6, [r1, #2]
 8003630:	2500      	movs	r5, #0
 8003632:	0434      	lsls	r4, r6, #16
 8003634:	4322      	orrs	r2, r4
 8003636:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003638:	78ce      	ldrb	r6, [r1, #3]
 800363a:	0a35      	lsrs	r5, r6, #8
 800363c:	0634      	lsls	r4, r6, #24
 800363e:	4322      	orrs	r2, r4
 8003640:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003642:	2400      	movs	r4, #0
 8003644:	790d      	ldrb	r5, [r1, #4]
 8003646:	4322      	orrs	r2, r4
 8003648:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800364a:	f891 8005 	ldrb.w	r8, [r1, #5]
 800364e:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8003652:	4322      	orrs	r2, r4
 8003654:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003656:	f891 8006 	ldrb.w	r8, [r1, #6]
 800365a:	ea4f 4708 	mov.w	r7, r8, lsl #16
 800365e:	4322      	orrs	r2, r4
 8003660:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003662:	f891 8007 	ldrb.w	r8, [r1, #7]
 8003666:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 800366a:	4322      	orrs	r2, r4
 800366c:	433b      	orrs	r3, r7
 800366e:	e9c0 2302 	strd	r2, r3, [r0, #8]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003672:	7a0e      	ldrb	r6, [r1, #8]
 8003674:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003676:	f891 8009 	ldrb.w	r8, [r1, #9]
 800367a:	2300      	movs	r3, #0
 800367c:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8003680:	4316      	orrs	r6, r2
 8003682:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003684:	f891 800a 	ldrb.w	r8, [r1, #10]
 8003688:	2300      	movs	r3, #0
 800368a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800368e:	4316      	orrs	r6, r2
 8003690:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003692:	f891 800b 	ldrb.w	r8, [r1, #11]
 8003696:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800369a:	ea4f 6208 	mov.w	r2, r8, lsl #24
 800369e:	4316      	orrs	r6, r2
 80036a0:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036a2:	7b0b      	ldrb	r3, [r1, #12]
 80036a4:	4326      	orrs	r6, r4
 80036a6:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80036a8:	f891 800d 	ldrb.w	r8, [r1, #13]
 80036ac:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80036b0:	4326      	orrs	r6, r4
 80036b2:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80036b4:	f891 800e 	ldrb.w	r8, [r1, #14]
 80036b8:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80036bc:	4326      	orrs	r6, r4
 80036be:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80036c0:	f891 800f 	ldrb.w	r8, [r1, #15]
 80036c4:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80036c8:	4622      	mov	r2, r4
      this->y = u_y.real;
 80036ca:	4332      	orrs	r2, r6
 80036cc:	433b      	orrs	r3, r7
 80036ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036d2:	7c0e      	ldrb	r6, [r1, #16]
 80036d4:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036d6:	f891 8011 	ldrb.w	r8, [r1, #17]
 80036da:	2300      	movs	r3, #0
 80036dc:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80036e0:	4316      	orrs	r6, r2
 80036e2:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036e4:	f891 8012 	ldrb.w	r8, [r1, #18]
 80036e8:	2300      	movs	r3, #0
 80036ea:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80036ee:	4316      	orrs	r6, r2
 80036f0:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036f2:	f891 8013 	ldrb.w	r8, [r1, #19]
 80036f6:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80036fa:	ea4f 6208 	mov.w	r2, r8, lsl #24
 80036fe:	4316      	orrs	r6, r2
 8003700:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003702:	7d0b      	ldrb	r3, [r1, #20]
 8003704:	4326      	orrs	r6, r4
 8003706:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003708:	f891 8015 	ldrb.w	r8, [r1, #21]
 800370c:	ea4f 2308 	mov.w	r3, r8, lsl #8
 8003710:	4326      	orrs	r6, r4
 8003712:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003714:	f891 8016 	ldrb.w	r8, [r1, #22]
 8003718:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800371c:	4326      	orrs	r6, r4
 800371e:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003720:	f891 8017 	ldrb.w	r8, [r1, #23]
 8003724:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8003728:	4622      	mov	r2, r4
      this->z = u_z.real;
 800372a:	4332      	orrs	r2, r6
 800372c:	433b      	orrs	r3, r7
 800372e:	e9c0 2306 	strd	r2, r3, [r0, #24]
      offset += sizeof(this->z);
     return offset;
    }
 8003732:	2018      	movs	r0, #24
 8003734:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003738:	4770      	bx	lr
	...

0800373c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 800373c:	4800      	ldr	r0, [pc, #0]	; (8003740 <_ZN13geometry_msgs5Point7getTypeEv+0x4>)
 800373e:	4770      	bx	lr
 8003740:	0800aab0 	.word	0x0800aab0

08003744 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003744:	4800      	ldr	r0, [pc, #0]	; (8003748 <_ZN13geometry_msgs5Point6getMD5Ev+0x4>)
 8003746:	4770      	bx	lr
 8003748:	0800aafc 	.word	0x0800aafc

0800374c <_ZN13geometry_msgs4Pose7getTypeEv>:
      offset += this->position.deserialize(inbuffer + offset);
      offset += this->orientation.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Pose"; };
 800374c:	4800      	ldr	r0, [pc, #0]	; (8003750 <_ZN13geometry_msgs4Pose7getTypeEv+0x4>)
 800374e:	4770      	bx	lr
 8003750:	0800aa9c 	.word	0x0800aa9c

08003754 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8003754:	4800      	ldr	r0, [pc, #0]	; (8003758 <_ZN13geometry_msgs4Pose6getMD5Ev+0x4>)
 8003756:	4770      	bx	lr
 8003758:	0800aa78 	.word	0x0800aa78

0800375c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:
      offset += sizeof(this->covariance[i]);
      }
     return offset;
    }

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 800375c:	4800      	ldr	r0, [pc, #0]	; (8003760 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x4>)
 800375e:	4770      	bx	lr
 8003760:	0800aa0c 	.word	0x0800aa0c

08003764 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8003764:	4800      	ldr	r0, [pc, #0]	; (8003768 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x4>)
 8003766:	4770      	bx	lr
 8003768:	0800a9e8 	.word	0x0800a9e8

0800376c <_ZN13geometry_msgs5Twist7getTypeEv>:
      offset += this->linear.deserialize(inbuffer + offset);
      offset += this->angular.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Twist"; };
 800376c:	4800      	ldr	r0, [pc, #0]	; (8003770 <_ZN13geometry_msgs5Twist7getTypeEv+0x4>)
 800376e:	4770      	bx	lr
 8003770:	0800aae8 	.word	0x0800aae8

08003774 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003774:	4800      	ldr	r0, [pc, #0]	; (8003778 <_ZN13geometry_msgs5Twist6getMD5Ev+0x4>)
 8003776:	4770      	bx	lr
 8003778:	0800aac4 	.word	0x0800aac4

0800377c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:
      offset += sizeof(this->covariance[i]);
      }
     return offset;
    }

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 800377c:	4800      	ldr	r0, [pc, #0]	; (8003780 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x4>)
 800377e:	4770      	bx	lr
 8003780:	0800aa54 	.word	0x0800aa54

08003784 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8003784:	4800      	ldr	r0, [pc, #0]	; (8003788 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x4>)
 8003786:	4770      	bx	lr
 8003788:	0800aa30 	.word	0x0800aa30

0800378c <_ZN8nav_msgs8Odometry7getTypeEv>:
      offset += this->pose.deserialize(inbuffer + offset);
      offset += this->twist.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "nav_msgs/Odometry"; };
 800378c:	4800      	ldr	r0, [pc, #0]	; (8003790 <_ZN8nav_msgs8Odometry7getTypeEv+0x4>)
 800378e:	4770      	bx	lr
 8003790:	0800aca4 	.word	0x0800aca4

08003794 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8003794:	4800      	ldr	r0, [pc, #0]	; (8003798 <_ZN8nav_msgs8Odometry6getMD5Ev+0x4>)
 8003796:	4770      	bx	lr
 8003798:	0800ac80 	.word	0x0800ac80

0800379c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 800379c:	f241 03f4 	movw	r3, #4340	; 0x10f4
 80037a0:	5cc0      	ldrb	r0, [r0, r3]
 80037a2:	4770      	bx	lr

080037a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 80037a4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80037a6:	4770      	bx	lr

080037a8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  }
 80037a8:	4800      	ldr	r0, [pc, #0]	; (80037ac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv+0x4>)
 80037aa:	4770      	bx	lr
 80037ac:	0800aae8 	.word	0x0800aae8

080037b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  }
 80037b0:	4800      	ldr	r0, [pc, #0]	; (80037b4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev+0x4>)
 80037b2:	4770      	bx	lr
 80037b4:	0800aac4 	.word	0x0800aac4

080037b8 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cmd_vel_callback( const geometry_msgs::Twist& msg){
 80037b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		speed_drv1 = msg.linear.x + msg.angular.z/2;
 80037bc:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
 80037c0:	2200      	movs	r2, #0
 80037c2:	4b28      	ldr	r3, [pc, #160]	; (8003864 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xac>)
 80037c4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80037c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037cc:	f7fc fe8a 	bl	80004e4 <__aeabi_dmul>
 80037d0:	4606      	mov	r6, r0
 80037d2:	460f      	mov	r7, r1
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4640      	mov	r0, r8
 80037da:	4649      	mov	r1, r9
 80037dc:	f7fc fcd0 	bl	8000180 <__adddf3>
 80037e0:	f7fd f942 	bl	8000a68 <__aeabi_d2f>
 80037e4:	4605      	mov	r5, r0
 80037e6:	f8df a084 	ldr.w	sl, [pc, #132]	; 800386c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb4>
 80037ea:	f8ca 0000 	str.w	r0, [sl]
		speed_drv2 = -msg.linear.x +  msg.angular.z/2 ;
 80037ee:	4642      	mov	r2, r8
 80037f0:	464b      	mov	r3, r9
 80037f2:	4630      	mov	r0, r6
 80037f4:	4639      	mov	r1, r7
 80037f6:	f7fc fcc1 	bl	800017c <__aeabi_dsub>
 80037fa:	f7fd f935 	bl	8000a68 <__aeabi_d2f>
 80037fe:	4604      	mov	r4, r0
 8003800:	f8ca 0004 	str.w	r0, [sl, #4]
		if (speed_drv1 > 1.0) speed_drv1 = 1.0;
 8003804:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003808:	4628      	mov	r0, r5
 800380a:	f7fd f9e9 	bl	8000be0 <__aeabi_fcmpgt>
 800380e:	b118      	cbz	r0, 8003818 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x60>
 8003810:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003814:	f8ca 2000 	str.w	r2, [sl]
		if (speed_drv1 < -1.0) speed_drv1 = -1.0;
 8003818:	4913      	ldr	r1, [pc, #76]	; (8003868 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb0>)
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb4>)
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	f7fd f9c1 	bl	8000ba4 <__aeabi_fcmplt>
 8003822:	b9b8      	cbnz	r0, 8003854 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x9c>
		if (speed_drv2 > 1.0) speed_drv2 = 1.0;
 8003824:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003828:	4620      	mov	r0, r4
 800382a:	f7fd f9d9 	bl	8000be0 <__aeabi_fcmpgt>
 800382e:	b118      	cbz	r0, 8003838 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x80>
 8003830:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003834:	4b0d      	ldr	r3, [pc, #52]	; (800386c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb4>)
 8003836:	605a      	str	r2, [r3, #4]
		if (speed_drv2 < -1.0) speed_drv2 = -1.0;
 8003838:	490b      	ldr	r1, [pc, #44]	; (8003868 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb0>)
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb4>)
 800383c:	6858      	ldr	r0, [r3, #4]
 800383e:	f7fd f9b1 	bl	8000ba4 <__aeabi_fcmplt>
 8003842:	b958      	cbnz	r0, 800385c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xa4>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800384a:	4809      	ldr	r0, [pc, #36]	; (8003870 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb8>)
 800384c:	f7fe fc76 	bl	800213c <HAL_GPIO_WritePin>
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (speed_drv1 < -1.0) speed_drv1 = -1.0;
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb0>)
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb4>)
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e7e3      	b.n	8003824 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x6c>
		if (speed_drv2 < -1.0) speed_drv2 = -1.0;
 800385c:	4a02      	ldr	r2, [pc, #8]	; (8003868 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb0>)
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0xb4>)
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e7ef      	b.n	8003844 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x8c>
 8003864:	3fe00000 	.word	0x3fe00000
 8003868:	bf800000 	.word	0xbf800000
 800386c:	20000530 	.word	0x20000530
 8003870:	40011000 	.word	0x40011000

08003874 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003874:	b530      	push	{r4, r5, lr}
 8003876:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	2400      	movs	r4, #0
 800387a:	9404      	str	r4, [sp, #16]
 800387c:	9405      	str	r4, [sp, #20]
 800387e:	9406      	str	r4, [sp, #24]
 8003880:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <_ZL12MX_GPIO_Initv+0x84>)
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	f042 0210 	orr.w	r2, r2, #16
 800388a:	619a      	str	r2, [r3, #24]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	f002 0210 	and.w	r2, r2, #16
 8003892:	9200      	str	r2, [sp, #0]
 8003894:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	f042 0220 	orr.w	r2, r2, #32
 800389c:	619a      	str	r2, [r3, #24]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	f002 0220 	and.w	r2, r2, #32
 80038a4:	9201      	str	r2, [sp, #4]
 80038a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	f042 0204 	orr.w	r2, r2, #4
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	f002 0204 	and.w	r2, r2, #4
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	f042 0208 	orr.w	r2, r2, #8
 80038c0:	619a      	str	r2, [r3, #24]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	9303      	str	r3, [sp, #12]
 80038ca:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80038cc:	4d0b      	ldr	r5, [pc, #44]	; (80038fc <_ZL12MX_GPIO_Initv+0x88>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d4:	4628      	mov	r0, r5
 80038d6:	f7fe fc31 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038de:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e0:	2301      	movs	r3, #1
 80038e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	2302      	movs	r3, #2
 80038e8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ea:	a904      	add	r1, sp, #16
 80038ec:	4628      	mov	r0, r5
 80038ee:	f7fe fb2d 	bl	8001f4c <HAL_GPIO_Init>

}
 80038f2:	b009      	add	sp, #36	; 0x24
 80038f4:	bd30      	pop	{r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40011000 	.word	0x40011000

08003900 <_ZL11MX_DMA_Initv>:
{
 8003900:	b500      	push	{lr}
 8003902:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <_ZL11MX_DMA_Initv+0x40>)
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	615a      	str	r2, [r3, #20]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003918:	2200      	movs	r2, #0
 800391a:	4611      	mov	r1, r2
 800391c:	200e      	movs	r0, #14
 800391e:	f7fe f94b 	bl	8001bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003922:	200e      	movs	r0, #14
 8003924:	f7fe f97a 	bl	8001c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	4611      	mov	r1, r2
 800392c:	200f      	movs	r0, #15
 800392e:	f7fe f943 	bl	8001bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003932:	200f      	movs	r0, #15
 8003934:	f7fe f972 	bl	8001c1c <HAL_NVIC_EnableIRQ>
}
 8003938:	b003      	add	sp, #12
 800393a:	f85d fb04 	ldr.w	pc, [sp], #4
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000

08003944 <_ZL19MX_USART1_UART_Initv>:
{
 8003944:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003946:	4809      	ldr	r0, [pc, #36]	; (800396c <_ZL19MX_USART1_UART_Initv+0x28>)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <_ZL19MX_USART1_UART_Initv+0x2c>)
 800394a:	6083      	str	r3, [r0, #8]
  huart1.Init.BaudRate = 57600;
 800394c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003950:	60c3      	str	r3, [r0, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	2300      	movs	r3, #0
 8003954:	6103      	str	r3, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003956:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003958:	6183      	str	r3, [r0, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800395a:	220c      	movs	r2, #12
 800395c:	61c2      	str	r2, [r0, #28]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395e:	6203      	str	r3, [r0, #32]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003962:	3008      	adds	r0, #8
 8003964:	f7ff f80a 	bl	800297c <HAL_UART_Init>
 8003968:	bd08      	pop	{r3, pc}
 800396a:	bf00      	nop
 800396c:	20000530 	.word	0x20000530
 8003970:	40013800 	.word	0x40013800

08003974 <_ZL19MX_USART2_UART_Initv>:
{
 8003974:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003976:	4809      	ldr	r0, [pc, #36]	; (800399c <_ZL19MX_USART2_UART_Initv+0x28>)
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x2c>)
 800397a:	6483      	str	r3, [r0, #72]	; 0x48
  huart2.Init.BaudRate = 115200;
 800397c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003980:	64c3      	str	r3, [r0, #76]	; 0x4c
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003982:	2300      	movs	r3, #0
 8003984:	6503      	str	r3, [r0, #80]	; 0x50
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003986:	6543      	str	r3, [r0, #84]	; 0x54
  huart2.Init.Parity = UART_PARITY_NONE;
 8003988:	6583      	str	r3, [r0, #88]	; 0x58
  huart2.Init.Mode = UART_MODE_TX_RX;
 800398a:	220c      	movs	r2, #12
 800398c:	65c2      	str	r2, [r0, #92]	; 0x5c
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800398e:	6603      	str	r3, [r0, #96]	; 0x60
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003990:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003992:	3048      	adds	r0, #72	; 0x48
 8003994:	f7fe fff2 	bl	800297c <HAL_UART_Init>
 8003998:	bd08      	pop	{r3, pc}
 800399a:	bf00      	nop
 800399c:	20000530 	.word	0x20000530
 80039a0:	40004400 	.word	0x40004400

080039a4 <_ZL19MX_USART3_UART_Initv>:
{
 80039a4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80039a6:	480d      	ldr	r0, [pc, #52]	; (80039dc <_ZL19MX_USART3_UART_Initv+0x38>)
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <_ZL19MX_USART3_UART_Initv+0x3c>)
 80039aa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart3.Init.BaudRate = 115200;
 80039ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80039b2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039bc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  huart3.Init.Parity = UART_PARITY_NONE;
 80039c0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039c4:	220c      	movs	r2, #12
 80039c6:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ca:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039ce:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039d2:	3088      	adds	r0, #136	; 0x88
 80039d4:	f7fe ffd2 	bl	800297c <HAL_UART_Init>
 80039d8:	bd08      	pop	{r3, pc}
 80039da:	bf00      	nop
 80039dc:	20000530 	.word	0x20000530
 80039e0:	40004800 	.word	0x40004800

080039e4 <_ZNK8std_msgs6Header9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4605      	mov	r5, r0
 80039e8:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80039ea:	7903      	ldrb	r3, [r0, #4]
 80039ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80039ee:	7943      	ldrb	r3, [r0, #5]
 80039f0:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80039f2:	7983      	ldrb	r3, [r0, #6]
 80039f4:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80039f6:	79c3      	ldrb	r3, [r0, #7]
 80039f8:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80039fa:	7a03      	ldrb	r3, [r0, #8]
 80039fc:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80039fe:	7a43      	ldrb	r3, [r0, #9]
 8003a00:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003a02:	7a83      	ldrb	r3, [r0, #10]
 8003a04:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003a06:	7ac3      	ldrb	r3, [r0, #11]
 8003a08:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003a0a:	7b03      	ldrb	r3, [r0, #12]
 8003a0c:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003a0e:	7b43      	ldrb	r3, [r0, #13]
 8003a10:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003a12:	7b83      	ldrb	r3, [r0, #14]
 8003a14:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003a16:	7bc3      	ldrb	r3, [r0, #15]
 8003a18:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
 8003a1a:	6900      	ldr	r0, [r0, #16]
 8003a1c:	f7fc fba2 	bl	8000164 <strlen>
 8003a20:	4606      	mov	r6, r0
    for (size_t i = 0; i < sizeof(V); i++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d807      	bhi.n	8003a38 <_ZNK8std_msgs6Header9serializeEPh+0x54>
      arr[i] = (var >> (8 * i));
 8003a28:	f103 010c 	add.w	r1, r3, #12
 8003a2c:	00da      	lsls	r2, r3, #3
 8003a2e:	fa26 f202 	lsr.w	r2, r6, r2
 8003a32:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a34:	3301      	adds	r3, #1
 8003a36:	e7f5      	b.n	8003a24 <_ZNK8std_msgs6Header9serializeEPh+0x40>
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8003a38:	4632      	mov	r2, r6
 8003a3a:	6929      	ldr	r1, [r5, #16]
 8003a3c:	f104 0010 	add.w	r0, r4, #16
 8003a40:	f006 f9b2 	bl	8009da8 <memcpy>
    }
 8003a44:	f106 0010 	add.w	r0, r6, #16
 8003a48:	bd70      	pop	{r4, r5, r6, pc}

08003a4a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8003a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003a50:	7903      	ldrb	r3, [r0, #4]
 8003a52:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003a54:	8883      	ldrh	r3, [r0, #4]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003a5a:	6880      	ldr	r0, [r0, #8]
 8003a5c:	f7fc fb82 	bl	8000164 <strlen>
 8003a60:	4607      	mov	r7, r0
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d806      	bhi.n	8003a76 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x2c>
      arr[i] = (var >> (8 * i));
 8003a68:	1c99      	adds	r1, r3, #2
 8003a6a:	00da      	lsls	r2, r3, #3
 8003a6c:	fa27 f202 	lsr.w	r2, r7, r2
 8003a70:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a72:	3301      	adds	r3, #1
 8003a74:	e7f6      	b.n	8003a64 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x1a>
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003a76:	463a      	mov	r2, r7
 8003a78:	68b1      	ldr	r1, [r6, #8]
 8003a7a:	1da0      	adds	r0, r4, #6
 8003a7c:	f006 f994 	bl	8009da8 <memcpy>
      offset += length_topic_name;
 8003a80:	3706      	adds	r7, #6
      uint32_t length_message_type = strlen(this->message_type);
 8003a82:	68f0      	ldr	r0, [r6, #12]
 8003a84:	f7fc fb6e 	bl	8000164 <strlen>
 8003a88:	4605      	mov	r5, r0
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d806      	bhi.n	8003a9e <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x54>
      arr[i] = (var >> (8 * i));
 8003a90:	18f9      	adds	r1, r7, r3
 8003a92:	00da      	lsls	r2, r3, #3
 8003a94:	fa25 f202 	lsr.w	r2, r5, r2
 8003a98:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	e7f6      	b.n	8003a8c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x42>
      offset += 4;
 8003a9e:	3704      	adds	r7, #4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	68f1      	ldr	r1, [r6, #12]
 8003aa4:	19e0      	adds	r0, r4, r7
 8003aa6:	f006 f97f 	bl	8009da8 <memcpy>
      offset += length_message_type;
 8003aaa:	443d      	add	r5, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8003aac:	6930      	ldr	r0, [r6, #16]
 8003aae:	f7fc fb59 	bl	8000164 <strlen>
 8003ab2:	4607      	mov	r7, r0
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d806      	bhi.n	8003ac8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x7e>
      arr[i] = (var >> (8 * i));
 8003aba:	18e9      	adds	r1, r5, r3
 8003abc:	00da      	lsls	r2, r3, #3
 8003abe:	fa27 f202 	lsr.w	r2, r7, r2
 8003ac2:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e7f6      	b.n	8003ab6 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6c>
      offset += 4;
 8003ac8:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003aca:	463a      	mov	r2, r7
 8003acc:	6931      	ldr	r1, [r6, #16]
 8003ace:	1960      	adds	r0, r4, r5
 8003ad0:	f006 f96a 	bl	8009da8 <memcpy>
      offset += length_md5sum;
 8003ad4:	443d      	add	r5, r7
      u_buffer_size.real = this->buffer_size;
 8003ad6:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003ad8:	5563      	strb	r3, [r4, r5]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003ada:	1c6a      	adds	r2, r5, #1
 8003adc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003ae0:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003ae2:	1caa      	adds	r2, r5, #2
 8003ae4:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8003ae8:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003aea:	1cea      	adds	r2, r5, #3
 8003aec:	0e1b      	lsrs	r3, r3, #24
 8003aee:	54a3      	strb	r3, [r4, r2]
    }
 8003af0:	1d28      	adds	r0, r5, #4
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003af4 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4606      	mov	r6, r0
 8003af8:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003afa:	7903      	ldrb	r3, [r0, #4]
 8003afc:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
 8003afe:	6880      	ldr	r0, [r0, #8]
 8003b00:	f7fc fb30 	bl	8000164 <strlen>
 8003b04:	4604      	mov	r4, r0
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d806      	bhi.n	8003b1a <_ZNK14rosserial_msgs3Log9serializeEPh+0x26>
 8003b0c:	1c5a      	adds	r2, r3, #1
      arr[i] = (var >> (8 * i));
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	fa24 f303 	lsr.w	r3, r4, r3
 8003b14:	54ab      	strb	r3, [r5, r2]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b16:	4613      	mov	r3, r2
 8003b18:	e7f6      	b.n	8003b08 <_ZNK14rosserial_msgs3Log9serializeEPh+0x14>
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	68b1      	ldr	r1, [r6, #8]
 8003b1e:	1d68      	adds	r0, r5, #5
 8003b20:	f006 f942 	bl	8009da8 <memcpy>
    }
 8003b24:	1d60      	adds	r0, r4, #5
 8003b26:	bd70      	pop	{r4, r5, r6, pc}

08003b28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8003b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003b30:	7903      	ldrb	r3, [r0, #4]
 8003b32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003b34:	7943      	ldrb	r3, [r0, #5]
 8003b36:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003b38:	7983      	ldrb	r3, [r0, #6]
 8003b3a:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003b3c:	79c3      	ldrb	r3, [r0, #7]
 8003b3e:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 8003b40:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8003b42:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8003b44:	6873      	ldr	r3, [r6, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d211      	bcs.n	8003b6e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x46>
      u_intsi.real = this->ints[i];
 8003b4a:	68f3      	ldr	r3, [r6, #12]
 8003b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003b50:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003b52:	1c61      	adds	r1, r4, #1
 8003b54:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8003b58:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003b5a:	1ca1      	adds	r1, r4, #2
 8003b5c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8003b60:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003b62:	1ce1      	adds	r1, r4, #3
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->ints[i]);
 8003b68:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8003b6a:	3201      	adds	r2, #1
 8003b6c:	e7ea      	b.n	8003b44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1c>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003b6e:	7c33      	ldrb	r3, [r6, #16]
 8003b70:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003b72:	1c63      	adds	r3, r4, #1
 8003b74:	7c72      	ldrb	r2, [r6, #17]
 8003b76:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003b78:	1ca3      	adds	r3, r4, #2
 8003b7a:	7cb2      	ldrb	r2, [r6, #18]
 8003b7c:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003b7e:	1ce3      	adds	r3, r4, #3
 8003b80:	7cf2      	ldrb	r2, [r6, #19]
 8003b82:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->floats_length);
 8003b84:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 8003b86:	2200      	movs	r2, #0
 8003b88:	6933      	ldr	r3, [r6, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d211      	bcs.n	8003bb2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8a>
      u_floatsi.real = this->floats[i];
 8003b8e:	69b3      	ldr	r3, [r6, #24]
 8003b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003b94:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003b96:	1c61      	adds	r1, r4, #1
 8003b98:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8003b9c:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003b9e:	1ca1      	adds	r1, r4, #2
 8003ba0:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8003ba4:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003ba6:	1ce1      	adds	r1, r4, #3
 8003ba8:	0e1b      	lsrs	r3, r3, #24
 8003baa:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->floats[i]);
 8003bac:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 8003bae:	3201      	adds	r2, #1
 8003bb0:	e7ea      	b.n	8003b88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x60>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003bb2:	7f33      	ldrb	r3, [r6, #28]
 8003bb4:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003bb6:	1c63      	adds	r3, r4, #1
 8003bb8:	7f72      	ldrb	r2, [r6, #29]
 8003bba:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003bbc:	1ca3      	adds	r3, r4, #2
 8003bbe:	7fb2      	ldrb	r2, [r6, #30]
 8003bc0:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003bc2:	1ce3      	adds	r3, r4, #3
 8003bc4:	7ff2      	ldrb	r2, [r6, #31]
 8003bc6:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->strings_length);
 8003bc8:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < strings_length; i++){
 8003bca:	f04f 0800 	mov.w	r8, #0
 8003bce:	e00a      	b.n	8003be6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      offset += 4;
 8003bd0:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003bd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003bd4:	463a      	mov	r2, r7
 8003bd6:	f853 1009 	ldr.w	r1, [r3, r9]
 8003bda:	1928      	adds	r0, r5, r4
 8003bdc:	f006 f8e4 	bl	8009da8 <memcpy>
      offset += length_stringsi;
 8003be0:	443c      	add	r4, r7
      for( uint32_t i = 0; i < strings_length; i++){
 8003be2:	f108 0801 	add.w	r8, r8, #1
 8003be6:	69f3      	ldr	r3, [r6, #28]
 8003be8:	4598      	cmp	r8, r3
 8003bea:	d212      	bcs.n	8003c12 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xea>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003bec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003bee:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8003bf2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003bf6:	f7fc fab5 	bl	8000164 <strlen>
 8003bfa:	4607      	mov	r7, r0
      varToArr(outbuffer + offset, length_stringsi);
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d8e5      	bhi.n	8003bd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      arr[i] = (var >> (8 * i));
 8003c04:	18c1      	adds	r1, r0, r3
 8003c06:	00da      	lsls	r2, r3, #3
 8003c08:	fa27 f202 	lsr.w	r2, r7, r2
 8003c0c:	546a      	strb	r2, [r5, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c0e:	3301      	adds	r3, #1
 8003c10:	e7f6      	b.n	8003c00 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xd8>
    }
 8003c12:	4620      	mov	r0, r4
 8003c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003c18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	460d      	mov	r5, r1
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c1e:	780c      	ldrb	r4, [r1, #0]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003c20:	784b      	ldrb	r3, [r1, #1]
 8003c22:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003c26:	788b      	ldrb	r3, [r1, #2]
 8003c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003c2c:	78cb      	ldrb	r3, [r1, #3]
 8003c2e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      if(ints_lengthT > ints_length)
 8003c32:	6843      	ldr	r3, [r0, #4]
 8003c34:	429c      	cmp	r4, r3
 8003c36:	d819      	bhi.n	8003c6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x54>
      ints_length = ints_lengthT;
 8003c38:	6074      	str	r4, [r6, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003c3a:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8003c3c:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8003c3e:	6873      	ldr	r3, [r6, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d219      	bcs.n	8003c78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x60>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c44:	5d2b      	ldrb	r3, [r5, r4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c46:	1c61      	adds	r1, r4, #1
 8003c48:	5c69      	ldrb	r1, [r5, r1]
 8003c4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c4e:	1ca1      	adds	r1, r4, #2
 8003c50:	5c69      	ldrb	r1, [r5, r1]
 8003c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c56:	1ce1      	adds	r1, r4, #3
 8003c58:	5c69      	ldrb	r1, [r5, r1]
 8003c5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8003c5e:	60b3      	str	r3, [r6, #8]
      offset += sizeof(this->st_ints);
 8003c60:	3404      	adds	r4, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003c62:	68f1      	ldr	r1, [r6, #12]
 8003c64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8003c68:	3201      	adds	r2, #1
 8003c6a:	e7e8      	b.n	8003c3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003c6c:	00a1      	lsls	r1, r4, #2
 8003c6e:	68c0      	ldr	r0, [r0, #12]
 8003c70:	f006 f8ba 	bl	8009de8 <realloc>
 8003c74:	60f0      	str	r0, [r6, #12]
 8003c76:	e7df      	b.n	8003c38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x20>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c78:	5d2f      	ldrb	r7, [r5, r4]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003c7a:	1c63      	adds	r3, r4, #1
 8003c7c:	5ceb      	ldrb	r3, [r5, r3]
 8003c7e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003c82:	1ca3      	adds	r3, r4, #2
 8003c84:	5ceb      	ldrb	r3, [r5, r3]
 8003c86:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003c8a:	1ce3      	adds	r3, r4, #3
 8003c8c:	5ceb      	ldrb	r3, [r5, r3]
 8003c8e:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8003c92:	3404      	adds	r4, #4
      if(floats_lengthT > floats_length)
 8003c94:	6933      	ldr	r3, [r6, #16]
 8003c96:	429f      	cmp	r7, r3
 8003c98:	d818      	bhi.n	8003ccc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xb4>
      floats_length = floats_lengthT;
 8003c9a:	6137      	str	r7, [r6, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	6933      	ldr	r3, [r6, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d219      	bcs.n	8003cd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc0>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ca4:	5d2b      	ldrb	r3, [r5, r4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ca6:	1c61      	adds	r1, r4, #1
 8003ca8:	5c69      	ldrb	r1, [r5, r1]
 8003caa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cae:	1ca1      	adds	r1, r4, #2
 8003cb0:	5c69      	ldrb	r1, [r5, r1]
 8003cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cb6:	1ce1      	adds	r1, r4, #3
 8003cb8:	5c69      	ldrb	r1, [r5, r1]
 8003cba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8003cbe:	6173      	str	r3, [r6, #20]
      offset += sizeof(this->st_floats);
 8003cc0:	3404      	adds	r4, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003cc2:	69b1      	ldr	r1, [r6, #24]
 8003cc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8003cc8:	3201      	adds	r2, #1
 8003cca:	e7e8      	b.n	8003c9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x86>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003ccc:	00b9      	lsls	r1, r7, #2
 8003cce:	69b0      	ldr	r0, [r6, #24]
 8003cd0:	f006 f88a 	bl	8009de8 <realloc>
 8003cd4:	61b0      	str	r0, [r6, #24]
 8003cd6:	e7e0      	b.n	8003c9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x82>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003cd8:	5d2f      	ldrb	r7, [r5, r4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003cda:	1c63      	adds	r3, r4, #1
 8003cdc:	5ceb      	ldrb	r3, [r5, r3]
 8003cde:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ce2:	1ca3      	adds	r3, r4, #2
 8003ce4:	5ceb      	ldrb	r3, [r5, r3]
 8003ce6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003cea:	1ce3      	adds	r3, r4, #3
 8003cec:	5ceb      	ldrb	r3, [r5, r3]
 8003cee:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
 8003cf2:	3404      	adds	r4, #4
      if(strings_lengthT > strings_length)
 8003cf4:	69f3      	ldr	r3, [r6, #28]
 8003cf6:	429f      	cmp	r7, r3
 8003cf8:	d803      	bhi.n	8003d02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xea>
      strings_length = strings_lengthT;
 8003cfa:	61f7      	str	r7, [r6, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003cfc:	f04f 0e00 	mov.w	lr, #0
 8003d00:	e01b      	b.n	8003d3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x122>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003d02:	00b9      	lsls	r1, r7, #2
 8003d04:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003d06:	f006 f86f 	bl	8009de8 <realloc>
 8003d0a:	6270      	str	r0, [r6, #36]	; 0x24
 8003d0c:	e7f5      	b.n	8003cfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe2>
      offset += 4;
 8003d0e:	3404      	adds	r4, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003d10:	4623      	mov	r3, r4
 8003d12:	18a0      	adds	r0, r4, r2
 8003d14:	4283      	cmp	r3, r0
 8003d16:	d204      	bcs.n	8003d22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10a>
          inbuffer[k-1]=inbuffer[k];
 8003d18:	1e59      	subs	r1, r3, #1
 8003d1a:	5cef      	ldrb	r7, [r5, r3]
 8003d1c:	546f      	strb	r7, [r5, r1]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003d1e:	3301      	adds	r3, #1
 8003d20:	e7f7      	b.n	8003d12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfa>
      inbuffer[offset+length_st_strings-1]=0;
 8003d22:	1e43      	subs	r3, r0, #1
 8003d24:	2200      	movs	r2, #0
 8003d26:	54ea      	strb	r2, [r5, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003d28:	3c01      	subs	r4, #1
 8003d2a:	192b      	adds	r3, r5, r4
 8003d2c:	6233      	str	r3, [r6, #32]
      offset += length_st_strings;
 8003d2e:	4604      	mov	r4, r0
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003d30:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003d32:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8003d36:	f10e 0e01 	add.w	lr, lr, #1
 8003d3a:	69f3      	ldr	r3, [r6, #28]
 8003d3c:	459e      	cmp	lr, r3
 8003d3e:	d20b      	bcs.n	8003d58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x140>
      arrToVar(length_st_strings, (inbuffer + offset));
 8003d40:	4627      	mov	r7, r4
    var = 0;
 8003d42:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8003d44:	4613      	mov	r3, r2
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d8e1      	bhi.n	8003d0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      var |= (arr[i] << (8 * i));
 8003d4a:	19e9      	adds	r1, r5, r7
 8003d4c:	5cc9      	ldrb	r1, [r1, r3]
 8003d4e:	00d8      	lsls	r0, r3, #3
 8003d50:	4081      	lsls	r1, r0
 8003d52:	430a      	orrs	r2, r1
    for (size_t i = 0; i < sizeof(V); i++)
 8003d54:	3301      	adds	r3, #1
 8003d56:	e7f6      	b.n	8003d46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x12e>
    }
 8003d58:	4620      	mov	r0, r4
 8003d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8003d5c:	b530      	push	{r4, r5, lr}
 8003d5e:	b085      	sub	sp, #20
  {
    if (id >= 100 && !configured_)
 8003d60:	2963      	cmp	r1, #99	; 0x63
 8003d62:	dd04      	ble.n	8003d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x12>
 8003d64:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8003d68:	5cc3      	ldrb	r3, [r0, r3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d069      	beq.n	8003e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xe6>
 8003d6e:	460d      	mov	r5, r1
 8003d70:	4604      	mov	r4, r0
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f600 011f 	addw	r1, r0, #2079	; 0x81f
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
 8003d7e:	23ff      	movs	r3, #255	; 0xff
 8003d80:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 8003d84:	23fe      	movs	r3, #254	; 0xfe
 8003d86:	f884 3819 	strb.w	r3, [r4, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003d8a:	b2c3      	uxtb	r3, r0
 8003d8c:	f884 381a 	strb.w	r3, [r4, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003d90:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003d94:	f884 281b 	strb.w	r2, [r4, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003d98:	4413      	add	r3, r2
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	f884 381c 	strb.w	r3, [r4, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003da2:	f884 581d 	strb.w	r5, [r4, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003da6:	f345 2307 	sbfx	r3, r5, #8, #8
 8003daa:	f884 381e 	strb.w	r3, [r4, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 8003dae:	2305      	movs	r3, #5
    int chk = 0;
 8003db0:	2200      	movs	r2, #0
    for (int i = 5; i < l + 7; i++)
 8003db2:	1dc1      	adds	r1, r0, #7
 8003db4:	428b      	cmp	r3, r1
 8003db6:	da05      	bge.n	8003dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x68>
      chk += message_out[i];
 8003db8:	18e1      	adds	r1, r4, r3
 8003dba:	f891 1818 	ldrb.w	r1, [r1, #2072]	; 0x818
 8003dbe:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	e7f6      	b.n	8003db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x56>
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 8003dc4:	f100 0508 	add.w	r5, r0, #8
 8003dc8:	4253      	negs	r3, r2
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	bf58      	it	pl
 8003dd0:	425a      	negpl	r2, r3
 8003dd2:	43d2      	mvns	r2, r2
 8003dd4:	4421      	add	r1, r4
 8003dd6:	f881 2818 	strb.w	r2, [r1, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 8003dda:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003dde:	dc20      	bgt.n	8003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc6>
    {
      hardware_.write(message_out, l);
 8003de0:	f604 0118 	addw	r1, r4, #2072	; 0x818
		return com->read();
	}

	void write(uint8_t* data, int length)
	{
		com->write(data, length);
 8003de4:	6860      	ldr	r0, [r4, #4]
		return c;
	}

	inline void write(const uint8_t * const c, const int length)
	{
		if (length > BUF_SIZE || length < 1)
 8003de6:	1e6b      	subs	r3, r5, #1
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dec:	d216      	bcs.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc0>
		{
			return;
		}

		while(!tx_cplt)
 8003dee:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0fa      	beq.n	8003dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x92>
 8003df8:	2300      	movs	r3, #0
		{

		}

		for (int i = 0; i < length; i++)
 8003dfa:	429d      	cmp	r5, r3
 8003dfc:	dd03      	ble.n	8003e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xaa>
		{
			tx_buf[i] = c[i];
 8003dfe:	5cca      	ldrb	r2, [r1, r3]
 8003e00:	54c2      	strb	r2, [r0, r3]
		for (int i = 0; i < length; i++)
 8003e02:	3301      	adds	r3, #1
 8003e04:	e7f9      	b.n	8003dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x9e>
		}

		if(tx_cplt)
		{
			tx_cplt = false;
 8003e06:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003e0e:	b2aa      	uxth	r2, r5
 8003e10:	4601      	mov	r1, r0
 8003e12:	f241 0308 	movw	r3, #4104	; 0x1008
 8003e16:	58c0      	ldr	r0, [r0, r3]
 8003e18:	f7fe fe50 	bl	8002abc <HAL_UART_Transmit_DMA>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	b005      	add	sp, #20
 8003e20:	bd30      	pop	{r4, r5, pc}
      msg("")
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xec>)
 8003e24:	9301      	str	r3, [sp, #4]

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 8003e26:	2303      	movs	r3, #3
 8003e28:	f88d 3008 	strb.w	r3, [sp, #8]
    l.msg = (char*)msg;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xf0>)
 8003e2e:	9303      	str	r3, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	aa01      	add	r2, sp, #4
 8003e36:	2107      	movs	r1, #7
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4798      	blx	r3
      return -1;
 8003e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e40:	e7ec      	b.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc0>
      return 0;
 8003e42:	2500      	movs	r5, #0
 8003e44:	e7ea      	b.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc0>
 8003e46:	bf00      	nop
 8003e48:	0800a7f0 	.word	0x0800a7f0
 8003e4c:	0800ac44 	.word	0x0800ac44

08003e50 <_ZNK13geometry_msgs5Twist9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8003e50:	b430      	push	{r4, r5}
 8003e52:	6902      	ldr	r2, [r0, #16]
 8003e54:	6943      	ldr	r3, [r0, #20]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003e56:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003e58:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8003e5c:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003e5e:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8003e62:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003e64:	0e12      	lsrs	r2, r2, #24
 8003e66:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003e68:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003e6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003e6e:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003e70:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003e74:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003e76:	0e1b      	lsrs	r3, r3, #24
 8003e78:	71cb      	strb	r3, [r1, #7]
 8003e7a:	6982      	ldr	r2, [r0, #24]
 8003e7c:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003e7e:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003e80:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8003e84:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003e86:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8003e8a:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003e8c:	0e12      	lsrs	r2, r2, #24
 8003e8e:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003e90:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003e92:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003e96:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003e98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003e9c:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003e9e:	0e1b      	lsrs	r3, r3, #24
 8003ea0:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 8003ea2:	6a02      	ldr	r2, [r0, #32]
 8003ea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003ea6:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003ea8:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8003eac:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003eae:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003eb2:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003eb4:	0e12      	lsrs	r2, r2, #24
 8003eb6:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003eb8:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003eba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003ebe:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003ec0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003ec4:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003ec6:	0e1b      	lsrs	r3, r3, #24
 8003ec8:	75cb      	strb	r3, [r1, #23]
      offset += this->angular.serialize(outbuffer + offset);
 8003eca:	f101 0318 	add.w	r3, r1, #24
 8003ece:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003ed0:	6b42      	ldr	r2, [r0, #52]	; 0x34
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003ed2:	760c      	strb	r4, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003ed4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8003ed8:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003eda:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8003ede:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003ee0:	0e24      	lsrs	r4, r4, #24
 8003ee2:	70dc      	strb	r4, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003ee4:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003ee6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003eea:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003eec:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003ef0:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003ef2:	0e12      	lsrs	r2, r2, #24
 8003ef4:	71da      	strb	r2, [r3, #7]
 8003ef6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003ef8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003efa:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003efc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8003f00:	725c      	strb	r4, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003f02:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8003f06:	729c      	strb	r4, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003f08:	0e09      	lsrs	r1, r1, #24
 8003f0a:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003f0c:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003f0e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003f12:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003f14:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003f18:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003f1a:	0e12      	lsrs	r2, r2, #24
 8003f1c:	73da      	strb	r2, [r3, #15]
      u_z.real = this->z;
 8003f1e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f20:	6c42      	ldr	r2, [r0, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003f22:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003f24:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8003f28:	7458      	strb	r0, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003f2a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8003f2e:	7498      	strb	r0, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003f30:	0e09      	lsrs	r1, r1, #24
 8003f32:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003f34:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003f36:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003f3a:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003f3c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003f40:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003f42:	0e12      	lsrs	r2, r2, #24
 8003f44:	75da      	strb	r2, [r3, #23]
    }
 8003f46:	2030      	movs	r0, #48	; 0x30
 8003f48:	bc30      	pop	{r4, r5}
 8003f4a:	4770      	bx	lr

08003f4c <_ZN2tf9tfMessage11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8003f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	b0e3      	sub	sp, #396	; 0x18c
 8003f52:	4682      	mov	sl, r0
 8003f54:	460d      	mov	r5, r1
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003f56:	780c      	ldrb	r4, [r1, #0]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003f58:	784b      	ldrb	r3, [r1, #1]
 8003f5a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003f5e:	788b      	ldrb	r3, [r1, #2]
 8003f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003f64:	78cb      	ldrb	r3, [r1, #3]
 8003f66:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      if(transforms_lengthT > transforms_length)
 8003f6a:	6843      	ldr	r3, [r0, #4]
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	d807      	bhi.n	8003f80 <_ZN2tf9tfMessage11deserializeEPh+0x34>
      transforms_length = transforms_lengthT;
 8003f70:	f8ca 4004 	str.w	r4, [sl, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8003f74:	f04f 0b00 	mov.w	fp, #0
      offset += sizeof(this->transforms_length);
 8003f78:	2304      	movs	r3, #4
 8003f7a:	4698      	mov	r8, r3
 8003f7c:	46a9      	mov	r9, r5
 8003f7e:	e287      	b.n	8004490 <_ZN2tf9tfMessage11deserializeEPh+0x544>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8003f80:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8003f84:	0119      	lsls	r1, r3, #4
 8003f86:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003f88:	f005 ff2e 	bl	8009de8 <realloc>
 8003f8c:	f8ca 0078 	str.w	r0, [sl, #120]	; 0x78
 8003f90:	e7ee      	b.n	8003f70 <_ZN2tf9tfMessage11deserializeEPh+0x24>
 8003f92:	2310      	movs	r3, #16
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003f94:	f101 0210 	add.w	r2, r1, #16
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d904      	bls.n	8003fa6 <_ZN2tf9tfMessage11deserializeEPh+0x5a>
          inbuffer[k-1]=inbuffer[k];
 8003f9c:	1e5a      	subs	r2, r3, #1
 8003f9e:	5cc5      	ldrb	r5, [r0, r3]
 8003fa0:	5485      	strb	r5, [r0, r2]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	e7f6      	b.n	8003f94 <_ZN2tf9tfMessage11deserializeEPh+0x48>
      inbuffer[offset+length_frame_id-1]=0;
 8003fa6:	310f      	adds	r1, #15
 8003fa8:	2300      	movs	r3, #0
 8003faa:	5443      	strb	r3, [r0, r1]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003fac:	f100 010f 	add.w	r1, r0, #15
 8003fb0:	6121      	str	r1, [r4, #16]
    var = 0;
 8003fb2:	461c      	mov	r4, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d806      	bhi.n	8003fc6 <_ZN2tf9tfMessage11deserializeEPh+0x7a>
      var |= (arr[i] << (8 * i));
 8003fb8:	18c1      	adds	r1, r0, r3
 8003fba:	5c89      	ldrb	r1, [r1, r2]
 8003fbc:	00dd      	lsls	r5, r3, #3
 8003fbe:	40a9      	lsls	r1, r5
 8003fc0:	430c      	orrs	r4, r1
    for (size_t i = 0; i < sizeof(V); i++)
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	e7f6      	b.n	8003fb4 <_ZN2tf9tfMessage11deserializeEPh+0x68>
      offset += 4;
 8003fc6:	1d15      	adds	r5, r2, #4
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003fc8:	462b      	mov	r3, r5
 8003fca:	1962      	adds	r2, r4, r5
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d904      	bls.n	8003fda <_ZN2tf9tfMessage11deserializeEPh+0x8e>
          inbuffer[k-1]=inbuffer[k];
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	5cc1      	ldrb	r1, [r0, r3]
 8003fd4:	5481      	strb	r1, [r0, r2]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	e7f7      	b.n	8003fca <_ZN2tf9tfMessage11deserializeEPh+0x7e>
      inbuffer[offset+length_child_frame_id-1]=0;
 8003fda:	1e53      	subs	r3, r2, #1
 8003fdc:	f04f 0e00 	mov.w	lr, #0
 8003fe0:	f800 e003 	strb.w	lr, [r0, r3]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8003fe4:	3d01      	subs	r5, #1
 8003fe6:	4405      	add	r5, r0
 8003fe8:	f8cc 5018 	str.w	r5, [ip, #24]
      offset += this->transform.deserialize(inbuffer + offset);
 8003fec:	1881      	adds	r1, r0, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003fee:	5c84      	ldrb	r4, [r0, r2]
 8003ff0:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ff2:	784e      	ldrb	r6, [r1, #1]
 8003ff4:	f8cd e0e4 	str.w	lr, [sp, #228]	; 0xe4
 8003ff8:	0230      	lsls	r0, r6, #8
 8003ffa:	9038      	str	r0, [sp, #224]	; 0xe0
 8003ffc:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 8004000:	4326      	orrs	r6, r4
 8004002:	432f      	orrs	r7, r5
 8004004:	4634      	mov	r4, r6
 8004006:	463d      	mov	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004008:	788e      	ldrb	r6, [r1, #2]
 800400a:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
 800400e:	0430      	lsls	r0, r6, #16
 8004010:	903a      	str	r0, [sp, #232]	; 0xe8
 8004012:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8004016:	4326      	orrs	r6, r4
 8004018:	432f      	orrs	r7, r5
 800401a:	4634      	mov	r4, r6
 800401c:	463d      	mov	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800401e:	78ce      	ldrb	r6, [r1, #3]
 8004020:	0a30      	lsrs	r0, r6, #8
 8004022:	903d      	str	r0, [sp, #244]	; 0xf4
 8004024:	0630      	lsls	r0, r6, #24
 8004026:	903c      	str	r0, [sp, #240]	; 0xf0
 8004028:	e9dd 673c 	ldrd	r6, r7, [sp, #240]	; 0xf0
 800402c:	4326      	orrs	r6, r4
 800402e:	432f      	orrs	r7, r5
 8004030:	4634      	mov	r4, r6
 8004032:	463d      	mov	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004034:	7908      	ldrb	r0, [r1, #4]
 8004036:	903f      	str	r0, [sp, #252]	; 0xfc
 8004038:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
 800403c:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8004040:	4326      	orrs	r6, r4
 8004042:	432f      	orrs	r7, r5
 8004044:	4634      	mov	r4, r6
 8004046:	463d      	mov	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004048:	794e      	ldrb	r6, [r1, #5]
 800404a:	0230      	lsls	r0, r6, #8
 800404c:	9041      	str	r0, [sp, #260]	; 0x104
 800404e:	f8cd e100 	str.w	lr, [sp, #256]	; 0x100
 8004052:	a840      	add	r0, sp, #256	; 0x100
 8004054:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004058:	4326      	orrs	r6, r4
 800405a:	432f      	orrs	r7, r5
 800405c:	4634      	mov	r4, r6
 800405e:	463d      	mov	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004060:	798e      	ldrb	r6, [r1, #6]
 8004062:	0430      	lsls	r0, r6, #16
 8004064:	9043      	str	r0, [sp, #268]	; 0x10c
 8004066:	f8cd e108 	str.w	lr, [sp, #264]	; 0x108
 800406a:	a842      	add	r0, sp, #264	; 0x108
 800406c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004070:	4326      	orrs	r6, r4
 8004072:	432f      	orrs	r7, r5
 8004074:	4634      	mov	r4, r6
 8004076:	463d      	mov	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004078:	79ce      	ldrb	r6, [r1, #7]
 800407a:	0630      	lsls	r0, r6, #24
 800407c:	9045      	str	r0, [sp, #276]	; 0x114
 800407e:	f8cd e110 	str.w	lr, [sp, #272]	; 0x110
      this->x = u_x.real;
 8004082:	a844      	add	r0, sp, #272	; 0x110
 8004084:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004088:	4326      	orrs	r6, r4
 800408a:	432f      	orrs	r7, r5
 800408c:	4634      	mov	r4, r6
 800408e:	463d      	mov	r5, r7
 8004090:	e9cc 450c 	strd	r4, r5, [ip, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004094:	7a0c      	ldrb	r4, [r1, #8]
 8004096:	2500      	movs	r5, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004098:	7a4e      	ldrb	r6, [r1, #9]
 800409a:	f8cd e11c 	str.w	lr, [sp, #284]	; 0x11c
 800409e:	0230      	lsls	r0, r6, #8
 80040a0:	9046      	str	r0, [sp, #280]	; 0x118
 80040a2:	a846      	add	r0, sp, #280	; 0x118
 80040a4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80040a8:	4326      	orrs	r6, r4
 80040aa:	432f      	orrs	r7, r5
 80040ac:	4634      	mov	r4, r6
 80040ae:	463d      	mov	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80040b0:	7a8e      	ldrb	r6, [r1, #10]
 80040b2:	f8cd e124 	str.w	lr, [sp, #292]	; 0x124
 80040b6:	0430      	lsls	r0, r6, #16
 80040b8:	9048      	str	r0, [sp, #288]	; 0x120
 80040ba:	a848      	add	r0, sp, #288	; 0x120
 80040bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80040c0:	4326      	orrs	r6, r4
 80040c2:	432f      	orrs	r7, r5
 80040c4:	4634      	mov	r4, r6
 80040c6:	463d      	mov	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80040c8:	7ace      	ldrb	r6, [r1, #11]
 80040ca:	0a30      	lsrs	r0, r6, #8
 80040cc:	904b      	str	r0, [sp, #300]	; 0x12c
 80040ce:	0630      	lsls	r0, r6, #24
 80040d0:	904a      	str	r0, [sp, #296]	; 0x128
 80040d2:	a84a      	add	r0, sp, #296	; 0x128
 80040d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80040d8:	4326      	orrs	r6, r4
 80040da:	432f      	orrs	r7, r5
 80040dc:	4634      	mov	r4, r6
 80040de:	463d      	mov	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80040e0:	7b08      	ldrb	r0, [r1, #12]
 80040e2:	904d      	str	r0, [sp, #308]	; 0x134
 80040e4:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
 80040e8:	a84c      	add	r0, sp, #304	; 0x130
 80040ea:	e9d0 6700 	ldrd	r6, r7, [r0]
 80040ee:	4326      	orrs	r6, r4
 80040f0:	432f      	orrs	r7, r5
 80040f2:	4634      	mov	r4, r6
 80040f4:	463d      	mov	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80040f6:	7b4e      	ldrb	r6, [r1, #13]
 80040f8:	0230      	lsls	r0, r6, #8
 80040fa:	904f      	str	r0, [sp, #316]	; 0x13c
 80040fc:	f8cd e138 	str.w	lr, [sp, #312]	; 0x138
 8004100:	a84e      	add	r0, sp, #312	; 0x138
 8004102:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004106:	4326      	orrs	r6, r4
 8004108:	432f      	orrs	r7, r5
 800410a:	4634      	mov	r4, r6
 800410c:	463d      	mov	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800410e:	7b8e      	ldrb	r6, [r1, #14]
 8004110:	0430      	lsls	r0, r6, #16
 8004112:	9051      	str	r0, [sp, #324]	; 0x144
 8004114:	f8cd e140 	str.w	lr, [sp, #320]	; 0x140
 8004118:	a850      	add	r0, sp, #320	; 0x140
 800411a:	e9d0 6700 	ldrd	r6, r7, [r0]
 800411e:	4326      	orrs	r6, r4
 8004120:	432f      	orrs	r7, r5
 8004122:	4634      	mov	r4, r6
 8004124:	463d      	mov	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004126:	7bce      	ldrb	r6, [r1, #15]
 8004128:	0630      	lsls	r0, r6, #24
 800412a:	9053      	str	r0, [sp, #332]	; 0x14c
 800412c:	f8cd e148 	str.w	lr, [sp, #328]	; 0x148
      this->y = u_y.real;
 8004130:	a852      	add	r0, sp, #328	; 0x148
 8004132:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004136:	4326      	orrs	r6, r4
 8004138:	432f      	orrs	r7, r5
 800413a:	4634      	mov	r4, r6
 800413c:	463d      	mov	r5, r7
 800413e:	e9cc 450e 	strd	r4, r5, [ip, #56]	; 0x38
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004142:	7c0c      	ldrb	r4, [r1, #16]
 8004144:	2500      	movs	r5, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004146:	7c4e      	ldrb	r6, [r1, #17]
 8004148:	f8cd e154 	str.w	lr, [sp, #340]	; 0x154
 800414c:	0230      	lsls	r0, r6, #8
 800414e:	9054      	str	r0, [sp, #336]	; 0x150
 8004150:	a854      	add	r0, sp, #336	; 0x150
 8004152:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004156:	4326      	orrs	r6, r4
 8004158:	432f      	orrs	r7, r5
 800415a:	4634      	mov	r4, r6
 800415c:	463d      	mov	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800415e:	7c8e      	ldrb	r6, [r1, #18]
 8004160:	f8cd e15c 	str.w	lr, [sp, #348]	; 0x15c
 8004164:	0430      	lsls	r0, r6, #16
 8004166:	9056      	str	r0, [sp, #344]	; 0x158
 8004168:	a856      	add	r0, sp, #344	; 0x158
 800416a:	e9d0 6700 	ldrd	r6, r7, [r0]
 800416e:	4326      	orrs	r6, r4
 8004170:	432f      	orrs	r7, r5
 8004172:	4634      	mov	r4, r6
 8004174:	463d      	mov	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004176:	7cce      	ldrb	r6, [r1, #19]
 8004178:	0a30      	lsrs	r0, r6, #8
 800417a:	9059      	str	r0, [sp, #356]	; 0x164
 800417c:	0630      	lsls	r0, r6, #24
 800417e:	9058      	str	r0, [sp, #352]	; 0x160
 8004180:	a858      	add	r0, sp, #352	; 0x160
 8004182:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004186:	4326      	orrs	r6, r4
 8004188:	432f      	orrs	r7, r5
 800418a:	4634      	mov	r4, r6
 800418c:	463d      	mov	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800418e:	7d08      	ldrb	r0, [r1, #20]
 8004190:	905b      	str	r0, [sp, #364]	; 0x16c
 8004192:	f8cd e168 	str.w	lr, [sp, #360]	; 0x168
 8004196:	a85a      	add	r0, sp, #360	; 0x168
 8004198:	e9d0 6700 	ldrd	r6, r7, [r0]
 800419c:	4326      	orrs	r6, r4
 800419e:	432f      	orrs	r7, r5
 80041a0:	4634      	mov	r4, r6
 80041a2:	463d      	mov	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80041a4:	7d4e      	ldrb	r6, [r1, #21]
 80041a6:	0230      	lsls	r0, r6, #8
 80041a8:	905d      	str	r0, [sp, #372]	; 0x174
 80041aa:	f8cd e170 	str.w	lr, [sp, #368]	; 0x170
 80041ae:	a85c      	add	r0, sp, #368	; 0x170
 80041b0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80041b4:	4326      	orrs	r6, r4
 80041b6:	432f      	orrs	r7, r5
 80041b8:	4634      	mov	r4, r6
 80041ba:	463d      	mov	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80041bc:	7d8e      	ldrb	r6, [r1, #22]
 80041be:	0430      	lsls	r0, r6, #16
 80041c0:	905f      	str	r0, [sp, #380]	; 0x17c
 80041c2:	f8cd e178 	str.w	lr, [sp, #376]	; 0x178
 80041c6:	a85e      	add	r0, sp, #376	; 0x178
 80041c8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80041cc:	4326      	orrs	r6, r4
 80041ce:	432f      	orrs	r7, r5
 80041d0:	4634      	mov	r4, r6
 80041d2:	463d      	mov	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80041d4:	7dce      	ldrb	r6, [r1, #23]
 80041d6:	0630      	lsls	r0, r6, #24
 80041d8:	9061      	str	r0, [sp, #388]	; 0x184
 80041da:	f8cd e180 	str.w	lr, [sp, #384]	; 0x180
      this->z = u_z.real;
 80041de:	a860      	add	r0, sp, #384	; 0x180
 80041e0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80041e4:	4326      	orrs	r6, r4
 80041e6:	432f      	orrs	r7, r5
 80041e8:	4634      	mov	r4, r6
 80041ea:	463d      	mov	r5, r7
 80041ec:	e9cc 4510 	strd	r4, r5, [ip, #64]	; 0x40
      offset += this->rotation.deserialize(inbuffer + offset);
 80041f0:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80041f4:	7e08      	ldrb	r0, [r1, #24]
 80041f6:	2100      	movs	r1, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041f8:	785e      	ldrb	r6, [r3, #1]
 80041fa:	f8cd e004 	str.w	lr, [sp, #4]
 80041fe:	0235      	lsls	r5, r6, #8
 8004200:	9500      	str	r5, [sp, #0]
 8004202:	e89d 0060 	ldmia.w	sp, {r5, r6}
 8004206:	4305      	orrs	r5, r0
 8004208:	430e      	orrs	r6, r1
 800420a:	4628      	mov	r0, r5
 800420c:	4631      	mov	r1, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800420e:	789e      	ldrb	r6, [r3, #2]
 8004210:	f8cd e00c 	str.w	lr, [sp, #12]
 8004214:	0435      	lsls	r5, r6, #16
 8004216:	9502      	str	r5, [sp, #8]
 8004218:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 800421c:	4305      	orrs	r5, r0
 800421e:	430e      	orrs	r6, r1
 8004220:	4628      	mov	r0, r5
 8004222:	4631      	mov	r1, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004224:	78de      	ldrb	r6, [r3, #3]
 8004226:	0a35      	lsrs	r5, r6, #8
 8004228:	9505      	str	r5, [sp, #20]
 800422a:	0635      	lsls	r5, r6, #24
 800422c:	9504      	str	r5, [sp, #16]
 800422e:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8004232:	4305      	orrs	r5, r0
 8004234:	430e      	orrs	r6, r1
 8004236:	4628      	mov	r0, r5
 8004238:	4631      	mov	r1, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800423a:	791d      	ldrb	r5, [r3, #4]
 800423c:	9507      	str	r5, [sp, #28]
 800423e:	f8cd e018 	str.w	lr, [sp, #24]
 8004242:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 8004246:	4305      	orrs	r5, r0
 8004248:	430e      	orrs	r6, r1
 800424a:	4628      	mov	r0, r5
 800424c:	4631      	mov	r1, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800424e:	795e      	ldrb	r6, [r3, #5]
 8004250:	0235      	lsls	r5, r6, #8
 8004252:	9509      	str	r5, [sp, #36]	; 0x24
 8004254:	f8cd e020 	str.w	lr, [sp, #32]
 8004258:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 800425c:	4305      	orrs	r5, r0
 800425e:	430e      	orrs	r6, r1
 8004260:	4628      	mov	r0, r5
 8004262:	4631      	mov	r1, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004264:	799e      	ldrb	r6, [r3, #6]
 8004266:	0435      	lsls	r5, r6, #16
 8004268:	950b      	str	r5, [sp, #44]	; 0x2c
 800426a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800426e:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8004272:	4305      	orrs	r5, r0
 8004274:	430e      	orrs	r6, r1
 8004276:	4628      	mov	r0, r5
 8004278:	4631      	mov	r1, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800427a:	79de      	ldrb	r6, [r3, #7]
 800427c:	0635      	lsls	r5, r6, #24
 800427e:	950d      	str	r5, [sp, #52]	; 0x34
 8004280:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
      this->x = u_x.real;
 8004284:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8004288:	4305      	orrs	r5, r0
 800428a:	430e      	orrs	r6, r1
 800428c:	4628      	mov	r0, r5
 800428e:	4631      	mov	r1, r6
 8004290:	e9cc 0114 	strd	r0, r1, [ip, #80]	; 0x50
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004294:	7a18      	ldrb	r0, [r3, #8]
 8004296:	2100      	movs	r1, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004298:	7a5e      	ldrb	r6, [r3, #9]
 800429a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800429e:	0235      	lsls	r5, r6, #8
 80042a0:	950e      	str	r5, [sp, #56]	; 0x38
 80042a2:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 80042a6:	4305      	orrs	r5, r0
 80042a8:	430e      	orrs	r6, r1
 80042aa:	4628      	mov	r0, r5
 80042ac:	4631      	mov	r1, r6
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80042ae:	7a9e      	ldrb	r6, [r3, #10]
 80042b0:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 80042b4:	0435      	lsls	r5, r6, #16
 80042b6:	9510      	str	r5, [sp, #64]	; 0x40
 80042b8:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
 80042bc:	4305      	orrs	r5, r0
 80042be:	430e      	orrs	r6, r1
 80042c0:	4628      	mov	r0, r5
 80042c2:	4631      	mov	r1, r6
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042c4:	7ade      	ldrb	r6, [r3, #11]
 80042c6:	0a35      	lsrs	r5, r6, #8
 80042c8:	9513      	str	r5, [sp, #76]	; 0x4c
 80042ca:	0635      	lsls	r5, r6, #24
 80042cc:	9512      	str	r5, [sp, #72]	; 0x48
 80042ce:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	; 0x48
 80042d2:	4305      	orrs	r5, r0
 80042d4:	430e      	orrs	r6, r1
 80042d6:	4628      	mov	r0, r5
 80042d8:	4631      	mov	r1, r6
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80042da:	7b1d      	ldrb	r5, [r3, #12]
 80042dc:	9515      	str	r5, [sp, #84]	; 0x54
 80042de:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 80042e2:	e9dd 5614 	ldrd	r5, r6, [sp, #80]	; 0x50
 80042e6:	4305      	orrs	r5, r0
 80042e8:	430e      	orrs	r6, r1
 80042ea:	4628      	mov	r0, r5
 80042ec:	4631      	mov	r1, r6
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80042ee:	7b5e      	ldrb	r6, [r3, #13]
 80042f0:	0235      	lsls	r5, r6, #8
 80042f2:	9517      	str	r5, [sp, #92]	; 0x5c
 80042f4:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80042f8:	e9dd 5616 	ldrd	r5, r6, [sp, #88]	; 0x58
 80042fc:	4305      	orrs	r5, r0
 80042fe:	430e      	orrs	r6, r1
 8004300:	4628      	mov	r0, r5
 8004302:	4631      	mov	r1, r6
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004304:	7b9e      	ldrb	r6, [r3, #14]
 8004306:	0435      	lsls	r5, r6, #16
 8004308:	9519      	str	r5, [sp, #100]	; 0x64
 800430a:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800430e:	e9dd 5618 	ldrd	r5, r6, [sp, #96]	; 0x60
 8004312:	4305      	orrs	r5, r0
 8004314:	430e      	orrs	r6, r1
 8004316:	4628      	mov	r0, r5
 8004318:	4631      	mov	r1, r6
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800431a:	7bde      	ldrb	r6, [r3, #15]
 800431c:	0635      	lsls	r5, r6, #24
 800431e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004320:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
      this->y = u_y.real;
 8004324:	e9dd 561a 	ldrd	r5, r6, [sp, #104]	; 0x68
 8004328:	4305      	orrs	r5, r0
 800432a:	430e      	orrs	r6, r1
 800432c:	4628      	mov	r0, r5
 800432e:	4631      	mov	r1, r6
 8004330:	e9cc 0116 	strd	r0, r1, [ip, #88]	; 0x58
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004334:	7c18      	ldrb	r0, [r3, #16]
 8004336:	2100      	movs	r1, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004338:	7c5e      	ldrb	r6, [r3, #17]
 800433a:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 800433e:	0235      	lsls	r5, r6, #8
 8004340:	951c      	str	r5, [sp, #112]	; 0x70
 8004342:	e9dd 561c 	ldrd	r5, r6, [sp, #112]	; 0x70
 8004346:	4305      	orrs	r5, r0
 8004348:	430e      	orrs	r6, r1
 800434a:	4628      	mov	r0, r5
 800434c:	4631      	mov	r1, r6
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800434e:	7c9e      	ldrb	r6, [r3, #18]
 8004350:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8004354:	0435      	lsls	r5, r6, #16
 8004356:	951e      	str	r5, [sp, #120]	; 0x78
 8004358:	e9dd 561e 	ldrd	r5, r6, [sp, #120]	; 0x78
 800435c:	4305      	orrs	r5, r0
 800435e:	430e      	orrs	r6, r1
 8004360:	4628      	mov	r0, r5
 8004362:	4631      	mov	r1, r6
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004364:	7cde      	ldrb	r6, [r3, #19]
 8004366:	0a35      	lsrs	r5, r6, #8
 8004368:	9521      	str	r5, [sp, #132]	; 0x84
 800436a:	0635      	lsls	r5, r6, #24
 800436c:	9520      	str	r5, [sp, #128]	; 0x80
 800436e:	e9dd 5620 	ldrd	r5, r6, [sp, #128]	; 0x80
 8004372:	4305      	orrs	r5, r0
 8004374:	430e      	orrs	r6, r1
 8004376:	4628      	mov	r0, r5
 8004378:	4631      	mov	r1, r6
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800437a:	7d1d      	ldrb	r5, [r3, #20]
 800437c:	9523      	str	r5, [sp, #140]	; 0x8c
 800437e:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 8004382:	e9dd 5622 	ldrd	r5, r6, [sp, #136]	; 0x88
 8004386:	4305      	orrs	r5, r0
 8004388:	430e      	orrs	r6, r1
 800438a:	4628      	mov	r0, r5
 800438c:	4631      	mov	r1, r6
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800438e:	7d5e      	ldrb	r6, [r3, #21]
 8004390:	0235      	lsls	r5, r6, #8
 8004392:	9525      	str	r5, [sp, #148]	; 0x94
 8004394:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
 8004398:	e9dd 5624 	ldrd	r5, r6, [sp, #144]	; 0x90
 800439c:	4305      	orrs	r5, r0
 800439e:	430e      	orrs	r6, r1
 80043a0:	4628      	mov	r0, r5
 80043a2:	4631      	mov	r1, r6
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80043a4:	7d9e      	ldrb	r6, [r3, #22]
 80043a6:	0435      	lsls	r5, r6, #16
 80043a8:	9527      	str	r5, [sp, #156]	; 0x9c
 80043aa:	f8cd e098 	str.w	lr, [sp, #152]	; 0x98
 80043ae:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
 80043b2:	4305      	orrs	r5, r0
 80043b4:	430e      	orrs	r6, r1
 80043b6:	4628      	mov	r0, r5
 80043b8:	4631      	mov	r1, r6
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80043ba:	7dde      	ldrb	r6, [r3, #23]
 80043bc:	0635      	lsls	r5, r6, #24
 80043be:	9529      	str	r5, [sp, #164]	; 0xa4
 80043c0:	f8cd e0a0 	str.w	lr, [sp, #160]	; 0xa0
      this->z = u_z.real;
 80043c4:	e9dd 5628 	ldrd	r5, r6, [sp, #160]	; 0xa0
 80043c8:	4305      	orrs	r5, r0
 80043ca:	430e      	orrs	r6, r1
 80043cc:	4628      	mov	r0, r5
 80043ce:	4631      	mov	r1, r6
 80043d0:	e9cc 0118 	strd	r0, r1, [ip, #96]	; 0x60
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80043d4:	7e18      	ldrb	r0, [r3, #24]
 80043d6:	2100      	movs	r1, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043d8:	7e5e      	ldrb	r6, [r3, #25]
 80043da:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 80043de:	0235      	lsls	r5, r6, #8
 80043e0:	952a      	str	r5, [sp, #168]	; 0xa8
 80043e2:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
 80043e6:	4305      	orrs	r5, r0
 80043e8:	430e      	orrs	r6, r1
 80043ea:	4628      	mov	r0, r5
 80043ec:	4631      	mov	r1, r6
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043ee:	7e9e      	ldrb	r6, [r3, #26]
 80043f0:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
 80043f4:	0435      	lsls	r5, r6, #16
 80043f6:	952c      	str	r5, [sp, #176]	; 0xb0
 80043f8:	e9dd 562c 	ldrd	r5, r6, [sp, #176]	; 0xb0
 80043fc:	4305      	orrs	r5, r0
 80043fe:	430e      	orrs	r6, r1
 8004400:	4628      	mov	r0, r5
 8004402:	4631      	mov	r1, r6
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004404:	7ede      	ldrb	r6, [r3, #27]
 8004406:	0a35      	lsrs	r5, r6, #8
 8004408:	952f      	str	r5, [sp, #188]	; 0xbc
 800440a:	0635      	lsls	r5, r6, #24
 800440c:	952e      	str	r5, [sp, #184]	; 0xb8
 800440e:	e9dd 562e 	ldrd	r5, r6, [sp, #184]	; 0xb8
 8004412:	4305      	orrs	r5, r0
 8004414:	430e      	orrs	r6, r1
 8004416:	4628      	mov	r0, r5
 8004418:	4631      	mov	r1, r6
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800441a:	7f1d      	ldrb	r5, [r3, #28]
 800441c:	9531      	str	r5, [sp, #196]	; 0xc4
 800441e:	f8cd e0c0 	str.w	lr, [sp, #192]	; 0xc0
 8004422:	e9dd 5630 	ldrd	r5, r6, [sp, #192]	; 0xc0
 8004426:	4305      	orrs	r5, r0
 8004428:	430e      	orrs	r6, r1
 800442a:	4628      	mov	r0, r5
 800442c:	4631      	mov	r1, r6
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800442e:	7f5e      	ldrb	r6, [r3, #29]
 8004430:	0235      	lsls	r5, r6, #8
 8004432:	9533      	str	r5, [sp, #204]	; 0xcc
 8004434:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
 8004438:	e9dd 5632 	ldrd	r5, r6, [sp, #200]	; 0xc8
 800443c:	4305      	orrs	r5, r0
 800443e:	430e      	orrs	r6, r1
 8004440:	4628      	mov	r0, r5
 8004442:	4631      	mov	r1, r6
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004444:	7f9e      	ldrb	r6, [r3, #30]
 8004446:	0435      	lsls	r5, r6, #16
 8004448:	9535      	str	r5, [sp, #212]	; 0xd4
 800444a:	f8cd e0d0 	str.w	lr, [sp, #208]	; 0xd0
 800444e:	e9dd 5634 	ldrd	r5, r6, [sp, #208]	; 0xd0
 8004452:	4305      	orrs	r5, r0
 8004454:	430e      	orrs	r6, r1
 8004456:	4628      	mov	r0, r5
 8004458:	4631      	mov	r1, r6
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800445a:	7fde      	ldrb	r6, [r3, #31]
 800445c:	0633      	lsls	r3, r6, #24
 800445e:	9337      	str	r3, [sp, #220]	; 0xdc
 8004460:	f8cd e0d8 	str.w	lr, [sp, #216]	; 0xd8
      this->w = u_w.real;
 8004464:	e9dd 5636 	ldrd	r5, r6, [sp, #216]	; 0xd8
 8004468:	4305      	orrs	r5, r0
 800446a:	430e      	orrs	r6, r1
 800446c:	4628      	mov	r0, r5
 800446e:	4631      	mov	r1, r6
 8004470:	e9cc 011a 	strd	r0, r1, [ip, #104]	; 0x68
 8004474:	3238      	adds	r2, #56	; 0x38
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8004476:	4490      	add	r8, r2
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8004478:	f8da 3078 	ldr.w	r3, [sl, #120]	; 0x78
 800447c:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 8004480:	0110      	lsls	r0, r2, #4
 8004482:	2270      	movs	r2, #112	; 0x70
 8004484:	4661      	mov	r1, ip
 8004486:	4418      	add	r0, r3
 8004488:	f005 fc8e 	bl	8009da8 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 800448c:	f10b 0b01 	add.w	fp, fp, #1
 8004490:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004494:	459b      	cmp	fp, r3
 8004496:	d23c      	bcs.n	8004512 <_ZN2tf9tfMessage11deserializeEPh+0x5c6>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8004498:	f10a 0c08 	add.w	ip, sl, #8
 800449c:	eb09 0008 	add.w	r0, r9, r8
      offset += this->header.deserialize(inbuffer + offset);
 80044a0:	f10a 040c 	add.w	r4, sl, #12
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80044a4:	f819 3008 	ldrb.w	r3, [r9, r8]
 80044a8:	6063      	str	r3, [r4, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80044aa:	7842      	ldrb	r2, [r0, #1]
 80044ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044b0:	6063      	str	r3, [r4, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044b2:	7882      	ldrb	r2, [r0, #2]
 80044b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044b8:	6063      	str	r3, [r4, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044ba:	78c2      	ldrb	r2, [r0, #3]
 80044bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044c0:	6063      	str	r3, [r4, #4]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80044c2:	7903      	ldrb	r3, [r0, #4]
 80044c4:	60a3      	str	r3, [r4, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80044c6:	7942      	ldrb	r2, [r0, #5]
 80044c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044cc:	60a3      	str	r3, [r4, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044ce:	7982      	ldrb	r2, [r0, #6]
 80044d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044d4:	60a3      	str	r3, [r4, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044d6:	79c2      	ldrb	r2, [r0, #7]
 80044d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044dc:	60a3      	str	r3, [r4, #8]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80044de:	7a03      	ldrb	r3, [r0, #8]
 80044e0:	60e3      	str	r3, [r4, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80044e2:	7a42      	ldrb	r2, [r0, #9]
 80044e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044e8:	60e3      	str	r3, [r4, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044ea:	7a82      	ldrb	r2, [r0, #10]
 80044ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044f0:	60e3      	str	r3, [r4, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044f2:	7ac2      	ldrb	r2, [r0, #11]
 80044f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044f8:	60e3      	str	r3, [r4, #12]
    var = 0;
 80044fa:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80044fc:	460d      	mov	r5, r1
 80044fe:	2d03      	cmp	r5, #3
 8004500:	f63f ad47 	bhi.w	8003f92 <_ZN2tf9tfMessage11deserializeEPh+0x46>
      var |= (arr[i] << (8 * i));
 8004504:	1943      	adds	r3, r0, r5
 8004506:	7b1b      	ldrb	r3, [r3, #12]
 8004508:	00ea      	lsls	r2, r5, #3
 800450a:	4093      	lsls	r3, r2
 800450c:	4319      	orrs	r1, r3
    for (size_t i = 0; i < sizeof(V); i++)
 800450e:	3501      	adds	r5, #1
 8004510:	e7f5      	b.n	80044fe <_ZN2tf9tfMessage11deserializeEPh+0x5b2>
 8004512:	4640      	mov	r0, r8
    }
 8004514:	b063      	add	sp, #396	; 0x18c
 8004516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800451a <_ZNK13geometry_msgs4Pose9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800451a:	b430      	push	{r4, r5}
 800451c:	6902      	ldr	r2, [r0, #16]
 800451e:	6943      	ldr	r3, [r0, #20]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004520:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004522:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004526:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004528:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800452c:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800452e:	0e12      	lsrs	r2, r2, #24
 8004530:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004532:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004534:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004538:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800453a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800453e:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004540:	0e1b      	lsrs	r3, r3, #24
 8004542:	71cb      	strb	r3, [r1, #7]
 8004544:	6982      	ldr	r2, [r0, #24]
 8004546:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004548:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800454a:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800454e:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004550:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004554:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004556:	0e12      	lsrs	r2, r2, #24
 8004558:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800455a:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800455c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004560:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004562:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004566:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004568:	0e1b      	lsrs	r3, r3, #24
 800456a:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 800456c:	6a02      	ldr	r2, [r0, #32]
 800456e:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004570:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004572:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004576:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004578:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800457c:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800457e:	0e12      	lsrs	r2, r2, #24
 8004580:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004582:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004584:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004588:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800458a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800458e:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004590:	0e1b      	lsrs	r3, r3, #24
 8004592:	75cb      	strb	r3, [r1, #23]
      offset += this->orientation.serialize(outbuffer + offset);
 8004594:	f101 0318 	add.w	r3, r1, #24
 8004598:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800459a:	6b42      	ldr	r2, [r0, #52]	; 0x34
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800459c:	760c      	strb	r4, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800459e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80045a2:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80045a4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80045a8:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80045aa:	0e24      	lsrs	r4, r4, #24
 80045ac:	70dc      	strb	r4, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80045ae:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80045b0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80045b4:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80045b6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80045ba:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80045bc:	0e12      	lsrs	r2, r2, #24
 80045be:	71da      	strb	r2, [r3, #7]
 80045c0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80045c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80045c4:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80045c6:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80045ca:	725c      	strb	r4, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80045cc:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80045d0:	729c      	strb	r4, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80045d2:	0e09      	lsrs	r1, r1, #24
 80045d4:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80045d6:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80045d8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80045dc:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80045de:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80045e2:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80045e4:	0e12      	lsrs	r2, r2, #24
 80045e6:	73da      	strb	r2, [r3, #15]
 80045e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80045ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80045ec:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80045ee:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80045f2:	745c      	strb	r4, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80045f4:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80045f8:	749c      	strb	r4, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80045fa:	0e09      	lsrs	r1, r1, #24
 80045fc:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80045fe:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004600:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004604:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004606:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800460a:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800460c:	0e12      	lsrs	r2, r2, #24
 800460e:	75da      	strb	r2, [r3, #23]
      u_w.real = this->w;
 8004610:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004612:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004614:	7619      	strb	r1, [r3, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004616:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800461a:	7658      	strb	r0, [r3, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 800461c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004620:	7698      	strb	r0, [r3, #26]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004622:	0e09      	lsrs	r1, r1, #24
 8004624:	76d9      	strb	r1, [r3, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004626:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004628:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800462c:	7759      	strb	r1, [r3, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 800462e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004632:	7799      	strb	r1, [r3, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004634:	0e12      	lsrs	r2, r2, #24
 8004636:	77da      	strb	r2, [r3, #31]
    }
 8004638:	2038      	movs	r0, #56	; 0x38
 800463a:	bc30      	pop	{r4, r5}
 800463c:	4770      	bx	lr

0800463e <_ZNK13geometry_msgs9Transform9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800463e:	b430      	push	{r4, r5}
 8004640:	6902      	ldr	r2, [r0, #16]
 8004642:	6943      	ldr	r3, [r0, #20]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004644:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004646:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800464a:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800464c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004650:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004652:	0e12      	lsrs	r2, r2, #24
 8004654:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004656:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004658:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800465c:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800465e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004662:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004664:	0e1b      	lsrs	r3, r3, #24
 8004666:	71cb      	strb	r3, [r1, #7]
 8004668:	6982      	ldr	r2, [r0, #24]
 800466a:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800466c:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800466e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004672:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004674:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004678:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800467a:	0e12      	lsrs	r2, r2, #24
 800467c:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800467e:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004680:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004684:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004686:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800468a:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 8004690:	6a02      	ldr	r2, [r0, #32]
 8004692:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004694:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004696:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800469a:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800469c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80046a0:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80046a2:	0e12      	lsrs	r2, r2, #24
 80046a4:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80046a6:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80046a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80046ac:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80046ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80046b2:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80046b4:	0e1b      	lsrs	r3, r3, #24
 80046b6:	75cb      	strb	r3, [r1, #23]
      offset += this->rotation.serialize(outbuffer + offset);
 80046b8:	f101 0318 	add.w	r3, r1, #24
 80046bc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80046be:	6b42      	ldr	r2, [r0, #52]	; 0x34
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80046c0:	760c      	strb	r4, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80046c2:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80046c6:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80046c8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80046cc:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80046ce:	0e24      	lsrs	r4, r4, #24
 80046d0:	70dc      	strb	r4, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80046d2:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80046d4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80046d8:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80046da:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80046de:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80046e0:	0e12      	lsrs	r2, r2, #24
 80046e2:	71da      	strb	r2, [r3, #7]
 80046e4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80046e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80046e8:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80046ea:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80046ee:	725c      	strb	r4, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80046f0:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80046f4:	729c      	strb	r4, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80046f6:	0e09      	lsrs	r1, r1, #24
 80046f8:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80046fa:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80046fc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004700:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004702:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004706:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004708:	0e12      	lsrs	r2, r2, #24
 800470a:	73da      	strb	r2, [r3, #15]
 800470c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800470e:	6c42      	ldr	r2, [r0, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004710:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004712:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004716:	745c      	strb	r4, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004718:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800471c:	749c      	strb	r4, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800471e:	0e09      	lsrs	r1, r1, #24
 8004720:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004722:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004724:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004728:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800472a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800472e:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004730:	0e12      	lsrs	r2, r2, #24
 8004732:	75da      	strb	r2, [r3, #23]
      u_w.real = this->w;
 8004734:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004736:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004738:	7619      	strb	r1, [r3, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 800473a:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800473e:	7658      	strb	r0, [r3, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004740:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004744:	7698      	strb	r0, [r3, #26]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004746:	0e09      	lsrs	r1, r1, #24
 8004748:	76d9      	strb	r1, [r3, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 800474a:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 800474c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004750:	7759      	strb	r1, [r3, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004752:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004756:	7799      	strb	r1, [r3, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004758:	0e12      	lsrs	r2, r2, #24
 800475a:	77da      	strb	r2, [r3, #31]
    }
 800475c:	2038      	movs	r0, #56	; 0x38
 800475e:	bc30      	pop	{r4, r5}
 8004760:	4770      	bx	lr

08004762 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8004762:	b4f0      	push	{r4, r5, r6, r7}
 8004764:	6982      	ldr	r2, [r0, #24]
 8004766:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004768:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800476a:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800476e:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004770:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004774:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004776:	0e12      	lsrs	r2, r2, #24
 8004778:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800477a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800477c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004780:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004782:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004786:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	71cb      	strb	r3, [r1, #7]
 800478c:	6a02      	ldr	r2, [r0, #32]
 800478e:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004790:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004792:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004796:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004798:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800479c:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800479e:	0e12      	lsrs	r2, r2, #24
 80047a0:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80047a2:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80047a4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047a8:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80047aa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80047ae:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80047b0:	0e1b      	lsrs	r3, r3, #24
 80047b2:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 80047b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80047b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80047b8:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80047ba:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80047be:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80047c0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80047c4:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80047c6:	0e12      	lsrs	r2, r2, #24
 80047c8:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80047ca:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80047cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047d0:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80047d2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80047d6:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80047d8:	0e1b      	lsrs	r3, r3, #24
 80047da:	75cb      	strb	r3, [r1, #23]
      offset += this->angular.serialize(outbuffer + offset);
 80047dc:	f101 0318 	add.w	r3, r1, #24
 80047e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80047e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80047e4:	760c      	strb	r4, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80047e6:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80047ea:	705e      	strb	r6, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80047ec:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80047f0:	709e      	strb	r6, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80047f2:	0e24      	lsrs	r4, r4, #24
 80047f4:	70dc      	strb	r4, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80047f6:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80047f8:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80047fc:	715c      	strb	r4, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80047fe:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004802:	719c      	strb	r4, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004804:	0e12      	lsrs	r2, r2, #24
 8004806:	71da      	strb	r2, [r3, #7]
 8004808:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800480a:	6c42      	ldr	r2, [r0, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800480c:	721c      	strb	r4, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800480e:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8004812:	725e      	strb	r6, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004814:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8004818:	729e      	strb	r6, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800481a:	0e24      	lsrs	r4, r4, #24
 800481c:	72dc      	strb	r4, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800481e:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004820:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004824:	735c      	strb	r4, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004826:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800482a:	739c      	strb	r4, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800482c:	0e12      	lsrs	r2, r2, #24
 800482e:	73da      	strb	r2, [r3, #15]
      u_z.real = this->z;
 8004830:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004832:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004834:	741c      	strb	r4, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004836:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800483a:	745d      	strb	r5, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800483c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004840:	749d      	strb	r5, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004842:	0e24      	lsrs	r4, r4, #24
 8004844:	74dc      	strb	r4, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004846:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004848:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800484c:	755c      	strb	r4, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800484e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004852:	759c      	strb	r4, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004854:	0e12      	lsrs	r2, r2, #24
 8004856:	75da      	strb	r2, [r3, #23]
      for( uint32_t i = 0; i < 36; i++){
 8004858:	2500      	movs	r5, #0
      offset += this->twist.serialize(outbuffer + offset);
 800485a:	2330      	movs	r3, #48	; 0x30
      for( uint32_t i = 0; i < 36; i++){
 800485c:	2d23      	cmp	r5, #35	; 0x23
 800485e:	d821      	bhi.n	80048a4 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x142>
      u_covariancei.real = this->covariance[i];
 8004860:	f105 020a 	add.w	r2, r5, #10
 8004864:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004868:	6814      	ldr	r4, [r2, #0]
 800486a:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 800486c:	54cc      	strb	r4, [r1, r3]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800486e:	1c5e      	adds	r6, r3, #1
 8004870:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8004874:	558f      	strb	r7, [r1, r6]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004876:	1c9e      	adds	r6, r3, #2
 8004878:	f3c4 4707 	ubfx	r7, r4, #16, #8
 800487c:	558f      	strb	r7, [r1, r6]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800487e:	1cde      	adds	r6, r3, #3
 8004880:	0e24      	lsrs	r4, r4, #24
 8004882:	558c      	strb	r4, [r1, r6]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004884:	1d1c      	adds	r4, r3, #4
 8004886:	550a      	strb	r2, [r1, r4]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004888:	1d5c      	adds	r4, r3, #5
 800488a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800488e:	550e      	strb	r6, [r1, r4]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8004890:	1d9c      	adds	r4, r3, #6
 8004892:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8004896:	550e      	strb	r6, [r1, r4]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8004898:	1ddc      	adds	r4, r3, #7
 800489a:	0e12      	lsrs	r2, r2, #24
 800489c:	550a      	strb	r2, [r1, r4]
      offset += sizeof(this->covariance[i]);
 800489e:	3308      	adds	r3, #8
      for( uint32_t i = 0; i < 36; i++){
 80048a0:	3501      	adds	r5, #1
 80048a2:	e7db      	b.n	800485c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0xfa>
    }
 80048a4:	4618      	mov	r0, r3
 80048a6:	bcf0      	pop	{r4, r5, r6, r7}
 80048a8:	4770      	bx	lr

080048aa <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80048aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ac:	4606      	mov	r6, r0
 80048ae:	460c      	mov	r4, r1
      offset += this->header.serialize(outbuffer + offset);
 80048b0:	1d07      	adds	r7, r0, #4
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80048b2:	793b      	ldrb	r3, [r7, #4]
 80048b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80048b6:	797b      	ldrb	r3, [r7, #5]
 80048b8:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80048ba:	79bb      	ldrb	r3, [r7, #6]
 80048bc:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80048c2:	7a3b      	ldrb	r3, [r7, #8]
 80048c4:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80048c6:	7a7b      	ldrb	r3, [r7, #9]
 80048c8:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80048ca:	7abb      	ldrb	r3, [r7, #10]
 80048cc:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80048d2:	7b3b      	ldrb	r3, [r7, #12]
 80048d4:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80048d6:	7b7b      	ldrb	r3, [r7, #13]
 80048d8:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
 80048e2:	6938      	ldr	r0, [r7, #16]
 80048e4:	f7fb fc3e 	bl	8000164 <strlen>
 80048e8:	4605      	mov	r5, r0
    for (size_t i = 0; i < sizeof(V); i++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d807      	bhi.n	8004900 <_ZNK13geometry_msgs16TransformStamped9serializeEPh+0x56>
      arr[i] = (var >> (8 * i));
 80048f0:	f103 010c 	add.w	r1, r3, #12
 80048f4:	00da      	lsls	r2, r3, #3
 80048f6:	fa25 f202 	lsr.w	r2, r5, r2
 80048fa:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 80048fc:	3301      	adds	r3, #1
 80048fe:	e7f5      	b.n	80048ec <_ZNK13geometry_msgs16TransformStamped9serializeEPh+0x42>
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004900:	462a      	mov	r2, r5
 8004902:	6939      	ldr	r1, [r7, #16]
 8004904:	f104 0010 	add.w	r0, r4, #16
 8004908:	f005 fa4e 	bl	8009da8 <memcpy>
      offset += length_frame_id;
 800490c:	3510      	adds	r5, #16
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800490e:	69b0      	ldr	r0, [r6, #24]
 8004910:	f7fb fc28 	bl	8000164 <strlen>
 8004914:	4607      	mov	r7, r0
 8004916:	2300      	movs	r3, #0
 8004918:	2b03      	cmp	r3, #3
 800491a:	d806      	bhi.n	800492a <_ZNK13geometry_msgs16TransformStamped9serializeEPh+0x80>
      arr[i] = (var >> (8 * i));
 800491c:	1959      	adds	r1, r3, r5
 800491e:	00da      	lsls	r2, r3, #3
 8004920:	fa27 f202 	lsr.w	r2, r7, r2
 8004924:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8004926:	3301      	adds	r3, #1
 8004928:	e7f6      	b.n	8004918 <_ZNK13geometry_msgs16TransformStamped9serializeEPh+0x6e>
      offset += 4;
 800492a:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800492c:	463a      	mov	r2, r7
 800492e:	69b1      	ldr	r1, [r6, #24]
 8004930:	1960      	adds	r0, r4, r5
 8004932:	f005 fa39 	bl	8009da8 <memcpy>
      offset += length_child_frame_id;
 8004936:	443d      	add	r5, r7
      offset += this->transform.serialize(outbuffer + offset);
 8004938:	1961      	adds	r1, r4, r5
 800493a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800493c:	6b73      	ldr	r3, [r6, #52]	; 0x34
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800493e:	5562      	strb	r2, [r4, r5]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004940:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004944:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004946:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800494a:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800494c:	0e12      	lsrs	r2, r2, #24
 800494e:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004950:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004952:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004956:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004958:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800495c:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800495e:	0e1b      	lsrs	r3, r3, #24
 8004960:	71cb      	strb	r3, [r1, #7]
 8004962:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8004964:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004966:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004968:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800496c:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800496e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004972:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004974:	0e12      	lsrs	r2, r2, #24
 8004976:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004978:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800497a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800497e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004980:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004984:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004986:	0e1b      	lsrs	r3, r3, #24
 8004988:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 800498a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800498c:	6c73      	ldr	r3, [r6, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800498e:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004990:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8004994:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004996:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800499a:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800499c:	0e12      	lsrs	r2, r2, #24
 800499e:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80049a0:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80049a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80049a6:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80049a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80049ac:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80049ae:	0e1b      	lsrs	r3, r3, #24
 80049b0:	75cb      	strb	r3, [r1, #23]
      offset += this->rotation.serialize(outbuffer + offset);
 80049b2:	f101 0318 	add.w	r3, r1, #24
 80049b6:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80049b8:	6d72      	ldr	r2, [r6, #84]	; 0x54
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80049ba:	7608      	strb	r0, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80049bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80049c0:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80049c2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80049c6:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80049c8:	0e00      	lsrs	r0, r0, #24
 80049ca:	70d8      	strb	r0, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80049cc:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80049ce:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80049d2:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80049d4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80049d8:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80049da:	0e12      	lsrs	r2, r2, #24
 80049dc:	71da      	strb	r2, [r3, #7]
 80049de:	6db1      	ldr	r1, [r6, #88]	; 0x58
 80049e0:	6df2      	ldr	r2, [r6, #92]	; 0x5c
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80049e2:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80049e4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80049e8:	7258      	strb	r0, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80049ea:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80049ee:	7298      	strb	r0, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80049f0:	0e09      	lsrs	r1, r1, #24
 80049f2:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80049f4:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80049f6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80049fa:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80049fc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004a00:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004a02:	0e12      	lsrs	r2, r2, #24
 8004a04:	73da      	strb	r2, [r3, #15]
 8004a06:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8004a08:	6e72      	ldr	r2, [r6, #100]	; 0x64
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004a0a:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004a0c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004a10:	7458      	strb	r0, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004a12:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004a16:	7498      	strb	r0, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004a18:	0e09      	lsrs	r1, r1, #24
 8004a1a:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004a1c:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004a1e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004a22:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004a24:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004a28:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004a2a:	0e12      	lsrs	r2, r2, #24
 8004a2c:	75da      	strb	r2, [r3, #23]
      u_w.real = this->w;
 8004a2e:	6eb1      	ldr	r1, [r6, #104]	; 0x68
 8004a30:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004a32:	7619      	strb	r1, [r3, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004a34:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004a38:	7658      	strb	r0, [r3, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004a3a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004a3e:	7698      	strb	r0, [r3, #26]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004a40:	0e09      	lsrs	r1, r1, #24
 8004a42:	76d9      	strb	r1, [r3, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004a44:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004a46:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004a4a:	7759      	strb	r1, [r3, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004a4c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004a50:	7799      	strb	r1, [r3, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004a52:	0e12      	lsrs	r2, r2, #24
 8004a54:	77da      	strb	r2, [r3, #31]
    }
 8004a56:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8004a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a5c <_ZNK8nav_msgs8Odometry9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	4606      	mov	r6, r0
 8004a62:	460d      	mov	r5, r1
      offset += this->header.serialize(outbuffer + offset);
 8004a64:	1d07      	adds	r7, r0, #4
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8004a66:	793b      	ldrb	r3, [r7, #4]
 8004a68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8004a6a:	797b      	ldrb	r3, [r7, #5]
 8004a6c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8004a6e:	79bb      	ldrb	r3, [r7, #6]
 8004a70:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8004a76:	7a3b      	ldrb	r3, [r7, #8]
 8004a78:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004a7a:	7a7b      	ldrb	r3, [r7, #9]
 8004a7c:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004a7e:	7abb      	ldrb	r3, [r7, #10]
 8004a80:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8004a86:	7b3b      	ldrb	r3, [r7, #12]
 8004a88:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8004a8e:	7bbb      	ldrb	r3, [r7, #14]
 8004a90:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
 8004a96:	6938      	ldr	r0, [r7, #16]
 8004a98:	f7fb fb64 	bl	8000164 <strlen>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d807      	bhi.n	8004ab4 <_ZNK8nav_msgs8Odometry9serializeEPh+0x58>
      arr[i] = (var >> (8 * i));
 8004aa4:	f103 010c 	add.w	r1, r3, #12
 8004aa8:	00da      	lsls	r2, r3, #3
 8004aaa:	fa24 f202 	lsr.w	r2, r4, r2
 8004aae:	546a      	strb	r2, [r5, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	e7f5      	b.n	8004aa0 <_ZNK8nav_msgs8Odometry9serializeEPh+0x44>
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	6939      	ldr	r1, [r7, #16]
 8004ab8:	f105 0010 	add.w	r0, r5, #16
 8004abc:	f005 f974 	bl	8009da8 <memcpy>
      offset += length_frame_id;
 8004ac0:	3410      	adds	r4, #16
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8004ac2:	69b0      	ldr	r0, [r6, #24]
 8004ac4:	f7fb fb4e 	bl	8000164 <strlen>
 8004ac8:	4607      	mov	r7, r0
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d806      	bhi.n	8004ade <_ZNK8nav_msgs8Odometry9serializeEPh+0x82>
      arr[i] = (var >> (8 * i));
 8004ad0:	1919      	adds	r1, r3, r4
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	fa27 f202 	lsr.w	r2, r7, r2
 8004ad8:	546a      	strb	r2, [r5, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ada:	3301      	adds	r3, #1
 8004adc:	e7f6      	b.n	8004acc <_ZNK8nav_msgs8Odometry9serializeEPh+0x70>
      offset += 4;
 8004ade:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8004ae0:	463a      	mov	r2, r7
 8004ae2:	69b1      	ldr	r1, [r6, #24]
 8004ae4:	1928      	adds	r0, r5, r4
 8004ae6:	f005 f95f 	bl	8009da8 <memcpy>
      offset += length_child_frame_id;
 8004aea:	eb07 0e04 	add.w	lr, r7, r4
      offset += this->pose.serialize(outbuffer + offset);
 8004aee:	f106 0720 	add.w	r7, r6, #32
 8004af2:	eb05 010e 	add.w	r1, r5, lr
 8004af6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8004af8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004afa:	f805 200e 	strb.w	r2, [r5, lr]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004afe:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004b02:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004b04:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004b08:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004b0a:	0e12      	lsrs	r2, r2, #24
 8004b0c:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004b0e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004b10:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b14:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004b16:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b1a:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	71cb      	strb	r3, [r1, #7]
 8004b20:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8004b22:	6c73      	ldr	r3, [r6, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004b24:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004b26:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004b2a:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004b2c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004b30:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004b32:	0e12      	lsrs	r2, r2, #24
 8004b34:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004b36:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004b38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b3c:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004b3e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b42:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004b44:	0e1b      	lsrs	r3, r3, #24
 8004b46:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 8004b48:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8004b4a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004b4c:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004b4e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8004b52:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004b54:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004b58:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004b5a:	0e12      	lsrs	r2, r2, #24
 8004b5c:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004b5e:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004b60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b64:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004b66:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b6a:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004b6c:	0e1b      	lsrs	r3, r3, #24
 8004b6e:	75cb      	strb	r3, [r1, #23]
      offset += this->orientation.serialize(outbuffer + offset);
 8004b70:	f101 0318 	add.w	r3, r1, #24
 8004b74:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004b76:	6df0      	ldr	r0, [r6, #92]	; 0x5c
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004b78:	760c      	strb	r4, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004b7a:	f3c4 2c07 	ubfx	ip, r4, #8, #8
 8004b7e:	f883 c001 	strb.w	ip, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004b82:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8004b86:	f883 c002 	strb.w	ip, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004b8a:	0e24      	lsrs	r4, r4, #24
 8004b8c:	70dc      	strb	r4, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004b8e:	7118      	strb	r0, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004b90:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004b94:	715c      	strb	r4, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004b96:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004b9a:	719c      	strb	r4, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004b9c:	0e00      	lsrs	r0, r0, #24
 8004b9e:	71d8      	strb	r0, [r3, #7]
 8004ba0:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8004ba2:	6e70      	ldr	r0, [r6, #100]	; 0x64
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004ba4:	721c      	strb	r4, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004ba6:	f3c4 2c07 	ubfx	ip, r4, #8, #8
 8004baa:	f883 c009 	strb.w	ip, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004bae:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8004bb2:	f883 c00a 	strb.w	ip, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004bb6:	0e24      	lsrs	r4, r4, #24
 8004bb8:	72dc      	strb	r4, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004bba:	7318      	strb	r0, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004bbc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004bc0:	735c      	strb	r4, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004bc2:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004bc6:	739c      	strb	r4, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004bc8:	0e00      	lsrs	r0, r0, #24
 8004bca:	73d8      	strb	r0, [r3, #15]
 8004bcc:	6eb4      	ldr	r4, [r6, #104]	; 0x68
 8004bce:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004bd0:	741c      	strb	r4, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004bd2:	f3c4 2c07 	ubfx	ip, r4, #8, #8
 8004bd6:	f883 c011 	strb.w	ip, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004bda:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8004bde:	f883 c012 	strb.w	ip, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004be2:	0e24      	lsrs	r4, r4, #24
 8004be4:	74dc      	strb	r4, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004be6:	7518      	strb	r0, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004be8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004bec:	755c      	strb	r4, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004bee:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004bf2:	759c      	strb	r4, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004bf4:	0e00      	lsrs	r0, r0, #24
 8004bf6:	75d8      	strb	r0, [r3, #23]
      u_w.real = this->w;
 8004bf8:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8004bfa:	6f72      	ldr	r2, [r6, #116]	; 0x74
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004bfc:	7618      	strb	r0, [r3, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004bfe:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004c02:	765c      	strb	r4, [r3, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004c04:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004c08:	769c      	strb	r4, [r3, #26]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004c0a:	0e00      	lsrs	r0, r0, #24
 8004c0c:	76d8      	strb	r0, [r3, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004c0e:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004c10:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8004c14:	7758      	strb	r0, [r3, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004c16:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004c1a:	7798      	strb	r0, [r3, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004c1c:	0e12      	lsrs	r2, r2, #24
 8004c1e:	77da      	strb	r2, [r3, #31]
      for( uint32_t i = 0; i < 36; i++){
 8004c20:	2400      	movs	r4, #0
      offset += this->pose.serialize(outbuffer + offset);
 8004c22:	2038      	movs	r0, #56	; 0x38
      for( uint32_t i = 0; i < 36; i++){
 8004c24:	2c23      	cmp	r4, #35	; 0x23
 8004c26:	d829      	bhi.n	8004c7c <_ZNK8nav_msgs8Odometry9serializeEPh+0x220>
      u_covariancei.real = this->covariance[i];
 8004c28:	f104 030b 	add.w	r3, r4, #11
 8004c2c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8004c34:	540a      	strb	r2, [r1, r0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8004c36:	f100 0c01 	add.w	ip, r0, #1
 8004c3a:	f3c2 2807 	ubfx	r8, r2, #8, #8
 8004c3e:	f801 800c 	strb.w	r8, [r1, ip]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004c42:	f100 0c02 	add.w	ip, r0, #2
 8004c46:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8004c4a:	f801 800c 	strb.w	r8, [r1, ip]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8004c4e:	f100 0c03 	add.w	ip, r0, #3
 8004c52:	0e12      	lsrs	r2, r2, #24
 8004c54:	f801 200c 	strb.w	r2, [r1, ip]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004c58:	1d02      	adds	r2, r0, #4
 8004c5a:	548b      	strb	r3, [r1, r2]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004c5c:	1d42      	adds	r2, r0, #5
 8004c5e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8004c62:	f801 c002 	strb.w	ip, [r1, r2]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8004c66:	1d82      	adds	r2, r0, #6
 8004c68:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8004c6c:	f801 c002 	strb.w	ip, [r1, r2]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8004c70:	1dc2      	adds	r2, r0, #7
 8004c72:	0e1b      	lsrs	r3, r3, #24
 8004c74:	548b      	strb	r3, [r1, r2]
      offset += sizeof(this->covariance[i]);
 8004c76:	3008      	adds	r0, #8
      for( uint32_t i = 0; i < 36; i++){
 8004c78:	3401      	adds	r4, #1
 8004c7a:	e7d3      	b.n	8004c24 <_ZNK8nav_msgs8Odometry9serializeEPh+0x1c8>
 8004c7c:	4470      	add	r0, lr
      offset += this->twist.serialize(outbuffer + offset);
 8004c7e:	f506 77cc 	add.w	r7, r6, #408	; 0x198
 8004c82:	182c      	adds	r4, r5, r0
 8004c84:	f8d6 21b0 	ldr.w	r2, [r6, #432]	; 0x1b0
 8004c88:	f8d6 31b4 	ldr.w	r3, [r6, #436]	; 0x1b4
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004c8c:	542a      	strb	r2, [r5, r0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004c8e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004c92:	7065      	strb	r5, [r4, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004c94:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004c98:	70a5      	strb	r5, [r4, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004c9a:	0e12      	lsrs	r2, r2, #24
 8004c9c:	70e2      	strb	r2, [r4, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004c9e:	7123      	strb	r3, [r4, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004ca0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ca4:	7162      	strb	r2, [r4, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004ca6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004caa:	71a2      	strb	r2, [r4, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004cac:	0e1b      	lsrs	r3, r3, #24
 8004cae:	71e3      	strb	r3, [r4, #7]
 8004cb0:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8004cb4:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004cb8:	7222      	strb	r2, [r4, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004cba:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004cbe:	7265      	strb	r5, [r4, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004cc0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004cc4:	72a5      	strb	r5, [r4, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004cc6:	0e12      	lsrs	r2, r2, #24
 8004cc8:	72e2      	strb	r2, [r4, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004cca:	7323      	strb	r3, [r4, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004ccc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004cd0:	7362      	strb	r2, [r4, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004cd2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004cd6:	73a2      	strb	r2, [r4, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	73e3      	strb	r3, [r4, #15]
      u_z.real = this->z;
 8004cdc:	f8d6 21c0 	ldr.w	r2, [r6, #448]	; 0x1c0
 8004ce0:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004ce4:	7422      	strb	r2, [r4, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004ce6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004cea:	7461      	strb	r1, [r4, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004cec:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004cf0:	74a1      	strb	r1, [r4, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004cf2:	0e12      	lsrs	r2, r2, #24
 8004cf4:	74e2      	strb	r2, [r4, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004cf6:	7523      	strb	r3, [r4, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004cf8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004cfc:	7562      	strb	r2, [r4, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004cfe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004d02:	75a2      	strb	r2, [r4, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004d04:	0e1b      	lsrs	r3, r3, #24
 8004d06:	75e3      	strb	r3, [r4, #23]
 8004d08:	f104 0318 	add.w	r3, r4, #24
 8004d0c:	f8d6 11d0 	ldr.w	r1, [r6, #464]	; 0x1d0
 8004d10:	f8d6 21d4 	ldr.w	r2, [r6, #468]	; 0x1d4
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004d14:	7621      	strb	r1, [r4, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004d16:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8004d1a:	705d      	strb	r5, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004d1c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004d20:	709d      	strb	r5, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004d22:	0e09      	lsrs	r1, r1, #24
 8004d24:	70d9      	strb	r1, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004d26:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004d28:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004d2c:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004d2e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004d32:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004d34:	0e12      	lsrs	r2, r2, #24
 8004d36:	71da      	strb	r2, [r3, #7]
 8004d38:	f8d6 11d8 	ldr.w	r1, [r6, #472]	; 0x1d8
 8004d3c:	f8d6 21dc 	ldr.w	r2, [r6, #476]	; 0x1dc
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004d40:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004d42:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8004d46:	725d      	strb	r5, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004d48:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004d4c:	729d      	strb	r5, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004d4e:	0e09      	lsrs	r1, r1, #24
 8004d50:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004d52:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004d54:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004d58:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004d5a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004d5e:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004d60:	0e12      	lsrs	r2, r2, #24
 8004d62:	73da      	strb	r2, [r3, #15]
      u_z.real = this->z;
 8004d64:	f8d6 11e0 	ldr.w	r1, [r6, #480]	; 0x1e0
 8004d68:	f8d6 21e4 	ldr.w	r2, [r6, #484]	; 0x1e4
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004d6c:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004d6e:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8004d72:	745d      	strb	r5, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004d74:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004d78:	749d      	strb	r5, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004d7a:	0e09      	lsrs	r1, r1, #24
 8004d7c:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004d7e:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004d80:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004d84:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004d86:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004d8a:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004d8c:	0e12      	lsrs	r2, r2, #24
 8004d8e:	75da      	strb	r2, [r3, #23]
      for( uint32_t i = 0; i < 36; i++){
 8004d90:	2500      	movs	r5, #0
      offset += this->twist.serialize(outbuffer + offset);
 8004d92:	2330      	movs	r3, #48	; 0x30
      for( uint32_t i = 0; i < 36; i++){
 8004d94:	2d23      	cmp	r5, #35	; 0x23
 8004d96:	d823      	bhi.n	8004de0 <_ZNK8nav_msgs8Odometry9serializeEPh+0x384>
      u_covariancei.real = this->covariance[i];
 8004d98:	f105 020a 	add.w	r2, r5, #10
 8004d9c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8004da4:	54e1      	strb	r1, [r4, r3]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8004da6:	1c5e      	adds	r6, r3, #1
 8004da8:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 8004dac:	f804 e006 	strb.w	lr, [r4, r6]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004db0:	1c9e      	adds	r6, r3, #2
 8004db2:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8004db6:	f804 e006 	strb.w	lr, [r4, r6]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8004dba:	1cde      	adds	r6, r3, #3
 8004dbc:	0e09      	lsrs	r1, r1, #24
 8004dbe:	55a1      	strb	r1, [r4, r6]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	5462      	strb	r2, [r4, r1]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004dc4:	1d59      	adds	r1, r3, #5
 8004dc6:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8004dca:	5466      	strb	r6, [r4, r1]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8004dcc:	1d99      	adds	r1, r3, #6
 8004dce:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8004dd2:	5466      	strb	r6, [r4, r1]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8004dd4:	1dd9      	adds	r1, r3, #7
 8004dd6:	0e12      	lsrs	r2, r2, #24
 8004dd8:	5462      	strb	r2, [r4, r1]
      offset += sizeof(this->covariance[i]);
 8004dda:	3308      	adds	r3, #8
      for( uint32_t i = 0; i < 36; i++){
 8004ddc:	3501      	adds	r5, #1
 8004dde:	e7d9      	b.n	8004d94 <_ZNK8nav_msgs8Odometry9serializeEPh+0x338>
    }
 8004de0:	4418      	add	r0, r3
 8004de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004de6 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8004de6:	b4f0      	push	{r4, r5, r6, r7}
 8004de8:	6982      	ldr	r2, [r0, #24]
 8004dea:	69c3      	ldr	r3, [r0, #28]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004dec:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004dee:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004df2:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004df4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004df8:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004dfa:	0e12      	lsrs	r2, r2, #24
 8004dfc:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004dfe:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004e00:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e04:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004e06:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004e0a:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	71cb      	strb	r3, [r1, #7]
 8004e10:	6a02      	ldr	r2, [r0, #32]
 8004e12:	6a43      	ldr	r3, [r0, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004e14:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004e16:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8004e1a:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004e1c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8004e20:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004e22:	0e12      	lsrs	r2, r2, #24
 8004e24:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004e26:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004e28:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e2c:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004e2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004e32:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 8004e38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004e3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004e3c:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004e3e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004e42:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004e44:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004e48:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004e4a:	0e12      	lsrs	r2, r2, #24
 8004e4c:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004e4e:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004e50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e54:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004e56:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004e5a:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004e5c:	0e1b      	lsrs	r3, r3, #24
 8004e5e:	75cb      	strb	r3, [r1, #23]
 8004e60:	f101 0318 	add.w	r3, r1, #24
 8004e64:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8004e66:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004e68:	760d      	strb	r5, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004e6a:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8004e6e:	705e      	strb	r6, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004e70:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004e74:	709e      	strb	r6, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004e76:	0e2d      	lsrs	r5, r5, #24
 8004e78:	70dd      	strb	r5, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004e7a:	711c      	strb	r4, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004e7c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8004e80:	715d      	strb	r5, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004e82:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004e86:	719d      	strb	r5, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004e88:	0e24      	lsrs	r4, r4, #24
 8004e8a:	71dc      	strb	r4, [r3, #7]
 8004e8c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004e8e:	6c44      	ldr	r4, [r0, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004e90:	721d      	strb	r5, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004e92:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8004e96:	725e      	strb	r6, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004e98:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004e9c:	729e      	strb	r6, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004e9e:	0e2d      	lsrs	r5, r5, #24
 8004ea0:	72dd      	strb	r5, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004ea2:	731c      	strb	r4, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004ea4:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8004ea8:	735d      	strb	r5, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004eaa:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004eae:	739d      	strb	r5, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004eb0:	0e24      	lsrs	r4, r4, #24
 8004eb2:	73dc      	strb	r4, [r3, #15]
 8004eb4:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8004eb6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004eb8:	741d      	strb	r5, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004eba:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8004ebe:	745e      	strb	r6, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004ec0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004ec4:	749e      	strb	r6, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004ec6:	0e2d      	lsrs	r5, r5, #24
 8004ec8:	74dd      	strb	r5, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004eca:	751c      	strb	r4, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004ecc:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8004ed0:	755d      	strb	r5, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004ed2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004ed6:	759d      	strb	r5, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004ed8:	0e24      	lsrs	r4, r4, #24
 8004eda:	75dc      	strb	r4, [r3, #23]
      u_w.real = this->w;
 8004edc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004ede:	6d42      	ldr	r2, [r0, #84]	; 0x54
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004ee0:	761c      	strb	r4, [r3, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004ee2:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8004ee6:	765d      	strb	r5, [r3, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004ee8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004eec:	769d      	strb	r5, [r3, #26]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004eee:	0e24      	lsrs	r4, r4, #24
 8004ef0:	76dc      	strb	r4, [r3, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004ef2:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004ef4:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004ef8:	775c      	strb	r4, [r3, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004efa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004efe:	779c      	strb	r4, [r3, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004f00:	0e12      	lsrs	r2, r2, #24
 8004f02:	77da      	strb	r2, [r3, #31]
      for( uint32_t i = 0; i < 36; i++){
 8004f04:	2500      	movs	r5, #0
      offset += this->pose.serialize(outbuffer + offset);
 8004f06:	2338      	movs	r3, #56	; 0x38
      for( uint32_t i = 0; i < 36; i++){
 8004f08:	2d23      	cmp	r5, #35	; 0x23
 8004f0a:	d821      	bhi.n	8004f50 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x16a>
      u_covariancei.real = this->covariance[i];
 8004f0c:	f105 020b 	add.w	r2, r5, #11
 8004f10:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004f14:	6814      	ldr	r4, [r2, #0]
 8004f16:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8004f18:	54cc      	strb	r4, [r1, r3]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8004f1a:	1c5e      	adds	r6, r3, #1
 8004f1c:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8004f20:	558f      	strb	r7, [r1, r6]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004f22:	1c9e      	adds	r6, r3, #2
 8004f24:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8004f28:	558f      	strb	r7, [r1, r6]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8004f2a:	1cde      	adds	r6, r3, #3
 8004f2c:	0e24      	lsrs	r4, r4, #24
 8004f2e:	558c      	strb	r4, [r1, r6]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004f30:	1d1c      	adds	r4, r3, #4
 8004f32:	550a      	strb	r2, [r1, r4]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004f34:	1d5c      	adds	r4, r3, #5
 8004f36:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8004f3a:	550e      	strb	r6, [r1, r4]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8004f3c:	1d9c      	adds	r4, r3, #6
 8004f3e:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8004f42:	550e      	strb	r6, [r1, r4]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8004f44:	1ddc      	adds	r4, r3, #7
 8004f46:	0e12      	lsrs	r2, r2, #24
 8004f48:	550a      	strb	r2, [r1, r4]
      offset += sizeof(this->covariance[i]);
 8004f4a:	3308      	adds	r3, #8
      for( uint32_t i = 0; i < 36; i++){
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7db      	b.n	8004f08 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x122>
    }
 8004f50:	4618      	mov	r0, r3
 8004f52:	bcf0      	pop	{r4, r5, r6, r7}
 8004f54:	4770      	bx	lr

08004f56 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004f56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004f5a:	780c      	ldrb	r4, [r1, #0]
 8004f5c:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f5e:	784e      	ldrb	r6, [r1, #1]
 8004f60:	2300      	movs	r3, #0
 8004f62:	0232      	lsls	r2, r6, #8
 8004f64:	4314      	orrs	r4, r2
 8004f66:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004f68:	788e      	ldrb	r6, [r1, #2]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	0432      	lsls	r2, r6, #16
 8004f6e:	4314      	orrs	r4, r2
 8004f70:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004f72:	78ce      	ldrb	r6, [r1, #3]
 8004f74:	0a33      	lsrs	r3, r6, #8
 8004f76:	0632      	lsls	r2, r6, #24
 8004f78:	4314      	orrs	r4, r2
 8004f7a:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	790b      	ldrb	r3, [r1, #4]
 8004f80:	4314      	orrs	r4, r2
 8004f82:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004f84:	f891 8005 	ldrb.w	r8, [r1, #5]
 8004f88:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8004f8c:	ea44 0802 	orr.w	r8, r4, r2
 8004f90:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f94:	798e      	ldrb	r6, [r1, #6]
 8004f96:	0435      	lsls	r5, r6, #16
 8004f98:	ea48 0802 	orr.w	r8, r8, r2
 8004f9c:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004fa0:	79ce      	ldrb	r6, [r1, #7]
 8004fa2:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8004fa4:	ea42 0408 	orr.w	r4, r2, r8
 8004fa8:	ea45 0509 	orr.w	r5, r5, r9
 8004fac:	e9c0 4508 	strd	r4, r5, [r0, #32]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004fb0:	f891 8008 	ldrb.w	r8, [r1, #8]
 8004fb4:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004fb8:	7a4e      	ldrb	r6, [r1, #9]
 8004fba:	2500      	movs	r5, #0
 8004fbc:	0234      	lsls	r4, r6, #8
 8004fbe:	ea48 0804 	orr.w	r8, r8, r4
 8004fc2:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004fc6:	7a8e      	ldrb	r6, [r1, #10]
 8004fc8:	2500      	movs	r5, #0
 8004fca:	0434      	lsls	r4, r6, #16
 8004fcc:	ea48 0804 	orr.w	r8, r8, r4
 8004fd0:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004fd4:	7ace      	ldrb	r6, [r1, #11]
 8004fd6:	0a35      	lsrs	r5, r6, #8
 8004fd8:	0634      	lsls	r4, r6, #24
 8004fda:	ea48 0804 	orr.w	r8, r8, r4
 8004fde:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004fe2:	7b0f      	ldrb	r7, [r1, #12]
 8004fe4:	ea48 0802 	orr.w	r8, r8, r2
 8004fe8:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004fec:	7b4e      	ldrb	r6, [r1, #13]
 8004fee:	0235      	lsls	r5, r6, #8
 8004ff0:	ea48 0802 	orr.w	r8, r8, r2
 8004ff4:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004ff8:	7b8e      	ldrb	r6, [r1, #14]
 8004ffa:	0435      	lsls	r5, r6, #16
 8004ffc:	ea48 0802 	orr.w	r8, r8, r2
 8005000:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005004:	7bce      	ldrb	r6, [r1, #15]
 8005006:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 8005008:	ea42 0408 	orr.w	r4, r2, r8
 800500c:	ea45 0509 	orr.w	r5, r5, r9
 8005010:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005014:	f891 8010 	ldrb.w	r8, [r1, #16]
 8005018:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800501c:	7c4e      	ldrb	r6, [r1, #17]
 800501e:	2500      	movs	r5, #0
 8005020:	0234      	lsls	r4, r6, #8
 8005022:	ea48 0804 	orr.w	r8, r8, r4
 8005026:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800502a:	7c8e      	ldrb	r6, [r1, #18]
 800502c:	2500      	movs	r5, #0
 800502e:	0434      	lsls	r4, r6, #16
 8005030:	ea48 0804 	orr.w	r8, r8, r4
 8005034:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005038:	7cce      	ldrb	r6, [r1, #19]
 800503a:	0a35      	lsrs	r5, r6, #8
 800503c:	0634      	lsls	r4, r6, #24
 800503e:	ea48 0804 	orr.w	r8, r8, r4
 8005042:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005046:	7d0f      	ldrb	r7, [r1, #20]
 8005048:	ea48 0802 	orr.w	r8, r8, r2
 800504c:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005050:	7d4e      	ldrb	r6, [r1, #21]
 8005052:	0235      	lsls	r5, r6, #8
 8005054:	ea48 0802 	orr.w	r8, r8, r2
 8005058:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800505c:	7d8e      	ldrb	r6, [r1, #22]
 800505e:	0435      	lsls	r5, r6, #16
 8005060:	ea48 0802 	orr.w	r8, r8, r2
 8005064:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005068:	7dce      	ldrb	r6, [r1, #23]
 800506a:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 800506c:	ea42 0408 	orr.w	r4, r2, r8
 8005070:	ea45 0509 	orr.w	r5, r5, r9
 8005074:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      offset += this->angular.deserialize(inbuffer + offset);
 8005078:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800507c:	7e0e      	ldrb	r6, [r1, #24]
 800507e:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005080:	f893 8001 	ldrb.w	r8, [r3, #1]
 8005084:	2500      	movs	r5, #0
 8005086:	ea4f 2408 	mov.w	r4, r8, lsl #8
 800508a:	ea46 0804 	orr.w	r8, r6, r4
 800508e:	ea47 0905 	orr.w	r9, r7, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005092:	789e      	ldrb	r6, [r3, #2]
 8005094:	2500      	movs	r5, #0
 8005096:	0434      	lsls	r4, r6, #16
 8005098:	ea48 0804 	orr.w	r8, r8, r4
 800509c:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80050a0:	78de      	ldrb	r6, [r3, #3]
 80050a2:	0a35      	lsrs	r5, r6, #8
 80050a4:	0634      	lsls	r4, r6, #24
 80050a6:	ea48 0804 	orr.w	r8, r8, r4
 80050aa:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80050ae:	f893 b004 	ldrb.w	fp, [r3, #4]
 80050b2:	ea48 0802 	orr.w	r8, r8, r2
 80050b6:	ea49 090b 	orr.w	r9, r9, fp
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80050ba:	795e      	ldrb	r6, [r3, #5]
 80050bc:	0235      	lsls	r5, r6, #8
 80050be:	ea48 0802 	orr.w	r8, r8, r2
 80050c2:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80050c6:	799e      	ldrb	r6, [r3, #6]
 80050c8:	0435      	lsls	r5, r6, #16
 80050ca:	ea48 0802 	orr.w	r8, r8, r2
 80050ce:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80050d2:	79de      	ldrb	r6, [r3, #7]
 80050d4:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 80050d6:	ea42 0408 	orr.w	r4, r2, r8
 80050da:	ea45 0509 	orr.w	r5, r5, r9
 80050de:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80050e2:	f893 8008 	ldrb.w	r8, [r3, #8]
 80050e6:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80050ea:	7a5e      	ldrb	r6, [r3, #9]
 80050ec:	2500      	movs	r5, #0
 80050ee:	0234      	lsls	r4, r6, #8
 80050f0:	ea48 0804 	orr.w	r8, r8, r4
 80050f4:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050f8:	7a9e      	ldrb	r6, [r3, #10]
 80050fa:	2500      	movs	r5, #0
 80050fc:	0434      	lsls	r4, r6, #16
 80050fe:	ea48 0804 	orr.w	r8, r8, r4
 8005102:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005106:	7ade      	ldrb	r6, [r3, #11]
 8005108:	0a35      	lsrs	r5, r6, #8
 800510a:	0634      	lsls	r4, r6, #24
 800510c:	ea48 0804 	orr.w	r8, r8, r4
 8005110:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005114:	7b1f      	ldrb	r7, [r3, #12]
 8005116:	ea48 0802 	orr.w	r8, r8, r2
 800511a:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800511e:	7b5e      	ldrb	r6, [r3, #13]
 8005120:	0235      	lsls	r5, r6, #8
 8005122:	ea48 0802 	orr.w	r8, r8, r2
 8005126:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800512a:	7b9e      	ldrb	r6, [r3, #14]
 800512c:	0435      	lsls	r5, r6, #16
 800512e:	ea48 0802 	orr.w	r8, r8, r2
 8005132:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005136:	7bde      	ldrb	r6, [r3, #15]
 8005138:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 800513a:	ea42 0408 	orr.w	r4, r2, r8
 800513e:	ea45 0509 	orr.w	r5, r5, r9
 8005142:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005146:	f893 8010 	ldrb.w	r8, [r3, #16]
 800514a:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800514e:	7c5e      	ldrb	r6, [r3, #17]
 8005150:	2500      	movs	r5, #0
 8005152:	0234      	lsls	r4, r6, #8
 8005154:	ea48 0804 	orr.w	r8, r8, r4
 8005158:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800515c:	7c9e      	ldrb	r6, [r3, #18]
 800515e:	2500      	movs	r5, #0
 8005160:	0434      	lsls	r4, r6, #16
 8005162:	ea48 0804 	orr.w	r8, r8, r4
 8005166:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800516a:	7cde      	ldrb	r6, [r3, #19]
 800516c:	0a35      	lsrs	r5, r6, #8
 800516e:	0634      	lsls	r4, r6, #24
 8005170:	ea48 0804 	orr.w	r8, r8, r4
 8005174:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005178:	7d1f      	ldrb	r7, [r3, #20]
 800517a:	ea48 0802 	orr.w	r8, r8, r2
 800517e:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005182:	7d5e      	ldrb	r6, [r3, #21]
 8005184:	0235      	lsls	r5, r6, #8
 8005186:	ea48 0802 	orr.w	r8, r8, r2
 800518a:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800518e:	7d9e      	ldrb	r6, [r3, #22]
 8005190:	0435      	lsls	r5, r6, #16
 8005192:	ea42 0408 	orr.w	r4, r2, r8
 8005196:	ea45 0509 	orr.w	r5, r5, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800519a:	7dde      	ldrb	r6, [r3, #23]
 800519c:	ea4f 6906 	mov.w	r9, r6, lsl #24
      this->z = u_z.real;
 80051a0:	4314      	orrs	r4, r2
 80051a2:	ea45 0509 	orr.w	r5, r5, r9
 80051a6:	e9c0 4514 	strd	r4, r5, [r0, #80]	; 0x50
    this->cb_(msg);
 80051aa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80051ac:	3010      	adds	r0, #16
 80051ae:	4798      	blx	r3
 80051b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051b4 <_ZN13geometry_msgs5Twist11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80051b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      offset += this->linear.deserialize(inbuffer + offset);
 80051b8:	f100 0e08 	add.w	lr, r0, #8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80051bc:	780c      	ldrb	r4, [r1, #0]
 80051be:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80051c0:	784e      	ldrb	r6, [r1, #1]
 80051c2:	2300      	movs	r3, #0
 80051c4:	0232      	lsls	r2, r6, #8
 80051c6:	4314      	orrs	r4, r2
 80051c8:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80051ca:	788e      	ldrb	r6, [r1, #2]
 80051cc:	2300      	movs	r3, #0
 80051ce:	0432      	lsls	r2, r6, #16
 80051d0:	4314      	orrs	r4, r2
 80051d2:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80051d4:	78ce      	ldrb	r6, [r1, #3]
 80051d6:	0a33      	lsrs	r3, r6, #8
 80051d8:	0632      	lsls	r2, r6, #24
 80051da:	4314      	orrs	r4, r2
 80051dc:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80051de:	2200      	movs	r2, #0
 80051e0:	790b      	ldrb	r3, [r1, #4]
 80051e2:	4314      	orrs	r4, r2
 80051e4:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80051e6:	f891 8005 	ldrb.w	r8, [r1, #5]
 80051ea:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80051ee:	ea44 0802 	orr.w	r8, r4, r2
 80051f2:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80051f6:	798e      	ldrb	r6, [r1, #6]
 80051f8:	0435      	lsls	r5, r6, #16
 80051fa:	ea48 0802 	orr.w	r8, r8, r2
 80051fe:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005202:	79ce      	ldrb	r6, [r1, #7]
 8005204:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8005206:	ea42 0408 	orr.w	r4, r2, r8
 800520a:	ea45 0509 	orr.w	r5, r5, r9
 800520e:	e9c0 4504 	strd	r4, r5, [r0, #16]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005212:	f891 8008 	ldrb.w	r8, [r1, #8]
 8005216:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800521a:	7a4e      	ldrb	r6, [r1, #9]
 800521c:	2500      	movs	r5, #0
 800521e:	0234      	lsls	r4, r6, #8
 8005220:	ea48 0804 	orr.w	r8, r8, r4
 8005224:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005228:	7a8e      	ldrb	r6, [r1, #10]
 800522a:	2500      	movs	r5, #0
 800522c:	0434      	lsls	r4, r6, #16
 800522e:	ea48 0804 	orr.w	r8, r8, r4
 8005232:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005236:	7ace      	ldrb	r6, [r1, #11]
 8005238:	0a35      	lsrs	r5, r6, #8
 800523a:	0634      	lsls	r4, r6, #24
 800523c:	ea48 0804 	orr.w	r8, r8, r4
 8005240:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005244:	7b0f      	ldrb	r7, [r1, #12]
 8005246:	ea48 0802 	orr.w	r8, r8, r2
 800524a:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800524e:	7b4e      	ldrb	r6, [r1, #13]
 8005250:	0235      	lsls	r5, r6, #8
 8005252:	ea48 0802 	orr.w	r8, r8, r2
 8005256:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800525a:	7b8e      	ldrb	r6, [r1, #14]
 800525c:	0435      	lsls	r5, r6, #16
 800525e:	ea48 0802 	orr.w	r8, r8, r2
 8005262:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005266:	7bce      	ldrb	r6, [r1, #15]
 8005268:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 800526a:	ea42 0408 	orr.w	r4, r2, r8
 800526e:	ea45 0509 	orr.w	r5, r5, r9
 8005272:	e9c0 4506 	strd	r4, r5, [r0, #24]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005276:	f891 8010 	ldrb.w	r8, [r1, #16]
 800527a:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800527e:	7c4e      	ldrb	r6, [r1, #17]
 8005280:	2500      	movs	r5, #0
 8005282:	0234      	lsls	r4, r6, #8
 8005284:	ea48 0804 	orr.w	r8, r8, r4
 8005288:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800528c:	7c8e      	ldrb	r6, [r1, #18]
 800528e:	2500      	movs	r5, #0
 8005290:	0434      	lsls	r4, r6, #16
 8005292:	ea48 0804 	orr.w	r8, r8, r4
 8005296:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800529a:	7cce      	ldrb	r6, [r1, #19]
 800529c:	0a35      	lsrs	r5, r6, #8
 800529e:	0634      	lsls	r4, r6, #24
 80052a0:	ea48 0804 	orr.w	r8, r8, r4
 80052a4:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80052a8:	7d0f      	ldrb	r7, [r1, #20]
 80052aa:	ea48 0802 	orr.w	r8, r8, r2
 80052ae:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80052b2:	7d4e      	ldrb	r6, [r1, #21]
 80052b4:	0235      	lsls	r5, r6, #8
 80052b6:	ea48 0802 	orr.w	r8, r8, r2
 80052ba:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80052be:	7d8e      	ldrb	r6, [r1, #22]
 80052c0:	0435      	lsls	r5, r6, #16
 80052c2:	ea48 0802 	orr.w	r8, r8, r2
 80052c6:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80052ca:	7dce      	ldrb	r6, [r1, #23]
 80052cc:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 80052ce:	ea42 0408 	orr.w	r4, r2, r8
 80052d2:	ea45 0509 	orr.w	r5, r5, r9
 80052d6:	e9c0 4508 	strd	r4, r5, [r0, #32]
      offset += this->angular.deserialize(inbuffer + offset);
 80052da:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80052de:	7e0e      	ldrb	r6, [r1, #24]
 80052e0:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80052e2:	f893 8001 	ldrb.w	r8, [r3, #1]
 80052e6:	2500      	movs	r5, #0
 80052e8:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80052ec:	4334      	orrs	r4, r6
 80052ee:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80052f0:	f893 8002 	ldrb.w	r8, [r3, #2]
 80052f4:	2700      	movs	r7, #0
 80052f6:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80052fa:	4334      	orrs	r4, r6
 80052fc:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80052fe:	f893 8003 	ldrb.w	r8, [r3, #3]
 8005302:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005306:	ea4f 6608 	mov.w	r6, r8, lsl #24
 800530a:	4334      	orrs	r4, r6
 800530c:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800530e:	791f      	ldrb	r7, [r3, #4]
 8005310:	4314      	orrs	r4, r2
 8005312:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005314:	f893 8005 	ldrb.w	r8, [r3, #5]
 8005318:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800531c:	4314      	orrs	r4, r2
 800531e:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005320:	f893 8006 	ldrb.w	r8, [r3, #6]
 8005324:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005328:	4314      	orrs	r4, r2
 800532a:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800532c:	f893 8007 	ldrb.w	r8, [r3, #7]
 8005330:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8005334:	4314      	orrs	r4, r2
 8005336:	433d      	orrs	r5, r7
 8005338:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800533c:	7a1e      	ldrb	r6, [r3, #8]
 800533e:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005340:	f893 8009 	ldrb.w	r8, [r3, #9]
 8005344:	2500      	movs	r5, #0
 8005346:	ea4f 2408 	mov.w	r4, r8, lsl #8
 800534a:	4326      	orrs	r6, r4
 800534c:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800534e:	f893 800a 	ldrb.w	r8, [r3, #10]
 8005352:	2500      	movs	r5, #0
 8005354:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8005358:	4326      	orrs	r6, r4
 800535a:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800535c:	f893 800b 	ldrb.w	r8, [r3, #11]
 8005360:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8005364:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8005368:	4326      	orrs	r6, r4
 800536a:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800536c:	7b1d      	ldrb	r5, [r3, #12]
 800536e:	4316      	orrs	r6, r2
 8005370:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005372:	f893 800d 	ldrb.w	r8, [r3, #13]
 8005376:	ea4f 2508 	mov.w	r5, r8, lsl #8
 800537a:	4614      	mov	r4, r2
 800537c:	4334      	orrs	r4, r6
 800537e:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005380:	f893 800e 	ldrb.w	r8, [r3, #14]
 8005384:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005388:	4314      	orrs	r4, r2
 800538a:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800538c:	f893 800f 	ldrb.w	r8, [r3, #15]
 8005390:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 8005394:	4314      	orrs	r4, r2
 8005396:	433d      	orrs	r5, r7
 8005398:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800539c:	7c1e      	ldrb	r6, [r3, #16]
 800539e:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80053a0:	f893 8011 	ldrb.w	r8, [r3, #17]
 80053a4:	2500      	movs	r5, #0
 80053a6:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80053aa:	4326      	orrs	r6, r4
 80053ac:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80053ae:	f893 8012 	ldrb.w	r8, [r3, #18]
 80053b2:	2500      	movs	r5, #0
 80053b4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80053b8:	4326      	orrs	r6, r4
 80053ba:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80053bc:	f893 8013 	ldrb.w	r8, [r3, #19]
 80053c0:	ea4f 2518 	mov.w	r5, r8, lsr #8
 80053c4:	ea4f 6408 	mov.w	r4, r8, lsl #24
 80053c8:	4326      	orrs	r6, r4
 80053ca:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80053cc:	7d1d      	ldrb	r5, [r3, #20]
 80053ce:	4316      	orrs	r6, r2
 80053d0:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80053d2:	f893 8015 	ldrb.w	r8, [r3, #21]
 80053d6:	ea4f 2508 	mov.w	r5, r8, lsl #8
 80053da:	4316      	orrs	r6, r2
 80053dc:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80053de:	f893 8016 	ldrb.w	r8, [r3, #22]
 80053e2:	ea4f 4508 	mov.w	r5, r8, lsl #16
 80053e6:	4614      	mov	r4, r2
 80053e8:	4334      	orrs	r4, r6
 80053ea:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80053ec:	f893 8017 	ldrb.w	r8, [r3, #23]
 80053f0:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 80053f4:	4314      	orrs	r4, r2
 80053f6:	433d      	orrs	r5, r7
 80053f8:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
    }
 80053fc:	2030      	movs	r0, #48	; 0x30
 80053fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005402 <_ZN13geometry_msgs4Pose11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8005402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      offset += this->position.deserialize(inbuffer + offset);
 8005406:	f100 0e08 	add.w	lr, r0, #8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800540a:	780c      	ldrb	r4, [r1, #0]
 800540c:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800540e:	784e      	ldrb	r6, [r1, #1]
 8005410:	2300      	movs	r3, #0
 8005412:	0232      	lsls	r2, r6, #8
 8005414:	4314      	orrs	r4, r2
 8005416:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005418:	788e      	ldrb	r6, [r1, #2]
 800541a:	2300      	movs	r3, #0
 800541c:	0432      	lsls	r2, r6, #16
 800541e:	4314      	orrs	r4, r2
 8005420:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005422:	78ce      	ldrb	r6, [r1, #3]
 8005424:	0a33      	lsrs	r3, r6, #8
 8005426:	0632      	lsls	r2, r6, #24
 8005428:	4314      	orrs	r4, r2
 800542a:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800542c:	2200      	movs	r2, #0
 800542e:	790b      	ldrb	r3, [r1, #4]
 8005430:	4314      	orrs	r4, r2
 8005432:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005434:	f891 8005 	ldrb.w	r8, [r1, #5]
 8005438:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800543c:	ea44 0802 	orr.w	r8, r4, r2
 8005440:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005444:	798e      	ldrb	r6, [r1, #6]
 8005446:	0435      	lsls	r5, r6, #16
 8005448:	ea48 0802 	orr.w	r8, r8, r2
 800544c:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005450:	79ce      	ldrb	r6, [r1, #7]
 8005452:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8005454:	ea42 0408 	orr.w	r4, r2, r8
 8005458:	ea45 0509 	orr.w	r5, r5, r9
 800545c:	e9c0 4504 	strd	r4, r5, [r0, #16]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005460:	f891 8008 	ldrb.w	r8, [r1, #8]
 8005464:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005468:	7a4e      	ldrb	r6, [r1, #9]
 800546a:	2500      	movs	r5, #0
 800546c:	0234      	lsls	r4, r6, #8
 800546e:	ea48 0804 	orr.w	r8, r8, r4
 8005472:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005476:	7a8e      	ldrb	r6, [r1, #10]
 8005478:	2500      	movs	r5, #0
 800547a:	0434      	lsls	r4, r6, #16
 800547c:	ea48 0804 	orr.w	r8, r8, r4
 8005480:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005484:	7ace      	ldrb	r6, [r1, #11]
 8005486:	0a35      	lsrs	r5, r6, #8
 8005488:	0634      	lsls	r4, r6, #24
 800548a:	ea48 0804 	orr.w	r8, r8, r4
 800548e:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005492:	7b0f      	ldrb	r7, [r1, #12]
 8005494:	ea48 0802 	orr.w	r8, r8, r2
 8005498:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800549c:	7b4e      	ldrb	r6, [r1, #13]
 800549e:	0235      	lsls	r5, r6, #8
 80054a0:	ea48 0802 	orr.w	r8, r8, r2
 80054a4:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80054a8:	7b8e      	ldrb	r6, [r1, #14]
 80054aa:	0435      	lsls	r5, r6, #16
 80054ac:	ea48 0802 	orr.w	r8, r8, r2
 80054b0:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80054b4:	7bce      	ldrb	r6, [r1, #15]
 80054b6:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 80054b8:	ea42 0408 	orr.w	r4, r2, r8
 80054bc:	ea45 0509 	orr.w	r5, r5, r9
 80054c0:	e9c0 4506 	strd	r4, r5, [r0, #24]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80054c4:	f891 8010 	ldrb.w	r8, [r1, #16]
 80054c8:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80054cc:	7c4e      	ldrb	r6, [r1, #17]
 80054ce:	2500      	movs	r5, #0
 80054d0:	0234      	lsls	r4, r6, #8
 80054d2:	ea48 0804 	orr.w	r8, r8, r4
 80054d6:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80054da:	7c8e      	ldrb	r6, [r1, #18]
 80054dc:	2500      	movs	r5, #0
 80054de:	0434      	lsls	r4, r6, #16
 80054e0:	ea48 0804 	orr.w	r8, r8, r4
 80054e4:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80054e8:	7cce      	ldrb	r6, [r1, #19]
 80054ea:	0a35      	lsrs	r5, r6, #8
 80054ec:	0634      	lsls	r4, r6, #24
 80054ee:	ea48 0804 	orr.w	r8, r8, r4
 80054f2:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80054f6:	7d0f      	ldrb	r7, [r1, #20]
 80054f8:	ea48 0802 	orr.w	r8, r8, r2
 80054fc:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005500:	7d4e      	ldrb	r6, [r1, #21]
 8005502:	0235      	lsls	r5, r6, #8
 8005504:	ea48 0802 	orr.w	r8, r8, r2
 8005508:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800550c:	7d8e      	ldrb	r6, [r1, #22]
 800550e:	0435      	lsls	r5, r6, #16
 8005510:	ea48 0802 	orr.w	r8, r8, r2
 8005514:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005518:	7dce      	ldrb	r6, [r1, #23]
 800551a:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 800551c:	ea42 0408 	orr.w	r4, r2, r8
 8005520:	ea45 0509 	orr.w	r5, r5, r9
 8005524:	e9c0 4508 	strd	r4, r5, [r0, #32]
      offset += this->orientation.deserialize(inbuffer + offset);
 8005528:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800552c:	7e0e      	ldrb	r6, [r1, #24]
 800552e:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005530:	f893 8001 	ldrb.w	r8, [r3, #1]
 8005534:	2500      	movs	r5, #0
 8005536:	ea4f 2408 	mov.w	r4, r8, lsl #8
 800553a:	4334      	orrs	r4, r6
 800553c:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800553e:	f893 8002 	ldrb.w	r8, [r3, #2]
 8005542:	2700      	movs	r7, #0
 8005544:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8005548:	4334      	orrs	r4, r6
 800554a:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800554c:	f893 8003 	ldrb.w	r8, [r3, #3]
 8005550:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005554:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8005558:	4334      	orrs	r4, r6
 800555a:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800555c:	791f      	ldrb	r7, [r3, #4]
 800555e:	4314      	orrs	r4, r2
 8005560:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005562:	f893 8005 	ldrb.w	r8, [r3, #5]
 8005566:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800556a:	4314      	orrs	r4, r2
 800556c:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800556e:	f893 8006 	ldrb.w	r8, [r3, #6]
 8005572:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005576:	4314      	orrs	r4, r2
 8005578:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800557a:	f893 8007 	ldrb.w	r8, [r3, #7]
 800557e:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8005582:	4314      	orrs	r4, r2
 8005584:	433d      	orrs	r5, r7
 8005586:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800558a:	7a1e      	ldrb	r6, [r3, #8]
 800558c:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800558e:	f893 8009 	ldrb.w	r8, [r3, #9]
 8005592:	2500      	movs	r5, #0
 8005594:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8005598:	4326      	orrs	r6, r4
 800559a:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800559c:	f893 800a 	ldrb.w	r8, [r3, #10]
 80055a0:	2500      	movs	r5, #0
 80055a2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80055a6:	4326      	orrs	r6, r4
 80055a8:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80055aa:	f893 800b 	ldrb.w	r8, [r3, #11]
 80055ae:	ea4f 2518 	mov.w	r5, r8, lsr #8
 80055b2:	ea4f 6408 	mov.w	r4, r8, lsl #24
 80055b6:	4326      	orrs	r6, r4
 80055b8:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80055ba:	7b1d      	ldrb	r5, [r3, #12]
 80055bc:	4316      	orrs	r6, r2
 80055be:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80055c0:	f893 800d 	ldrb.w	r8, [r3, #13]
 80055c4:	ea4f 2508 	mov.w	r5, r8, lsl #8
 80055c8:	4614      	mov	r4, r2
 80055ca:	4334      	orrs	r4, r6
 80055cc:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80055ce:	f893 800e 	ldrb.w	r8, [r3, #14]
 80055d2:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80055d6:	4314      	orrs	r4, r2
 80055d8:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80055da:	f893 800f 	ldrb.w	r8, [r3, #15]
 80055de:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 80055e2:	4314      	orrs	r4, r2
 80055e4:	433d      	orrs	r5, r7
 80055e6:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80055ea:	7c1e      	ldrb	r6, [r3, #16]
 80055ec:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80055ee:	f893 8011 	ldrb.w	r8, [r3, #17]
 80055f2:	2500      	movs	r5, #0
 80055f4:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80055f8:	4326      	orrs	r6, r4
 80055fa:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80055fc:	f893 8012 	ldrb.w	r8, [r3, #18]
 8005600:	2500      	movs	r5, #0
 8005602:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8005606:	4326      	orrs	r6, r4
 8005608:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800560a:	f893 8013 	ldrb.w	r8, [r3, #19]
 800560e:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8005612:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8005616:	4326      	orrs	r6, r4
 8005618:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800561a:	7d1d      	ldrb	r5, [r3, #20]
 800561c:	4316      	orrs	r6, r2
 800561e:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005620:	f893 8015 	ldrb.w	r8, [r3, #21]
 8005624:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8005628:	4614      	mov	r4, r2
 800562a:	4334      	orrs	r4, r6
 800562c:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800562e:	f893 8016 	ldrb.w	r8, [r3, #22]
 8005632:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005636:	4314      	orrs	r4, r2
 8005638:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800563a:	f893 8017 	ldrb.w	r8, [r3, #23]
 800563e:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 8005642:	4314      	orrs	r4, r2
 8005644:	433d      	orrs	r5, r7
 8005646:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800564a:	7e1e      	ldrb	r6, [r3, #24]
 800564c:	2700      	movs	r7, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800564e:	f893 8019 	ldrb.w	r8, [r3, #25]
 8005652:	2500      	movs	r5, #0
 8005654:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8005658:	4326      	orrs	r6, r4
 800565a:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800565c:	f893 801a 	ldrb.w	r8, [r3, #26]
 8005660:	2500      	movs	r5, #0
 8005662:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8005666:	4326      	orrs	r6, r4
 8005668:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800566a:	f893 801b 	ldrb.w	r8, [r3, #27]
 800566e:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8005672:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8005676:	4326      	orrs	r6, r4
 8005678:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800567a:	7f1d      	ldrb	r5, [r3, #28]
 800567c:	4316      	orrs	r6, r2
 800567e:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005680:	f893 801d 	ldrb.w	r8, [r3, #29]
 8005684:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8005688:	4316      	orrs	r6, r2
 800568a:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800568c:	f893 801e 	ldrb.w	r8, [r3, #30]
 8005690:	ea4f 4508 	mov.w	r5, r8, lsl #16
 8005694:	4614      	mov	r4, r2
 8005696:	4334      	orrs	r4, r6
 8005698:	433d      	orrs	r5, r7
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800569a:	f893 801f 	ldrb.w	r8, [r3, #31]
 800569e:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->w = u_w.real;
 80056a2:	4314      	orrs	r4, r2
 80056a4:	433d      	orrs	r5, r7
 80056a6:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    }
 80056aa:	2038      	movs	r0, #56	; 0x38
 80056ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080056b0 <_ZN13geometry_msgs9Transform11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80056b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      offset += this->translation.deserialize(inbuffer + offset);
 80056b4:	f100 0e08 	add.w	lr, r0, #8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80056b8:	780c      	ldrb	r4, [r1, #0]
 80056ba:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80056bc:	784e      	ldrb	r6, [r1, #1]
 80056be:	2300      	movs	r3, #0
 80056c0:	0232      	lsls	r2, r6, #8
 80056c2:	4314      	orrs	r4, r2
 80056c4:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80056c6:	788e      	ldrb	r6, [r1, #2]
 80056c8:	2300      	movs	r3, #0
 80056ca:	0432      	lsls	r2, r6, #16
 80056cc:	4314      	orrs	r4, r2
 80056ce:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80056d0:	78ce      	ldrb	r6, [r1, #3]
 80056d2:	0a33      	lsrs	r3, r6, #8
 80056d4:	0632      	lsls	r2, r6, #24
 80056d6:	4314      	orrs	r4, r2
 80056d8:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80056da:	2200      	movs	r2, #0
 80056dc:	790b      	ldrb	r3, [r1, #4]
 80056de:	4314      	orrs	r4, r2
 80056e0:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80056e2:	f891 8005 	ldrb.w	r8, [r1, #5]
 80056e6:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80056ea:	ea44 0802 	orr.w	r8, r4, r2
 80056ee:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80056f2:	798e      	ldrb	r6, [r1, #6]
 80056f4:	0435      	lsls	r5, r6, #16
 80056f6:	ea48 0802 	orr.w	r8, r8, r2
 80056fa:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80056fe:	79ce      	ldrb	r6, [r1, #7]
 8005700:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8005702:	ea42 0408 	orr.w	r4, r2, r8
 8005706:	ea45 0509 	orr.w	r5, r5, r9
 800570a:	e9c0 4504 	strd	r4, r5, [r0, #16]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800570e:	f891 8008 	ldrb.w	r8, [r1, #8]
 8005712:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005716:	7a4e      	ldrb	r6, [r1, #9]
 8005718:	2500      	movs	r5, #0
 800571a:	0234      	lsls	r4, r6, #8
 800571c:	ea48 0804 	orr.w	r8, r8, r4
 8005720:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005724:	7a8e      	ldrb	r6, [r1, #10]
 8005726:	2500      	movs	r5, #0
 8005728:	0434      	lsls	r4, r6, #16
 800572a:	ea48 0804 	orr.w	r8, r8, r4
 800572e:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005732:	7ace      	ldrb	r6, [r1, #11]
 8005734:	0a35      	lsrs	r5, r6, #8
 8005736:	0634      	lsls	r4, r6, #24
 8005738:	ea48 0804 	orr.w	r8, r8, r4
 800573c:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005740:	7b0f      	ldrb	r7, [r1, #12]
 8005742:	ea48 0802 	orr.w	r8, r8, r2
 8005746:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800574a:	7b4e      	ldrb	r6, [r1, #13]
 800574c:	0235      	lsls	r5, r6, #8
 800574e:	ea48 0802 	orr.w	r8, r8, r2
 8005752:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005756:	7b8e      	ldrb	r6, [r1, #14]
 8005758:	0435      	lsls	r5, r6, #16
 800575a:	ea48 0802 	orr.w	r8, r8, r2
 800575e:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005762:	7bce      	ldrb	r6, [r1, #15]
 8005764:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 8005766:	ea42 0408 	orr.w	r4, r2, r8
 800576a:	ea45 0509 	orr.w	r5, r5, r9
 800576e:	e9c0 4506 	strd	r4, r5, [r0, #24]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005772:	f891 8010 	ldrb.w	r8, [r1, #16]
 8005776:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800577a:	7c4e      	ldrb	r6, [r1, #17]
 800577c:	2500      	movs	r5, #0
 800577e:	0234      	lsls	r4, r6, #8
 8005780:	ea48 0804 	orr.w	r8, r8, r4
 8005784:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005788:	7c8e      	ldrb	r6, [r1, #18]
 800578a:	2500      	movs	r5, #0
 800578c:	0434      	lsls	r4, r6, #16
 800578e:	ea48 0804 	orr.w	r8, r8, r4
 8005792:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005796:	7cce      	ldrb	r6, [r1, #19]
 8005798:	0a35      	lsrs	r5, r6, #8
 800579a:	0634      	lsls	r4, r6, #24
 800579c:	ea48 0804 	orr.w	r8, r8, r4
 80057a0:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80057a4:	7d0f      	ldrb	r7, [r1, #20]
 80057a6:	ea48 0802 	orr.w	r8, r8, r2
 80057aa:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80057ae:	7d4e      	ldrb	r6, [r1, #21]
 80057b0:	0235      	lsls	r5, r6, #8
 80057b2:	ea48 0802 	orr.w	r8, r8, r2
 80057b6:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80057ba:	7d8e      	ldrb	r6, [r1, #22]
 80057bc:	0435      	lsls	r5, r6, #16
 80057be:	ea48 0802 	orr.w	r8, r8, r2
 80057c2:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80057c6:	7dce      	ldrb	r6, [r1, #23]
 80057c8:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 80057ca:	ea42 0408 	orr.w	r4, r2, r8
 80057ce:	ea45 0509 	orr.w	r5, r5, r9
 80057d2:	e9c0 4508 	strd	r4, r5, [r0, #32]
      offset += this->rotation.deserialize(inbuffer + offset);
 80057d6:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80057da:	7e0e      	ldrb	r6, [r1, #24]
 80057dc:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80057de:	f893 8001 	ldrb.w	r8, [r3, #1]
 80057e2:	2500      	movs	r5, #0
 80057e4:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80057e8:	4334      	orrs	r4, r6
 80057ea:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80057ec:	f893 8002 	ldrb.w	r8, [r3, #2]
 80057f0:	2700      	movs	r7, #0
 80057f2:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80057f6:	4334      	orrs	r4, r6
 80057f8:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80057fa:	f893 8003 	ldrb.w	r8, [r3, #3]
 80057fe:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005802:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8005806:	4334      	orrs	r4, r6
 8005808:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800580a:	791f      	ldrb	r7, [r3, #4]
 800580c:	4314      	orrs	r4, r2
 800580e:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005810:	f893 8005 	ldrb.w	r8, [r3, #5]
 8005814:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8005818:	4314      	orrs	r4, r2
 800581a:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800581c:	f893 8006 	ldrb.w	r8, [r3, #6]
 8005820:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005824:	4314      	orrs	r4, r2
 8005826:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005828:	f893 8007 	ldrb.w	r8, [r3, #7]
 800582c:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8005830:	4314      	orrs	r4, r2
 8005832:	433d      	orrs	r5, r7
 8005834:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005838:	7a1e      	ldrb	r6, [r3, #8]
 800583a:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800583c:	f893 8009 	ldrb.w	r8, [r3, #9]
 8005840:	2500      	movs	r5, #0
 8005842:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8005846:	4326      	orrs	r6, r4
 8005848:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800584a:	f893 800a 	ldrb.w	r8, [r3, #10]
 800584e:	2500      	movs	r5, #0
 8005850:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8005854:	4326      	orrs	r6, r4
 8005856:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005858:	f893 800b 	ldrb.w	r8, [r3, #11]
 800585c:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8005860:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8005864:	4326      	orrs	r6, r4
 8005866:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005868:	7b1d      	ldrb	r5, [r3, #12]
 800586a:	4316      	orrs	r6, r2
 800586c:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800586e:	f893 800d 	ldrb.w	r8, [r3, #13]
 8005872:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8005876:	4614      	mov	r4, r2
 8005878:	4334      	orrs	r4, r6
 800587a:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800587c:	f893 800e 	ldrb.w	r8, [r3, #14]
 8005880:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005884:	4314      	orrs	r4, r2
 8005886:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005888:	f893 800f 	ldrb.w	r8, [r3, #15]
 800588c:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 8005890:	4314      	orrs	r4, r2
 8005892:	433d      	orrs	r5, r7
 8005894:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005898:	7c1e      	ldrb	r6, [r3, #16]
 800589a:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800589c:	f893 8011 	ldrb.w	r8, [r3, #17]
 80058a0:	2500      	movs	r5, #0
 80058a2:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80058a6:	4326      	orrs	r6, r4
 80058a8:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80058aa:	f893 8012 	ldrb.w	r8, [r3, #18]
 80058ae:	2500      	movs	r5, #0
 80058b0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80058b4:	4326      	orrs	r6, r4
 80058b6:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80058b8:	f893 8013 	ldrb.w	r8, [r3, #19]
 80058bc:	ea4f 2518 	mov.w	r5, r8, lsr #8
 80058c0:	ea4f 6408 	mov.w	r4, r8, lsl #24
 80058c4:	4326      	orrs	r6, r4
 80058c6:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80058c8:	7d1d      	ldrb	r5, [r3, #20]
 80058ca:	4316      	orrs	r6, r2
 80058cc:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80058ce:	f893 8015 	ldrb.w	r8, [r3, #21]
 80058d2:	ea4f 2508 	mov.w	r5, r8, lsl #8
 80058d6:	4614      	mov	r4, r2
 80058d8:	4334      	orrs	r4, r6
 80058da:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80058dc:	f893 8016 	ldrb.w	r8, [r3, #22]
 80058e0:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80058e4:	4314      	orrs	r4, r2
 80058e6:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80058e8:	f893 8017 	ldrb.w	r8, [r3, #23]
 80058ec:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 80058f0:	4314      	orrs	r4, r2
 80058f2:	433d      	orrs	r5, r7
 80058f4:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80058f8:	7e1e      	ldrb	r6, [r3, #24]
 80058fa:	2700      	movs	r7, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80058fc:	f893 8019 	ldrb.w	r8, [r3, #25]
 8005900:	2500      	movs	r5, #0
 8005902:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8005906:	4326      	orrs	r6, r4
 8005908:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800590a:	f893 801a 	ldrb.w	r8, [r3, #26]
 800590e:	2500      	movs	r5, #0
 8005910:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8005914:	4326      	orrs	r6, r4
 8005916:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005918:	f893 801b 	ldrb.w	r8, [r3, #27]
 800591c:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8005920:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8005924:	4326      	orrs	r6, r4
 8005926:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005928:	7f1d      	ldrb	r5, [r3, #28]
 800592a:	4316      	orrs	r6, r2
 800592c:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800592e:	f893 801d 	ldrb.w	r8, [r3, #29]
 8005932:	ea4f 2508 	mov.w	r5, r8, lsl #8
 8005936:	4316      	orrs	r6, r2
 8005938:	432f      	orrs	r7, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800593a:	f893 801e 	ldrb.w	r8, [r3, #30]
 800593e:	ea4f 4508 	mov.w	r5, r8, lsl #16
 8005942:	4614      	mov	r4, r2
 8005944:	4334      	orrs	r4, r6
 8005946:	433d      	orrs	r5, r7
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005948:	f893 801f 	ldrb.w	r8, [r3, #31]
 800594c:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->w = u_w.real;
 8005950:	4314      	orrs	r4, r2
 8005952:	433d      	orrs	r5, r7
 8005954:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    }
 8005958:	2038      	movs	r0, #56	; 0x38
 800595a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800595e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800595e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005962:	b08f      	sub	sp, #60	; 0x3c
 8005964:	4604      	mov	r4, r0
 8005966:	468c      	mov	ip, r1
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005968:	780e      	ldrb	r6, [r1, #0]
 800596a:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800596c:	784a      	ldrb	r2, [r1, #1]
 800596e:	4690      	mov	r8, r2
 8005970:	2300      	movs	r3, #0
 8005972:	4645      	mov	r5, r8
 8005974:	022a      	lsls	r2, r5, #8
 8005976:	4332      	orrs	r2, r6
 8005978:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800597a:	788d      	ldrb	r5, [r1, #2]
 800597c:	2700      	movs	r7, #0
 800597e:	042e      	lsls	r6, r5, #16
 8005980:	ea42 0806 	orr.w	r8, r2, r6
 8005984:	ea43 0907 	orr.w	r9, r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005988:	78ce      	ldrb	r6, [r1, #3]
 800598a:	0a33      	lsrs	r3, r6, #8
 800598c:	0632      	lsls	r2, r6, #24
 800598e:	ea48 0802 	orr.w	r8, r8, r2
 8005992:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005996:	2500      	movs	r5, #0
 8005998:	790e      	ldrb	r6, [r1, #4]
 800599a:	ea48 0705 	orr.w	r7, r8, r5
 800599e:	ea49 0806 	orr.w	r8, r9, r6
 80059a2:	46c1      	mov	r9, r8
 80059a4:	46b8      	mov	r8, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80059a6:	794e      	ldrb	r6, [r1, #5]
 80059a8:	0233      	lsls	r3, r6, #8
 80059aa:	4647      	mov	r7, r8
 80059ac:	432f      	orrs	r7, r5
 80059ae:	ea49 0803 	orr.w	r8, r9, r3
 80059b2:	46c1      	mov	r9, r8
 80059b4:	46b8      	mov	r8, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80059b6:	798e      	ldrb	r6, [r1, #6]
 80059b8:	0433      	lsls	r3, r6, #16
 80059ba:	4647      	mov	r7, r8
 80059bc:	432f      	orrs	r7, r5
 80059be:	ea49 0803 	orr.w	r8, r9, r3
 80059c2:	46c1      	mov	r9, r8
 80059c4:	46b8      	mov	r8, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80059c6:	79ce      	ldrb	r6, [r1, #7]
 80059c8:	0633      	lsls	r3, r6, #24
      this->x = u_x.real;
 80059ca:	4647      	mov	r7, r8
 80059cc:	432f      	orrs	r7, r5
 80059ce:	ea49 0803 	orr.w	r8, r9, r3
 80059d2:	463a      	mov	r2, r7
 80059d4:	4643      	mov	r3, r8
 80059d6:	e9c4 2306 	strd	r2, r3, [r4, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80059da:	7a0e      	ldrb	r6, [r1, #8]
 80059dc:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80059de:	7a4a      	ldrb	r2, [r1, #9]
 80059e0:	4690      	mov	r8, r2
 80059e2:	2300      	movs	r3, #0
 80059e4:	4641      	mov	r1, r8
 80059e6:	020a      	lsls	r2, r1, #8
 80059e8:	4332      	orrs	r2, r6
 80059ea:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80059ec:	f89c 700a 	ldrb.w	r7, [ip, #10]
 80059f0:	46b8      	mov	r8, r7
 80059f2:	2700      	movs	r7, #0
 80059f4:	4641      	mov	r1, r8
 80059f6:	040e      	lsls	r6, r1, #16
 80059f8:	ea42 0806 	orr.w	r8, r2, r6
 80059fc:	ea43 0907 	orr.w	r9, r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a00:	f89c 600b 	ldrb.w	r6, [ip, #11]
 8005a04:	0a33      	lsrs	r3, r6, #8
 8005a06:	0632      	lsls	r2, r6, #24
 8005a08:	ea48 0802 	orr.w	r8, r8, r2
 8005a0c:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005a10:	f89c 700c 	ldrb.w	r7, [ip, #12]
 8005a14:	ea48 0805 	orr.w	r8, r8, r5
 8005a18:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005a1c:	f89c 600d 	ldrb.w	r6, [ip, #13]
 8005a20:	0233      	lsls	r3, r6, #8
 8005a22:	ea48 0805 	orr.w	r8, r8, r5
 8005a26:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005a2a:	f89c 600e 	ldrb.w	r6, [ip, #14]
 8005a2e:	0433      	lsls	r3, r6, #16
 8005a30:	ea48 0805 	orr.w	r8, r8, r5
 8005a34:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005a38:	f89c 600f 	ldrb.w	r6, [ip, #15]
 8005a3c:	0633      	lsls	r3, r6, #24
      this->y = u_y.real;
 8005a3e:	ea48 0805 	orr.w	r8, r8, r5
 8005a42:	ea49 0903 	orr.w	r9, r9, r3
 8005a46:	4642      	mov	r2, r8
 8005a48:	464b      	mov	r3, r9
 8005a4a:	e9c4 2308 	strd	r2, r3, [r4, #32]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005a4e:	f89c 6010 	ldrb.w	r6, [ip, #16]
 8005a52:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005a54:	f89c 2011 	ldrb.w	r2, [ip, #17]
 8005a58:	4690      	mov	r8, r2
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	020a      	lsls	r2, r1, #8
 8005a60:	4332      	orrs	r2, r6
 8005a62:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005a64:	f89c 7012 	ldrb.w	r7, [ip, #18]
 8005a68:	46b8      	mov	r8, r7
 8005a6a:	2700      	movs	r7, #0
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	040e      	lsls	r6, r1, #16
 8005a70:	ea42 0806 	orr.w	r8, r2, r6
 8005a74:	ea43 0907 	orr.w	r9, r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a78:	f89c 6013 	ldrb.w	r6, [ip, #19]
 8005a7c:	0a33      	lsrs	r3, r6, #8
 8005a7e:	0632      	lsls	r2, r6, #24
 8005a80:	ea48 0802 	orr.w	r8, r8, r2
 8005a84:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005a88:	f89c 7014 	ldrb.w	r7, [ip, #20]
 8005a8c:	ea48 0805 	orr.w	r8, r8, r5
 8005a90:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005a94:	f89c 6015 	ldrb.w	r6, [ip, #21]
 8005a98:	0233      	lsls	r3, r6, #8
 8005a9a:	ea48 0805 	orr.w	r8, r8, r5
 8005a9e:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005aa2:	f89c 6016 	ldrb.w	r6, [ip, #22]
 8005aa6:	0433      	lsls	r3, r6, #16
 8005aa8:	ea48 0805 	orr.w	r8, r8, r5
 8005aac:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005ab0:	f89c 6017 	ldrb.w	r6, [ip, #23]
 8005ab4:	0633      	lsls	r3, r6, #24
      this->z = u_z.real;
 8005ab6:	ea48 0805 	orr.w	r8, r8, r5
 8005aba:	ea49 0903 	orr.w	r9, r9, r3
 8005abe:	4642      	mov	r2, r8
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
      offset += this->angular.deserialize(inbuffer + offset);
 8005ac6:	f10c 0318 	add.w	r3, ip, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005aca:	f89c 1018 	ldrb.w	r1, [ip, #24]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4688      	mov	r8, r1
 8005ad2:	4691      	mov	r9, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005ad4:	7859      	ldrb	r1, [r3, #1]
 8005ad6:	2700      	movs	r7, #0
 8005ad8:	020e      	lsls	r6, r1, #8
 8005ada:	4641      	mov	r1, r8
 8005adc:	464a      	mov	r2, r9
 8005ade:	4331      	orrs	r1, r6
 8005ae0:	433a      	orrs	r2, r7
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	4617      	mov	r7, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005ae6:	7899      	ldrb	r1, [r3, #2]
 8005ae8:	f04f 0900 	mov.w	r9, #0
 8005aec:	040a      	lsls	r2, r1, #16
 8005aee:	4611      	mov	r1, r2
 8005af0:	464a      	mov	r2, r9
 8005af2:	4331      	orrs	r1, r6
 8005af4:	433a      	orrs	r2, r7
 8005af6:	4688      	mov	r8, r1
 8005af8:	4691      	mov	r9, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005afa:	78d9      	ldrb	r1, [r3, #3]
 8005afc:	0a0f      	lsrs	r7, r1, #8
 8005afe:	060e      	lsls	r6, r1, #24
 8005b00:	4641      	mov	r1, r8
 8005b02:	464a      	mov	r2, r9
 8005b04:	4331      	orrs	r1, r6
 8005b06:	433a      	orrs	r2, r7
 8005b08:	460e      	mov	r6, r1
 8005b0a:	4617      	mov	r7, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005b0c:	791a      	ldrb	r2, [r3, #4]
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4331      	orrs	r1, r6
 8005b12:	433a      	orrs	r2, r7
 8005b14:	4693      	mov	fp, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005b16:	795f      	ldrb	r7, [r3, #5]
 8005b18:	46b8      	mov	r8, r7
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	0217      	lsls	r7, r2, #8
 8005b1e:	465a      	mov	r2, fp
 8005b20:	4329      	orrs	r1, r5
 8005b22:	433a      	orrs	r2, r7
 8005b24:	4693      	mov	fp, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005b26:	799f      	ldrb	r7, [r3, #6]
 8005b28:	46b8      	mov	r8, r7
 8005b2a:	4642      	mov	r2, r8
 8005b2c:	0417      	lsls	r7, r2, #16
 8005b2e:	465a      	mov	r2, fp
 8005b30:	4329      	orrs	r1, r5
 8005b32:	433a      	orrs	r2, r7
 8005b34:	4693      	mov	fp, r2
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005b36:	79df      	ldrb	r7, [r3, #7]
 8005b38:	46b8      	mov	r8, r7
 8005b3a:	4642      	mov	r2, r8
 8005b3c:	0617      	lsls	r7, r2, #24
      this->x = u_x.real;
 8005b3e:	465a      	mov	r2, fp
 8005b40:	4329      	orrs	r1, r5
 8005b42:	433a      	orrs	r2, r7
 8005b44:	460e      	mov	r6, r1
 8005b46:	4617      	mov	r7, r2
 8005b48:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005b4c:	7a19      	ldrb	r1, [r3, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	4688      	mov	r8, r1
 8005b52:	4691      	mov	r9, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005b54:	7a59      	ldrb	r1, [r3, #9]
 8005b56:	2700      	movs	r7, #0
 8005b58:	020e      	lsls	r6, r1, #8
 8005b5a:	4641      	mov	r1, r8
 8005b5c:	464a      	mov	r2, r9
 8005b5e:	4331      	orrs	r1, r6
 8005b60:	433a      	orrs	r2, r7
 8005b62:	460e      	mov	r6, r1
 8005b64:	4617      	mov	r7, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005b66:	7a99      	ldrb	r1, [r3, #10]
 8005b68:	f04f 0900 	mov.w	r9, #0
 8005b6c:	040a      	lsls	r2, r1, #16
 8005b6e:	4611      	mov	r1, r2
 8005b70:	464a      	mov	r2, r9
 8005b72:	4331      	orrs	r1, r6
 8005b74:	433a      	orrs	r2, r7
 8005b76:	4688      	mov	r8, r1
 8005b78:	4691      	mov	r9, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005b7a:	7ad9      	ldrb	r1, [r3, #11]
 8005b7c:	0a0f      	lsrs	r7, r1, #8
 8005b7e:	060e      	lsls	r6, r1, #24
 8005b80:	4641      	mov	r1, r8
 8005b82:	464a      	mov	r2, r9
 8005b84:	4331      	orrs	r1, r6
 8005b86:	433a      	orrs	r2, r7
 8005b88:	460e      	mov	r6, r1
 8005b8a:	4617      	mov	r7, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005b8c:	7b1a      	ldrb	r2, [r3, #12]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4331      	orrs	r1, r6
 8005b92:	433a      	orrs	r2, r7
 8005b94:	4693      	mov	fp, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005b96:	7b5f      	ldrb	r7, [r3, #13]
 8005b98:	46b8      	mov	r8, r7
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	0217      	lsls	r7, r2, #8
 8005b9e:	465a      	mov	r2, fp
 8005ba0:	4329      	orrs	r1, r5
 8005ba2:	433a      	orrs	r2, r7
 8005ba4:	4693      	mov	fp, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005ba6:	7b9f      	ldrb	r7, [r3, #14]
 8005ba8:	46b8      	mov	r8, r7
 8005baa:	4642      	mov	r2, r8
 8005bac:	0417      	lsls	r7, r2, #16
 8005bae:	465a      	mov	r2, fp
 8005bb0:	4329      	orrs	r1, r5
 8005bb2:	433a      	orrs	r2, r7
 8005bb4:	4693      	mov	fp, r2
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005bb6:	7bdf      	ldrb	r7, [r3, #15]
 8005bb8:	46b8      	mov	r8, r7
 8005bba:	4642      	mov	r2, r8
 8005bbc:	0617      	lsls	r7, r2, #24
      this->y = u_y.real;
 8005bbe:	465a      	mov	r2, fp
 8005bc0:	4329      	orrs	r1, r5
 8005bc2:	433a      	orrs	r2, r7
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	4617      	mov	r7, r2
 8005bc8:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005bcc:	7c19      	ldrb	r1, [r3, #16]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	4688      	mov	r8, r1
 8005bd2:	4691      	mov	r9, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005bd4:	7c59      	ldrb	r1, [r3, #17]
 8005bd6:	2700      	movs	r7, #0
 8005bd8:	020e      	lsls	r6, r1, #8
 8005bda:	4641      	mov	r1, r8
 8005bdc:	464a      	mov	r2, r9
 8005bde:	4331      	orrs	r1, r6
 8005be0:	433a      	orrs	r2, r7
 8005be2:	460e      	mov	r6, r1
 8005be4:	4617      	mov	r7, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005be6:	7c99      	ldrb	r1, [r3, #18]
 8005be8:	f04f 0900 	mov.w	r9, #0
 8005bec:	040a      	lsls	r2, r1, #16
 8005bee:	4611      	mov	r1, r2
 8005bf0:	464a      	mov	r2, r9
 8005bf2:	4331      	orrs	r1, r6
 8005bf4:	433a      	orrs	r2, r7
 8005bf6:	4688      	mov	r8, r1
 8005bf8:	4691      	mov	r9, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005bfa:	7cd9      	ldrb	r1, [r3, #19]
 8005bfc:	0a0f      	lsrs	r7, r1, #8
 8005bfe:	060e      	lsls	r6, r1, #24
 8005c00:	4641      	mov	r1, r8
 8005c02:	464a      	mov	r2, r9
 8005c04:	4331      	orrs	r1, r6
 8005c06:	433a      	orrs	r2, r7
 8005c08:	460e      	mov	r6, r1
 8005c0a:	4617      	mov	r7, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005c0c:	7d1a      	ldrb	r2, [r3, #20]
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4331      	orrs	r1, r6
 8005c12:	433a      	orrs	r2, r7
 8005c14:	4688      	mov	r8, r1
 8005c16:	4691      	mov	r9, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005c18:	7d59      	ldrb	r1, [r3, #21]
 8005c1a:	020f      	lsls	r7, r1, #8
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	464a      	mov	r2, r9
 8005c20:	4329      	orrs	r1, r5
 8005c22:	433a      	orrs	r2, r7
 8005c24:	4688      	mov	r8, r1
 8005c26:	4691      	mov	r9, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005c28:	7d99      	ldrb	r1, [r3, #22]
 8005c2a:	040f      	lsls	r7, r1, #16
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	464a      	mov	r2, r9
 8005c30:	4329      	orrs	r1, r5
 8005c32:	433a      	orrs	r2, r7
 8005c34:	4691      	mov	r9, r2
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005c36:	7dde      	ldrb	r6, [r3, #23]
 8005c38:	0633      	lsls	r3, r6, #24
      this->z = u_z.real;
 8005c3a:	460f      	mov	r7, r1
 8005c3c:	432f      	orrs	r7, r5
 8005c3e:	ea49 0803 	orr.w	r8, r9, r3
 8005c42:	463a      	mov	r2, r7
 8005c44:	4643      	mov	r3, r8
 8005c46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
      offset += this->twist.deserialize(inbuffer + offset);
 8005c4a:	2030      	movs	r0, #48	; 0x30
 8005c4c:	46ae      	mov	lr, r5
 8005c4e:	4627      	mov	r7, r4
 8005c50:	4661      	mov	r1, ip
      for( uint32_t i = 0; i < 36; i++){
 8005c52:	f1be 0f23 	cmp.w	lr, #35	; 0x23
 8005c56:	d853      	bhi.n	8005d00 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x3a2>
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005c58:	5c0a      	ldrb	r2, [r1, r0]
 8005c5a:	2300      	movs	r3, #0
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c5c:	1c44      	adds	r4, r0, #1
 8005c5e:	5d0c      	ldrb	r4, [r1, r4]
 8005c60:	2600      	movs	r6, #0
 8005c62:	9601      	str	r6, [sp, #4]
 8005c64:	0224      	lsls	r4, r4, #8
 8005c66:	9400      	str	r4, [sp, #0]
 8005c68:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005c6c:	4314      	orrs	r4, r2
 8005c6e:	431d      	orrs	r5, r3
 8005c70:	4622      	mov	r2, r4
 8005c72:	462b      	mov	r3, r5
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c74:	1c84      	adds	r4, r0, #2
 8005c76:	5d0c      	ldrb	r4, [r1, r4]
 8005c78:	9603      	str	r6, [sp, #12]
 8005c7a:	0424      	lsls	r4, r4, #16
 8005c7c:	9402      	str	r4, [sp, #8]
 8005c7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c82:	4314      	orrs	r4, r2
 8005c84:	431d      	orrs	r5, r3
 8005c86:	4622      	mov	r2, r4
 8005c88:	462b      	mov	r3, r5
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c8a:	1cc4      	adds	r4, r0, #3
 8005c8c:	5d0c      	ldrb	r4, [r1, r4]
 8005c8e:	ea4f 2914 	mov.w	r9, r4, lsr #8
 8005c92:	ea4f 6804 	mov.w	r8, r4, lsl #24
 8005c96:	ea42 0208 	orr.w	r2, r2, r8
 8005c9a:	ea43 0309 	orr.w	r3, r3, r9
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005c9e:	1d04      	adds	r4, r0, #4
 8005ca0:	f811 b004 	ldrb.w	fp, [r1, r4]
 8005ca4:	4332      	orrs	r2, r6
 8005ca6:	ea43 030b 	orr.w	r3, r3, fp
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005caa:	1d44      	adds	r4, r0, #5
 8005cac:	5d0c      	ldrb	r4, [r1, r4]
 8005cae:	0224      	lsls	r4, r4, #8
 8005cb0:	9405      	str	r4, [sp, #20]
 8005cb2:	9604      	str	r6, [sp, #16]
 8005cb4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005cb8:	4314      	orrs	r4, r2
 8005cba:	431d      	orrs	r5, r3
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	462b      	mov	r3, r5
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005cc0:	1d84      	adds	r4, r0, #6
 8005cc2:	5d0c      	ldrb	r4, [r1, r4]
 8005cc4:	0424      	lsls	r4, r4, #16
 8005cc6:	9407      	str	r4, [sp, #28]
 8005cc8:	9606      	str	r6, [sp, #24]
 8005cca:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005cce:	4314      	orrs	r4, r2
 8005cd0:	431d      	orrs	r5, r3
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	462b      	mov	r3, r5
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005cd6:	1dc4      	adds	r4, r0, #7
 8005cd8:	5d0c      	ldrb	r4, [r1, r4]
 8005cda:	0624      	lsls	r4, r4, #24
 8005cdc:	9409      	str	r4, [sp, #36]	; 0x24
 8005cde:	9608      	str	r6, [sp, #32]
      this->covariance[i] = u_covariancei.real;
 8005ce0:	f10e 040a 	add.w	r4, lr, #10
 8005ce4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8005ce8:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8005cec:	4315      	orrs	r5, r2
 8005cee:	431e      	orrs	r6, r3
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4633      	mov	r3, r6
 8005cf4:	e9c4 2300 	strd	r2, r3, [r4]
      offset += sizeof(this->covariance[i]);
 8005cf8:	3008      	adds	r0, #8
      for( uint32_t i = 0; i < 36; i++){
 8005cfa:	f10e 0e01 	add.w	lr, lr, #1
 8005cfe:	e7a8      	b.n	8005c52 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2f4>
    }
 8005d00:	b00f      	add	sp, #60	; 0x3c
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d06 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8005d06:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
      offset += this->header.deserialize(inbuffer + offset);
 8005d0a:	1d06      	adds	r6, r0, #4
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8005d0c:	780b      	ldrb	r3, [r1, #0]
 8005d0e:	6073      	str	r3, [r6, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d10:	784a      	ldrb	r2, [r1, #1]
 8005d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d16:	6073      	str	r3, [r6, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d18:	788a      	ldrb	r2, [r1, #2]
 8005d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d1e:	6073      	str	r3, [r6, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005d20:	78ca      	ldrb	r2, [r1, #3]
 8005d22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d26:	6073      	str	r3, [r6, #4]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8005d28:	790b      	ldrb	r3, [r1, #4]
 8005d2a:	60b3      	str	r3, [r6, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d2c:	794a      	ldrb	r2, [r1, #5]
 8005d2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d32:	60b3      	str	r3, [r6, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d34:	798a      	ldrb	r2, [r1, #6]
 8005d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d3a:	60b3      	str	r3, [r6, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005d3c:	79ca      	ldrb	r2, [r1, #7]
 8005d3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d42:	60b3      	str	r3, [r6, #8]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8005d44:	7a0b      	ldrb	r3, [r1, #8]
 8005d46:	60f3      	str	r3, [r6, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d48:	7a4a      	ldrb	r2, [r1, #9]
 8005d4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d4e:	60f3      	str	r3, [r6, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d50:	7a8a      	ldrb	r2, [r1, #10]
 8005d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d56:	60f3      	str	r3, [r6, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005d58:	7aca      	ldrb	r2, [r1, #11]
 8005d5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d5e:	60f3      	str	r3, [r6, #12]
    var = 0;
 8005d60:	2400      	movs	r4, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8005d62:	4623      	mov	r3, r4
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d806      	bhi.n	8005d76 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x70>
      var |= (arr[i] << (8 * i));
 8005d68:	18ca      	adds	r2, r1, r3
 8005d6a:	7b12      	ldrb	r2, [r2, #12]
 8005d6c:	00dd      	lsls	r5, r3, #3
 8005d6e:	40aa      	lsls	r2, r5
 8005d70:	4314      	orrs	r4, r2
    for (size_t i = 0; i < sizeof(V); i++)
 8005d72:	3301      	adds	r3, #1
 8005d74:	e7f6      	b.n	8005d64 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x5e>
 8005d76:	2310      	movs	r3, #16
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8005d78:	f104 0210 	add.w	r2, r4, #16
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d904      	bls.n	8005d8a <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x84>
          inbuffer[k-1]=inbuffer[k];
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	5ccd      	ldrb	r5, [r1, r3]
 8005d84:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8005d86:	3301      	adds	r3, #1
 8005d88:	e7f6      	b.n	8005d78 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x72>
      inbuffer[offset+length_frame_id-1]=0;
 8005d8a:	340f      	adds	r4, #15
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	550b      	strb	r3, [r1, r4]
      this->frame_id = (char *)(inbuffer + offset-1);
 8005d90:	f101 040f 	add.w	r4, r1, #15
 8005d94:	6134      	str	r4, [r6, #16]
    var = 0;
 8005d96:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d806      	bhi.n	8005daa <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0xa4>
      var |= (arr[i] << (8 * i));
 8005d9c:	18cc      	adds	r4, r1, r3
 8005d9e:	5ca4      	ldrb	r4, [r4, r2]
 8005da0:	00dd      	lsls	r5, r3, #3
 8005da2:	40ac      	lsls	r4, r5
 8005da4:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8005da6:	3301      	adds	r3, #1
 8005da8:	e7f6      	b.n	8005d98 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x92>
      offset += 4;
 8005daa:	1d14      	adds	r4, r2, #4
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005dac:	4623      	mov	r3, r4
 8005dae:	19a2      	adds	r2, r4, r6
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d204      	bcs.n	8005dbe <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0xb8>
          inbuffer[k-1]=inbuffer[k];
 8005db4:	1e5a      	subs	r2, r3, #1
 8005db6:	5ccd      	ldrb	r5, [r1, r3]
 8005db8:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005dba:	3301      	adds	r3, #1
 8005dbc:	e7f7      	b.n	8005dae <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0xa8>
      inbuffer[offset+length_child_frame_id-1]=0;
 8005dbe:	1e55      	subs	r5, r2, #1
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	554b      	strb	r3, [r1, r5]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8005dc4:	3c01      	subs	r4, #1
 8005dc6:	440c      	add	r4, r1
 8005dc8:	6184      	str	r4, [r0, #24]
      offset += this->transform.deserialize(inbuffer + offset);
 8005dca:	188c      	adds	r4, r1, r2
      offset += this->translation.deserialize(inbuffer + offset);
 8005dcc:	f100 0528 	add.w	r5, r0, #40	; 0x28
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005dd0:	f811 a002 	ldrb.w	sl, [r1, r2]
 8005dd4:	f04f 0b00 	mov.w	fp, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005dd8:	f894 8001 	ldrb.w	r8, [r4, #1]
 8005ddc:	2700      	movs	r7, #0
 8005dde:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8005de2:	ea4a 0a06 	orr.w	sl, sl, r6
 8005de6:	ea4b 0b07 	orr.w	fp, fp, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005dea:	f894 8002 	ldrb.w	r8, [r4, #2]
 8005dee:	2700      	movs	r7, #0
 8005df0:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8005df4:	ea4a 0a06 	orr.w	sl, sl, r6
 8005df8:	ea4b 0b07 	orr.w	fp, fp, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005dfc:	f894 8003 	ldrb.w	r8, [r4, #3]
 8005e00:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005e04:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8005e08:	ea46 060a 	orr.w	r6, r6, sl
 8005e0c:	ea47 070b 	orr.w	r7, r7, fp
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005e10:	f894 b004 	ldrb.w	fp, [r4, #4]
 8005e14:	ea43 0a06 	orr.w	sl, r3, r6
 8005e18:	ea4b 0b07 	orr.w	fp, fp, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005e1c:	f894 8005 	ldrb.w	r8, [r4, #5]
 8005e20:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8005e24:	ea4a 0a03 	orr.w	sl, sl, r3
 8005e28:	ea4b 0b07 	orr.w	fp, fp, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005e2c:	f894 8006 	ldrb.w	r8, [r4, #6]
 8005e30:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005e34:	ea4a 0a03 	orr.w	sl, sl, r3
 8005e38:	ea4b 0b07 	orr.w	fp, fp, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005e3c:	f894 8007 	ldrb.w	r8, [r4, #7]
 8005e40:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8005e44:	ea43 060a 	orr.w	r6, r3, sl
 8005e48:	ea47 070b 	orr.w	r7, r7, fp
 8005e4c:	e9c5 6702 	strd	r6, r7, [r5, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005e50:	f894 a008 	ldrb.w	sl, [r4, #8]
 8005e54:	f04f 0b00 	mov.w	fp, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005e58:	f894 8009 	ldrb.w	r8, [r4, #9]
 8005e5c:	2700      	movs	r7, #0
 8005e5e:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8005e62:	ea4a 0a06 	orr.w	sl, sl, r6
 8005e66:	ea4b 0b07 	orr.w	fp, fp, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005e6a:	f894 800a 	ldrb.w	r8, [r4, #10]
 8005e6e:	2700      	movs	r7, #0
 8005e70:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8005e74:	ea4a 0a06 	orr.w	sl, sl, r6
 8005e78:	ea4b 0b07 	orr.w	fp, fp, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005e7c:	f894 800b 	ldrb.w	r8, [r4, #11]
 8005e80:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005e84:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8005e88:	ea46 060a 	orr.w	r6, r6, sl
 8005e8c:	ea47 070b 	orr.w	r7, r7, fp
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005e90:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8005e94:	ea43 0a06 	orr.w	sl, r3, r6
 8005e98:	ea4b 0b07 	orr.w	fp, fp, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005e9c:	f894 800d 	ldrb.w	r8, [r4, #13]
 8005ea0:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8005ea4:	ea4a 0a03 	orr.w	sl, sl, r3
 8005ea8:	ea4b 0b07 	orr.w	fp, fp, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005eac:	f894 800e 	ldrb.w	r8, [r4, #14]
 8005eb0:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005eb4:	ea4a 0a03 	orr.w	sl, sl, r3
 8005eb8:	ea4b 0b07 	orr.w	fp, fp, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005ebc:	f894 800f 	ldrb.w	r8, [r4, #15]
 8005ec0:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 8005ec4:	ea43 060a 	orr.w	r6, r3, sl
 8005ec8:	ea47 070b 	orr.w	r7, r7, fp
 8005ecc:	e9c5 6704 	strd	r6, r7, [r5, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005ed0:	f894 a010 	ldrb.w	sl, [r4, #16]
 8005ed4:	f04f 0b00 	mov.w	fp, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005ed8:	f894 8011 	ldrb.w	r8, [r4, #17]
 8005edc:	2700      	movs	r7, #0
 8005ede:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8005ee2:	ea4a 0a06 	orr.w	sl, sl, r6
 8005ee6:	ea4b 0b07 	orr.w	fp, fp, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005eea:	f894 8012 	ldrb.w	r8, [r4, #18]
 8005eee:	2700      	movs	r7, #0
 8005ef0:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8005ef4:	ea4a 0a06 	orr.w	sl, sl, r6
 8005ef8:	ea4b 0b07 	orr.w	fp, fp, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005efc:	f894 8013 	ldrb.w	r8, [r4, #19]
 8005f00:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005f04:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8005f08:	ea46 060a 	orr.w	r6, r6, sl
 8005f0c:	ea47 070b 	orr.w	r7, r7, fp
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005f10:	f894 b014 	ldrb.w	fp, [r4, #20]
 8005f14:	ea43 0a06 	orr.w	sl, r3, r6
 8005f18:	ea4b 0b07 	orr.w	fp, fp, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005f1c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8005f20:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8005f24:	ea4a 0a03 	orr.w	sl, sl, r3
 8005f28:	ea4b 0b07 	orr.w	fp, fp, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005f2c:	f894 8016 	ldrb.w	r8, [r4, #22]
 8005f30:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8005f34:	ea4a 0a03 	orr.w	sl, sl, r3
 8005f38:	ea4b 0b07 	orr.w	fp, fp, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005f3c:	f894 8017 	ldrb.w	r8, [r4, #23]
 8005f40:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 8005f44:	ea43 060a 	orr.w	r6, r3, sl
 8005f48:	ea47 070b 	orr.w	r7, r7, fp
 8005f4c:	e9c5 6706 	strd	r6, r7, [r5, #24]
      offset += this->rotation.deserialize(inbuffer + offset);
 8005f50:	f104 0118 	add.w	r1, r4, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005f54:	7e26      	ldrb	r6, [r4, #24]
 8005f56:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005f58:	f891 8001 	ldrb.w	r8, [r1, #1]
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8005f62:	ea46 0804 	orr.w	r8, r6, r4
 8005f66:	ea47 0905 	orr.w	r9, r7, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005f6a:	788e      	ldrb	r6, [r1, #2]
 8005f6c:	2500      	movs	r5, #0
 8005f6e:	0434      	lsls	r4, r6, #16
 8005f70:	ea48 0804 	orr.w	r8, r8, r4
 8005f74:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005f78:	78ce      	ldrb	r6, [r1, #3]
 8005f7a:	0a35      	lsrs	r5, r6, #8
 8005f7c:	0634      	lsls	r4, r6, #24
 8005f7e:	ea48 0804 	orr.w	r8, r8, r4
 8005f82:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005f86:	f891 b004 	ldrb.w	fp, [r1, #4]
 8005f8a:	ea48 0803 	orr.w	r8, r8, r3
 8005f8e:	ea49 090b 	orr.w	r9, r9, fp
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005f92:	794e      	ldrb	r6, [r1, #5]
 8005f94:	0235      	lsls	r5, r6, #8
 8005f96:	ea48 0803 	orr.w	r8, r8, r3
 8005f9a:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005f9e:	798e      	ldrb	r6, [r1, #6]
 8005fa0:	0435      	lsls	r5, r6, #16
 8005fa2:	ea48 0803 	orr.w	r8, r8, r3
 8005fa6:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005faa:	79ce      	ldrb	r6, [r1, #7]
 8005fac:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 8005fae:	ea43 0408 	orr.w	r4, r3, r8
 8005fb2:	ea45 0509 	orr.w	r5, r5, r9
 8005fb6:	e9c0 4514 	strd	r4, r5, [r0, #80]	; 0x50
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005fba:	f891 8008 	ldrb.w	r8, [r1, #8]
 8005fbe:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005fc2:	7a4e      	ldrb	r6, [r1, #9]
 8005fc4:	2500      	movs	r5, #0
 8005fc6:	0234      	lsls	r4, r6, #8
 8005fc8:	ea48 0804 	orr.w	r8, r8, r4
 8005fcc:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005fd0:	7a8e      	ldrb	r6, [r1, #10]
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	0434      	lsls	r4, r6, #16
 8005fd6:	ea48 0804 	orr.w	r8, r8, r4
 8005fda:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005fde:	7ace      	ldrb	r6, [r1, #11]
 8005fe0:	0a35      	lsrs	r5, r6, #8
 8005fe2:	0634      	lsls	r4, r6, #24
 8005fe4:	ea48 0804 	orr.w	r8, r8, r4
 8005fe8:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005fec:	7b0f      	ldrb	r7, [r1, #12]
 8005fee:	ea48 0803 	orr.w	r8, r8, r3
 8005ff2:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005ff6:	7b4e      	ldrb	r6, [r1, #13]
 8005ff8:	0235      	lsls	r5, r6, #8
 8005ffa:	ea48 0803 	orr.w	r8, r8, r3
 8005ffe:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006002:	7b8e      	ldrb	r6, [r1, #14]
 8006004:	0435      	lsls	r5, r6, #16
 8006006:	ea48 0803 	orr.w	r8, r8, r3
 800600a:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800600e:	7bce      	ldrb	r6, [r1, #15]
 8006010:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 8006012:	ea43 0408 	orr.w	r4, r3, r8
 8006016:	ea45 0509 	orr.w	r5, r5, r9
 800601a:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800601e:	f891 8010 	ldrb.w	r8, [r1, #16]
 8006022:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006026:	7c4e      	ldrb	r6, [r1, #17]
 8006028:	2500      	movs	r5, #0
 800602a:	0234      	lsls	r4, r6, #8
 800602c:	ea48 0804 	orr.w	r8, r8, r4
 8006030:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006034:	7c8e      	ldrb	r6, [r1, #18]
 8006036:	2500      	movs	r5, #0
 8006038:	0434      	lsls	r4, r6, #16
 800603a:	ea48 0804 	orr.w	r8, r8, r4
 800603e:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006042:	7cce      	ldrb	r6, [r1, #19]
 8006044:	0a35      	lsrs	r5, r6, #8
 8006046:	0634      	lsls	r4, r6, #24
 8006048:	ea48 0804 	orr.w	r8, r8, r4
 800604c:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006050:	7d0f      	ldrb	r7, [r1, #20]
 8006052:	ea48 0803 	orr.w	r8, r8, r3
 8006056:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800605a:	7d4e      	ldrb	r6, [r1, #21]
 800605c:	0235      	lsls	r5, r6, #8
 800605e:	ea48 0803 	orr.w	r8, r8, r3
 8006062:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006066:	7d8e      	ldrb	r6, [r1, #22]
 8006068:	0435      	lsls	r5, r6, #16
 800606a:	ea48 0803 	orr.w	r8, r8, r3
 800606e:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006072:	7dce      	ldrb	r6, [r1, #23]
 8006074:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 8006076:	ea43 0408 	orr.w	r4, r3, r8
 800607a:	ea45 0509 	orr.w	r5, r5, r9
 800607e:	e9c0 4518 	strd	r4, r5, [r0, #96]	; 0x60
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006082:	f891 8018 	ldrb.w	r8, [r1, #24]
 8006086:	f04f 0900 	mov.w	r9, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800608a:	7e4e      	ldrb	r6, [r1, #25]
 800608c:	2500      	movs	r5, #0
 800608e:	0234      	lsls	r4, r6, #8
 8006090:	ea48 0804 	orr.w	r8, r8, r4
 8006094:	ea49 0905 	orr.w	r9, r9, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006098:	7e8e      	ldrb	r6, [r1, #26]
 800609a:	2500      	movs	r5, #0
 800609c:	0434      	lsls	r4, r6, #16
 800609e:	ea48 0804 	orr.w	r8, r8, r4
 80060a2:	ea49 0905 	orr.w	r9, r9, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80060a6:	7ece      	ldrb	r6, [r1, #27]
 80060a8:	0a35      	lsrs	r5, r6, #8
 80060aa:	0634      	lsls	r4, r6, #24
 80060ac:	ea48 0804 	orr.w	r8, r8, r4
 80060b0:	ea49 0905 	orr.w	r9, r9, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80060b4:	7f0f      	ldrb	r7, [r1, #28]
 80060b6:	ea48 0803 	orr.w	r8, r8, r3
 80060ba:	ea49 0907 	orr.w	r9, r9, r7
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80060be:	7f4e      	ldrb	r6, [r1, #29]
 80060c0:	0235      	lsls	r5, r6, #8
 80060c2:	ea48 0803 	orr.w	r8, r8, r3
 80060c6:	ea49 0905 	orr.w	r9, r9, r5
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80060ca:	7f8e      	ldrb	r6, [r1, #30]
 80060cc:	0435      	lsls	r5, r6, #16
 80060ce:	ea43 0408 	orr.w	r4, r3, r8
 80060d2:	ea45 0509 	orr.w	r5, r5, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80060d6:	7fce      	ldrb	r6, [r1, #31]
 80060d8:	ea4f 6906 	mov.w	r9, r6, lsl #24
      this->w = u_w.real;
 80060dc:	431c      	orrs	r4, r3
 80060de:	ea45 0509 	orr.w	r5, r5, r9
 80060e2:	e9c0 451a 	strd	r4, r5, [r0, #104]	; 0x68
    }
 80060e6:	f102 0038 	add.w	r0, r2, #56	; 0x38
 80060ea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060ee:	4770      	bx	lr

080060f0 <_ZN8nav_msgs8Odometry11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	b09d      	sub	sp, #116	; 0x74
 80060f6:	9014      	str	r0, [sp, #80]	; 0x50
      offset += this->header.deserialize(inbuffer + offset);
 80060f8:	1d04      	adds	r4, r0, #4
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80060fa:	780b      	ldrb	r3, [r1, #0]
 80060fc:	6063      	str	r3, [r4, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80060fe:	784a      	ldrb	r2, [r1, #1]
 8006100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006104:	6063      	str	r3, [r4, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006106:	788a      	ldrb	r2, [r1, #2]
 8006108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800610c:	6063      	str	r3, [r4, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800610e:	78ca      	ldrb	r2, [r1, #3]
 8006110:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006114:	6063      	str	r3, [r4, #4]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006116:	790b      	ldrb	r3, [r1, #4]
 8006118:	60a3      	str	r3, [r4, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800611a:	794a      	ldrb	r2, [r1, #5]
 800611c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006120:	60a3      	str	r3, [r4, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006122:	798a      	ldrb	r2, [r1, #6]
 8006124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006128:	60a3      	str	r3, [r4, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800612a:	79ca      	ldrb	r2, [r1, #7]
 800612c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006130:	60a3      	str	r3, [r4, #8]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8006132:	7a0b      	ldrb	r3, [r1, #8]
 8006134:	60e3      	str	r3, [r4, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006136:	7a4a      	ldrb	r2, [r1, #9]
 8006138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800613c:	60e3      	str	r3, [r4, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800613e:	7a8a      	ldrb	r2, [r1, #10]
 8006140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006144:	60e3      	str	r3, [r4, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006146:	7aca      	ldrb	r2, [r1, #11]
 8006148:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800614c:	60e3      	str	r3, [r4, #12]
    var = 0;
 800614e:	2000      	movs	r0, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8006150:	4602      	mov	r2, r0
 8006152:	2a03      	cmp	r2, #3
 8006154:	d806      	bhi.n	8006164 <_ZN8nav_msgs8Odometry11deserializeEPh+0x74>
      var |= (arr[i] << (8 * i));
 8006156:	188b      	adds	r3, r1, r2
 8006158:	7b1b      	ldrb	r3, [r3, #12]
 800615a:	00d5      	lsls	r5, r2, #3
 800615c:	40ab      	lsls	r3, r5
 800615e:	4318      	orrs	r0, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8006160:	3201      	adds	r2, #1
 8006162:	e7f6      	b.n	8006152 <_ZN8nav_msgs8Odometry11deserializeEPh+0x62>
 8006164:	2310      	movs	r3, #16
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8006166:	f100 0210 	add.w	r2, r0, #16
 800616a:	429a      	cmp	r2, r3
 800616c:	d904      	bls.n	8006178 <_ZN8nav_msgs8Odometry11deserializeEPh+0x88>
          inbuffer[k-1]=inbuffer[k];
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	5ccd      	ldrb	r5, [r1, r3]
 8006172:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8006174:	3301      	adds	r3, #1
 8006176:	e7f6      	b.n	8006166 <_ZN8nav_msgs8Odometry11deserializeEPh+0x76>
      inbuffer[offset+length_frame_id-1]=0;
 8006178:	300f      	adds	r0, #15
 800617a:	2300      	movs	r3, #0
 800617c:	540b      	strb	r3, [r1, r0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800617e:	f101 000f 	add.w	r0, r1, #15
 8006182:	6120      	str	r0, [r4, #16]
    var = 0;
 8006184:	4618      	mov	r0, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8006186:	2b03      	cmp	r3, #3
 8006188:	d806      	bhi.n	8006198 <_ZN8nav_msgs8Odometry11deserializeEPh+0xa8>
      var |= (arr[i] << (8 * i));
 800618a:	18cc      	adds	r4, r1, r3
 800618c:	5ca4      	ldrb	r4, [r4, r2]
 800618e:	00dd      	lsls	r5, r3, #3
 8006190:	40ac      	lsls	r4, r5
 8006192:	4320      	orrs	r0, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8006194:	3301      	adds	r3, #1
 8006196:	e7f6      	b.n	8006186 <_ZN8nav_msgs8Odometry11deserializeEPh+0x96>
      offset += 4;
 8006198:	3204      	adds	r2, #4
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800619a:	4613      	mov	r3, r2
 800619c:	eb02 0c00 	add.w	ip, r2, r0
 80061a0:	4563      	cmp	r3, ip
 80061a2:	d204      	bcs.n	80061ae <_ZN8nav_msgs8Odometry11deserializeEPh+0xbe>
          inbuffer[k-1]=inbuffer[k];
 80061a4:	1e5c      	subs	r4, r3, #1
 80061a6:	5ccd      	ldrb	r5, [r1, r3]
 80061a8:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80061aa:	3301      	adds	r3, #1
 80061ac:	e7f6      	b.n	800619c <_ZN8nav_msgs8Odometry11deserializeEPh+0xac>
      inbuffer[offset+length_child_frame_id-1]=0;
 80061ae:	f10c 33ff 	add.w	r3, ip, #4294967295
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	54c8      	strb	r0, [r1, r3]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80061b8:	3a01      	subs	r2, #1
 80061ba:	440a      	add	r2, r1
 80061bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80061be:	61aa      	str	r2, [r5, #24]
      offset += this->pose.deserialize(inbuffer + offset);
 80061c0:	f105 0e20 	add.w	lr, r5, #32
 80061c4:	eb01 040c 	add.w	r4, r1, ip
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80061c8:	f811 600c 	ldrb.w	r6, [r1, ip]
 80061cc:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80061ce:	f894 8001 	ldrb.w	r8, [r4, #1]
 80061d2:	2300      	movs	r3, #0
 80061d4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80061d8:	4332      	orrs	r2, r6
 80061da:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80061dc:	f894 8002 	ldrb.w	r8, [r4, #2]
 80061e0:	2700      	movs	r7, #0
 80061e2:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80061e6:	ea42 0806 	orr.w	r8, r2, r6
 80061ea:	ea43 0907 	orr.w	r9, r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80061ee:	78e6      	ldrb	r6, [r4, #3]
 80061f0:	0a33      	lsrs	r3, r6, #8
 80061f2:	0632      	lsls	r2, r6, #24
 80061f4:	ea42 0208 	orr.w	r2, r2, r8
 80061f8:	ea43 0309 	orr.w	r3, r3, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80061fc:	f04f 0800 	mov.w	r8, #0
 8006200:	f894 9004 	ldrb.w	r9, [r4, #4]
 8006204:	ea48 0802 	orr.w	r8, r8, r2
 8006208:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800620c:	7966      	ldrb	r6, [r4, #5]
 800620e:	2200      	movs	r2, #0
 8006210:	0233      	lsls	r3, r6, #8
 8006212:	ea48 0802 	orr.w	r8, r8, r2
 8006216:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800621a:	79a6      	ldrb	r6, [r4, #6]
 800621c:	2200      	movs	r2, #0
 800621e:	0433      	lsls	r3, r6, #16
 8006220:	ea48 0802 	orr.w	r8, r8, r2
 8006224:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006228:	79e6      	ldrb	r6, [r4, #7]
 800622a:	2200      	movs	r2, #0
 800622c:	0633      	lsls	r3, r6, #24
      this->x = u_x.real;
 800622e:	ea42 0208 	orr.w	r2, r2, r8
 8006232:	ea43 0309 	orr.w	r3, r3, r9
 8006236:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800623a:	7a26      	ldrb	r6, [r4, #8]
 800623c:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800623e:	f894 8009 	ldrb.w	r8, [r4, #9]
 8006242:	2300      	movs	r3, #0
 8006244:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8006248:	4332      	orrs	r2, r6
 800624a:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800624c:	f894 800a 	ldrb.w	r8, [r4, #10]
 8006250:	2700      	movs	r7, #0
 8006252:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8006256:	ea42 0806 	orr.w	r8, r2, r6
 800625a:	ea43 0907 	orr.w	r9, r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800625e:	7ae6      	ldrb	r6, [r4, #11]
 8006260:	0a33      	lsrs	r3, r6, #8
 8006262:	0632      	lsls	r2, r6, #24
 8006264:	ea42 0208 	orr.w	r2, r2, r8
 8006268:	ea43 0309 	orr.w	r3, r3, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800626c:	f04f 0800 	mov.w	r8, #0
 8006270:	f894 900c 	ldrb.w	r9, [r4, #12]
 8006274:	ea48 0802 	orr.w	r8, r8, r2
 8006278:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800627c:	7b66      	ldrb	r6, [r4, #13]
 800627e:	2200      	movs	r2, #0
 8006280:	0233      	lsls	r3, r6, #8
 8006282:	ea48 0802 	orr.w	r8, r8, r2
 8006286:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800628a:	7ba6      	ldrb	r6, [r4, #14]
 800628c:	2200      	movs	r2, #0
 800628e:	0433      	lsls	r3, r6, #16
 8006290:	ea48 0802 	orr.w	r8, r8, r2
 8006294:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006298:	7be6      	ldrb	r6, [r4, #15]
 800629a:	2200      	movs	r2, #0
 800629c:	0633      	lsls	r3, r6, #24
      this->y = u_y.real;
 800629e:	ea42 0208 	orr.w	r2, r2, r8
 80062a2:	ea43 0309 	orr.w	r3, r3, r9
 80062a6:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80062aa:	7c26      	ldrb	r6, [r4, #16]
 80062ac:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80062ae:	f894 8011 	ldrb.w	r8, [r4, #17]
 80062b2:	2300      	movs	r3, #0
 80062b4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80062b8:	4332      	orrs	r2, r6
 80062ba:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80062bc:	f894 8012 	ldrb.w	r8, [r4, #18]
 80062c0:	2700      	movs	r7, #0
 80062c2:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80062c6:	ea42 0806 	orr.w	r8, r2, r6
 80062ca:	ea43 0907 	orr.w	r9, r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80062ce:	7ce6      	ldrb	r6, [r4, #19]
 80062d0:	0a33      	lsrs	r3, r6, #8
 80062d2:	0632      	lsls	r2, r6, #24
 80062d4:	ea42 0208 	orr.w	r2, r2, r8
 80062d8:	ea43 0309 	orr.w	r3, r3, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80062dc:	f04f 0800 	mov.w	r8, #0
 80062e0:	f894 9014 	ldrb.w	r9, [r4, #20]
 80062e4:	ea48 0802 	orr.w	r8, r8, r2
 80062e8:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80062ec:	7d66      	ldrb	r6, [r4, #21]
 80062ee:	2200      	movs	r2, #0
 80062f0:	0233      	lsls	r3, r6, #8
 80062f2:	ea48 0802 	orr.w	r8, r8, r2
 80062f6:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80062fa:	7da6      	ldrb	r6, [r4, #22]
 80062fc:	2200      	movs	r2, #0
 80062fe:	0433      	lsls	r3, r6, #16
 8006300:	ea48 0802 	orr.w	r8, r8, r2
 8006304:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006308:	7de6      	ldrb	r6, [r4, #23]
 800630a:	2200      	movs	r2, #0
 800630c:	0633      	lsls	r3, r6, #24
      this->z = u_z.real;
 800630e:	ea42 0208 	orr.w	r2, r2, r8
 8006312:	ea43 0309 	orr.w	r3, r3, r9
 8006316:	e9c5 2312 	strd	r2, r3, [r5, #72]	; 0x48
      offset += this->orientation.deserialize(inbuffer + offset);
 800631a:	3550      	adds	r5, #80	; 0x50
 800631c:	f104 0018 	add.w	r0, r4, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006320:	7e26      	ldrb	r6, [r4, #24]
 8006322:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006324:	f890 8001 	ldrb.w	r8, [r0, #1]
 8006328:	2300      	movs	r3, #0
 800632a:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800632e:	ea46 0802 	orr.w	r8, r6, r2
 8006332:	ea47 0903 	orr.w	r9, r7, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006336:	7886      	ldrb	r6, [r0, #2]
 8006338:	2300      	movs	r3, #0
 800633a:	0432      	lsls	r2, r6, #16
 800633c:	ea48 0802 	orr.w	r8, r8, r2
 8006340:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006344:	78c6      	ldrb	r6, [r0, #3]
 8006346:	0a33      	lsrs	r3, r6, #8
 8006348:	0632      	lsls	r2, r6, #24
 800634a:	ea42 0208 	orr.w	r2, r2, r8
 800634e:	ea43 0309 	orr.w	r3, r3, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	f890 9004 	ldrb.w	r9, [r0, #4]
 800635a:	ea48 0802 	orr.w	r8, r8, r2
 800635e:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006362:	7946      	ldrb	r6, [r0, #5]
 8006364:	2200      	movs	r2, #0
 8006366:	0233      	lsls	r3, r6, #8
 8006368:	ea48 0802 	orr.w	r8, r8, r2
 800636c:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006370:	7986      	ldrb	r6, [r0, #6]
 8006372:	2200      	movs	r2, #0
 8006374:	0433      	lsls	r3, r6, #16
 8006376:	ea48 0802 	orr.w	r8, r8, r2
 800637a:	ea49 0903 	orr.w	r9, r9, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800637e:	79c6      	ldrb	r6, [r0, #7]
 8006380:	2200      	movs	r2, #0
 8006382:	0633      	lsls	r3, r6, #24
      this->x = u_x.real;
 8006384:	ea42 0208 	orr.w	r2, r2, r8
 8006388:	ea43 0309 	orr.w	r3, r3, r9
 800638c:	e9c5 2302 	strd	r2, r3, [r5, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006390:	f890 8008 	ldrb.w	r8, [r0, #8]
 8006394:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006398:	7a46      	ldrb	r6, [r0, #9]
 800639a:	2300      	movs	r3, #0
 800639c:	0232      	lsls	r2, r6, #8
 800639e:	ea48 0802 	orr.w	r8, r8, r2
 80063a2:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80063a6:	7a86      	ldrb	r6, [r0, #10]
 80063a8:	2300      	movs	r3, #0
 80063aa:	0432      	lsls	r2, r6, #16
 80063ac:	ea48 0802 	orr.w	r8, r8, r2
 80063b0:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80063b4:	7ac6      	ldrb	r6, [r0, #11]
 80063b6:	0a33      	lsrs	r3, r6, #8
 80063b8:	0632      	lsls	r2, r6, #24
 80063ba:	ea42 0208 	orr.w	r2, r2, r8
 80063be:	ea43 0309 	orr.w	r3, r3, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80063c2:	f04f 0800 	mov.w	r8, #0
 80063c6:	f890 900c 	ldrb.w	r9, [r0, #12]
 80063ca:	ea48 0802 	orr.w	r8, r8, r2
 80063ce:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80063d2:	7b46      	ldrb	r6, [r0, #13]
 80063d4:	2200      	movs	r2, #0
 80063d6:	0233      	lsls	r3, r6, #8
 80063d8:	ea48 0802 	orr.w	r8, r8, r2
 80063dc:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80063e0:	7b86      	ldrb	r6, [r0, #14]
 80063e2:	2200      	movs	r2, #0
 80063e4:	0433      	lsls	r3, r6, #16
 80063e6:	ea48 0802 	orr.w	r8, r8, r2
 80063ea:	ea49 0903 	orr.w	r9, r9, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80063ee:	7bc6      	ldrb	r6, [r0, #15]
 80063f0:	2200      	movs	r2, #0
 80063f2:	0633      	lsls	r3, r6, #24
      this->y = u_y.real;
 80063f4:	ea42 0208 	orr.w	r2, r2, r8
 80063f8:	ea43 0309 	orr.w	r3, r3, r9
 80063fc:	e9c5 2304 	strd	r2, r3, [r5, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006400:	f890 8010 	ldrb.w	r8, [r0, #16]
 8006404:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006408:	7c46      	ldrb	r6, [r0, #17]
 800640a:	2300      	movs	r3, #0
 800640c:	0232      	lsls	r2, r6, #8
 800640e:	ea48 0802 	orr.w	r8, r8, r2
 8006412:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006416:	7c86      	ldrb	r6, [r0, #18]
 8006418:	2300      	movs	r3, #0
 800641a:	0432      	lsls	r2, r6, #16
 800641c:	ea48 0802 	orr.w	r8, r8, r2
 8006420:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006424:	7cc6      	ldrb	r6, [r0, #19]
 8006426:	0a33      	lsrs	r3, r6, #8
 8006428:	0632      	lsls	r2, r6, #24
 800642a:	ea42 0208 	orr.w	r2, r2, r8
 800642e:	ea43 0309 	orr.w	r3, r3, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006432:	f04f 0800 	mov.w	r8, #0
 8006436:	f890 9014 	ldrb.w	r9, [r0, #20]
 800643a:	ea48 0802 	orr.w	r8, r8, r2
 800643e:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006442:	7d46      	ldrb	r6, [r0, #21]
 8006444:	2200      	movs	r2, #0
 8006446:	0233      	lsls	r3, r6, #8
 8006448:	ea48 0802 	orr.w	r8, r8, r2
 800644c:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006450:	7d86      	ldrb	r6, [r0, #22]
 8006452:	2200      	movs	r2, #0
 8006454:	0433      	lsls	r3, r6, #16
 8006456:	ea48 0802 	orr.w	r8, r8, r2
 800645a:	ea49 0903 	orr.w	r9, r9, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800645e:	7dc6      	ldrb	r6, [r0, #23]
 8006460:	2200      	movs	r2, #0
 8006462:	0633      	lsls	r3, r6, #24
      this->z = u_z.real;
 8006464:	ea42 0208 	orr.w	r2, r2, r8
 8006468:	ea43 0309 	orr.w	r3, r3, r9
 800646c:	e9c5 2306 	strd	r2, r3, [r5, #24]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006470:	f890 8018 	ldrb.w	r8, [r0, #24]
 8006474:	f04f 0900 	mov.w	r9, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006478:	7e46      	ldrb	r6, [r0, #25]
 800647a:	2300      	movs	r3, #0
 800647c:	0232      	lsls	r2, r6, #8
 800647e:	ea48 0802 	orr.w	r8, r8, r2
 8006482:	ea49 0903 	orr.w	r9, r9, r3
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006486:	7e86      	ldrb	r6, [r0, #26]
 8006488:	2300      	movs	r3, #0
 800648a:	0432      	lsls	r2, r6, #16
 800648c:	ea48 0802 	orr.w	r8, r8, r2
 8006490:	ea49 0903 	orr.w	r9, r9, r3
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006494:	7ec6      	ldrb	r6, [r0, #27]
 8006496:	0a33      	lsrs	r3, r6, #8
 8006498:	0632      	lsls	r2, r6, #24
 800649a:	ea42 0208 	orr.w	r2, r2, r8
 800649e:	ea43 0309 	orr.w	r3, r3, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80064a2:	f04f 0800 	mov.w	r8, #0
 80064a6:	f890 901c 	ldrb.w	r9, [r0, #28]
 80064aa:	ea48 0802 	orr.w	r8, r8, r2
 80064ae:	ea49 0903 	orr.w	r9, r9, r3
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80064b2:	7f46      	ldrb	r6, [r0, #29]
 80064b4:	2200      	movs	r2, #0
 80064b6:	0233      	lsls	r3, r6, #8
 80064b8:	ea48 0802 	orr.w	r8, r8, r2
 80064bc:	ea49 0903 	orr.w	r9, r9, r3
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80064c0:	7f86      	ldrb	r6, [r0, #30]
 80064c2:	2200      	movs	r2, #0
 80064c4:	0433      	lsls	r3, r6, #16
 80064c6:	ea48 0802 	orr.w	r8, r8, r2
 80064ca:	ea49 0903 	orr.w	r9, r9, r3
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80064ce:	7fc6      	ldrb	r6, [r0, #31]
 80064d0:	2200      	movs	r2, #0
 80064d2:	0633      	lsls	r3, r6, #24
      this->w = u_w.real;
 80064d4:	ea42 0208 	orr.w	r2, r2, r8
 80064d8:	ea43 0309 	orr.w	r3, r3, r9
 80064dc:	e9c5 2308 	strd	r2, r3, [r5, #32]
      for( uint32_t i = 0; i < 36; i++){
 80064e0:	2500      	movs	r5, #0
      offset += this->pose.deserialize(inbuffer + offset);
 80064e2:	2038      	movs	r0, #56	; 0x38
 80064e4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80064e8:	468c      	mov	ip, r1
      for( uint32_t i = 0; i < 36; i++){
 80064ea:	2d23      	cmp	r5, #35	; 0x23
 80064ec:	d859      	bhi.n	80065a2 <_ZN8nav_msgs8Odometry11deserializeEPh+0x4b2>
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80064ee:	5c22      	ldrb	r2, [r4, r0]
 80064f0:	2300      	movs	r3, #0
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80064f2:	1c41      	adds	r1, r0, #1
 80064f4:	5c66      	ldrb	r6, [r4, r1]
 80064f6:	2100      	movs	r1, #0
 80064f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80064fa:	0231      	lsls	r1, r6, #8
 80064fc:	910a      	str	r1, [sp, #40]	; 0x28
 80064fe:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006502:	4316      	orrs	r6, r2
 8006504:	431f      	orrs	r7, r3
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800650a:	1c81      	adds	r1, r0, #2
 800650c:	5c66      	ldrb	r6, [r4, r1]
 800650e:	2100      	movs	r1, #0
 8006510:	910d      	str	r1, [sp, #52]	; 0x34
 8006512:	0431      	lsls	r1, r6, #16
 8006514:	910c      	str	r1, [sp, #48]	; 0x30
 8006516:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 800651a:	4316      	orrs	r6, r2
 800651c:	431f      	orrs	r7, r3
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006522:	1cc1      	adds	r1, r0, #3
 8006524:	5c66      	ldrb	r6, [r4, r1]
 8006526:	ea4f 2b16 	mov.w	fp, r6, lsr #8
 800652a:	ea4f 6a06 	mov.w	sl, r6, lsl #24
 800652e:	ea42 020a 	orr.w	r2, r2, sl
 8006532:	ea43 030b 	orr.w	r3, r3, fp
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006536:	1d01      	adds	r1, r0, #4
 8006538:	f814 9001 	ldrb.w	r9, [r4, r1]
 800653c:	f04f 0800 	mov.w	r8, #0
 8006540:	ea42 0208 	orr.w	r2, r2, r8
 8006544:	ea43 0309 	orr.w	r3, r3, r9
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006548:	1d41      	adds	r1, r0, #5
 800654a:	5c66      	ldrb	r6, [r4, r1]
 800654c:	0231      	lsls	r1, r6, #8
 800654e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006550:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006554:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8006558:	4316      	orrs	r6, r2
 800655a:	431f      	orrs	r7, r3
 800655c:	4632      	mov	r2, r6
 800655e:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006560:	1d81      	adds	r1, r0, #6
 8006562:	5c66      	ldrb	r6, [r4, r1]
 8006564:	0431      	lsls	r1, r6, #16
 8006566:	9111      	str	r1, [sp, #68]	; 0x44
 8006568:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800656c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006570:	4316      	orrs	r6, r2
 8006572:	431f      	orrs	r7, r3
 8006574:	4632      	mov	r2, r6
 8006576:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006578:	1dc1      	adds	r1, r0, #7
 800657a:	5c66      	ldrb	r6, [r4, r1]
 800657c:	0631      	lsls	r1, r6, #24
 800657e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006580:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      this->covariance[i] = u_covariancei.real;
 8006584:	f105 010b 	add.w	r1, r5, #11
 8006588:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 800658c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006590:	4316      	orrs	r6, r2
 8006592:	431f      	orrs	r7, r3
 8006594:	4632      	mov	r2, r6
 8006596:	463b      	mov	r3, r7
 8006598:	e9c1 2300 	strd	r2, r3, [r1]
      offset += sizeof(this->covariance[i]);
 800659c:	3008      	adds	r0, #8
      for( uint32_t i = 0; i < 36; i++){
 800659e:	3501      	adds	r5, #1
 80065a0:	e7a3      	b.n	80064ea <_ZN8nav_msgs8Odometry11deserializeEPh+0x3fa>
 80065a2:	4661      	mov	r1, ip
 80065a4:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 80065a8:	4484      	add	ip, r0
      offset += this->twist.deserialize(inbuffer + offset);
 80065aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065ac:	f502 75cc 	add.w	r5, r2, #408	; 0x198
 80065b0:	eb01 040c 	add.w	r4, r1, ip
      offset += this->linear.deserialize(inbuffer + offset);
 80065b4:	f502 7ed4 	add.w	lr, r2, #424	; 0x1a8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80065b8:	f811 000c 	ldrb.w	r0, [r1, ip]
 80065bc:	2100      	movs	r1, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80065be:	7866      	ldrb	r6, [r4, #1]
 80065c0:	2300      	movs	r3, #0
 80065c2:	0232      	lsls	r2, r6, #8
 80065c4:	4310      	orrs	r0, r2
 80065c6:	4319      	orrs	r1, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80065c8:	78a6      	ldrb	r6, [r4, #2]
 80065ca:	2300      	movs	r3, #0
 80065cc:	0432      	lsls	r2, r6, #16
 80065ce:	4302      	orrs	r2, r0
 80065d0:	430b      	orrs	r3, r1
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80065d2:	78e6      	ldrb	r6, [r4, #3]
 80065d4:	0a31      	lsrs	r1, r6, #8
 80065d6:	0630      	lsls	r0, r6, #24
 80065d8:	4302      	orrs	r2, r0
 80065da:	430b      	orrs	r3, r1
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80065dc:	f04f 0a00 	mov.w	sl, #0
 80065e0:	f894 b004 	ldrb.w	fp, [r4, #4]
 80065e4:	ea42 020a 	orr.w	r2, r2, sl
 80065e8:	ea43 030b 	orr.w	r3, r3, fp
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80065ec:	7966      	ldrb	r6, [r4, #5]
 80065ee:	0231      	lsls	r1, r6, #8
 80065f0:	4650      	mov	r0, sl
 80065f2:	4302      	orrs	r2, r0
 80065f4:	430b      	orrs	r3, r1
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80065f6:	79a6      	ldrb	r6, [r4, #6]
 80065f8:	0431      	lsls	r1, r6, #16
 80065fa:	4650      	mov	r0, sl
 80065fc:	4310      	orrs	r0, r2
 80065fe:	4319      	orrs	r1, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006600:	79e6      	ldrb	r6, [r4, #7]
 8006602:	0633      	lsls	r3, r6, #24
 8006604:	4652      	mov	r2, sl
      this->x = u_x.real;
 8006606:	4310      	orrs	r0, r2
 8006608:	4319      	orrs	r1, r3
 800660a:	e9ce 0102 	strd	r0, r1, [lr, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800660e:	7a20      	ldrb	r0, [r4, #8]
 8006610:	2100      	movs	r1, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006612:	7a66      	ldrb	r6, [r4, #9]
 8006614:	2300      	movs	r3, #0
 8006616:	0232      	lsls	r2, r6, #8
 8006618:	4310      	orrs	r0, r2
 800661a:	4319      	orrs	r1, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800661c:	7aa6      	ldrb	r6, [r4, #10]
 800661e:	2300      	movs	r3, #0
 8006620:	0432      	lsls	r2, r6, #16
 8006622:	4302      	orrs	r2, r0
 8006624:	430b      	orrs	r3, r1
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006626:	7ae6      	ldrb	r6, [r4, #11]
 8006628:	0a31      	lsrs	r1, r6, #8
 800662a:	0630      	lsls	r0, r6, #24
 800662c:	4302      	orrs	r2, r0
 800662e:	430b      	orrs	r3, r1
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006630:	7b27      	ldrb	r7, [r4, #12]
 8006632:	4656      	mov	r6, sl
 8006634:	4332      	orrs	r2, r6
 8006636:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006638:	7b66      	ldrb	r6, [r4, #13]
 800663a:	0231      	lsls	r1, r6, #8
 800663c:	4650      	mov	r0, sl
 800663e:	4302      	orrs	r2, r0
 8006640:	430b      	orrs	r3, r1
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006642:	7ba6      	ldrb	r6, [r4, #14]
 8006644:	0431      	lsls	r1, r6, #16
 8006646:	4650      	mov	r0, sl
 8006648:	4310      	orrs	r0, r2
 800664a:	4319      	orrs	r1, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800664c:	7be6      	ldrb	r6, [r4, #15]
 800664e:	0633      	lsls	r3, r6, #24
 8006650:	4652      	mov	r2, sl
      this->y = u_y.real;
 8006652:	4310      	orrs	r0, r2
 8006654:	4319      	orrs	r1, r3
 8006656:	e9ce 0104 	strd	r0, r1, [lr, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800665a:	7c20      	ldrb	r0, [r4, #16]
 800665c:	2100      	movs	r1, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800665e:	7c66      	ldrb	r6, [r4, #17]
 8006660:	2300      	movs	r3, #0
 8006662:	0232      	lsls	r2, r6, #8
 8006664:	4310      	orrs	r0, r2
 8006666:	4319      	orrs	r1, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006668:	7ca6      	ldrb	r6, [r4, #18]
 800666a:	2300      	movs	r3, #0
 800666c:	0432      	lsls	r2, r6, #16
 800666e:	4302      	orrs	r2, r0
 8006670:	430b      	orrs	r3, r1
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006672:	7ce6      	ldrb	r6, [r4, #19]
 8006674:	0a31      	lsrs	r1, r6, #8
 8006676:	0630      	lsls	r0, r6, #24
 8006678:	4302      	orrs	r2, r0
 800667a:	430b      	orrs	r3, r1
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800667c:	7d27      	ldrb	r7, [r4, #20]
 800667e:	4656      	mov	r6, sl
 8006680:	4332      	orrs	r2, r6
 8006682:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006684:	7d66      	ldrb	r6, [r4, #21]
 8006686:	0231      	lsls	r1, r6, #8
 8006688:	4650      	mov	r0, sl
 800668a:	4302      	orrs	r2, r0
 800668c:	430b      	orrs	r3, r1
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800668e:	7da6      	ldrb	r6, [r4, #22]
 8006690:	0431      	lsls	r1, r6, #16
 8006692:	4650      	mov	r0, sl
 8006694:	4310      	orrs	r0, r2
 8006696:	4319      	orrs	r1, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006698:	7de6      	ldrb	r6, [r4, #23]
 800669a:	0633      	lsls	r3, r6, #24
 800669c:	4652      	mov	r2, sl
      this->z = u_z.real;
 800669e:	4310      	orrs	r0, r2
 80066a0:	4319      	orrs	r1, r3
 80066a2:	e9ce 0106 	strd	r0, r1, [lr, #24]
      offset += this->angular.deserialize(inbuffer + offset);
 80066a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066a8:	f502 7ee4 	add.w	lr, r2, #456	; 0x1c8
 80066ac:	f104 0318 	add.w	r3, r4, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80066b0:	7e26      	ldrb	r6, [r4, #24]
 80066b2:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80066b4:	f893 8001 	ldrb.w	r8, [r3, #1]
 80066b8:	2100      	movs	r1, #0
 80066ba:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80066be:	4330      	orrs	r0, r6
 80066c0:	4339      	orrs	r1, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80066c2:	f893 8002 	ldrb.w	r8, [r3, #2]
 80066c6:	2700      	movs	r7, #0
 80066c8:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80066cc:	4306      	orrs	r6, r0
 80066ce:	430f      	orrs	r7, r1
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80066d0:	f893 8003 	ldrb.w	r8, [r3, #3]
 80066d4:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80066d8:	ea4f 6008 	mov.w	r0, r8, lsl #24
 80066dc:	4330      	orrs	r0, r6
 80066de:	4339      	orrs	r1, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80066e0:	791f      	ldrb	r7, [r3, #4]
 80066e2:	4656      	mov	r6, sl
 80066e4:	4330      	orrs	r0, r6
 80066e6:	4339      	orrs	r1, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80066e8:	f893 8005 	ldrb.w	r8, [r3, #5]
 80066ec:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80066f0:	4656      	mov	r6, sl
 80066f2:	4330      	orrs	r0, r6
 80066f4:	4339      	orrs	r1, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80066f6:	f893 8006 	ldrb.w	r8, [r3, #6]
 80066fa:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80066fe:	4656      	mov	r6, sl
 8006700:	4330      	orrs	r0, r6
 8006702:	4339      	orrs	r1, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006704:	f893 8007 	ldrb.w	r8, [r3, #7]
 8006708:	ea4f 6708 	mov.w	r7, r8, lsl #24
 800670c:	4656      	mov	r6, sl
      this->x = u_x.real;
 800670e:	4330      	orrs	r0, r6
 8006710:	4339      	orrs	r1, r7
 8006712:	e9ce 0102 	strd	r0, r1, [lr, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006716:	7a1e      	ldrb	r6, [r3, #8]
 8006718:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800671a:	f893 8009 	ldrb.w	r8, [r3, #9]
 800671e:	2100      	movs	r1, #0
 8006720:	ea4f 2008 	mov.w	r0, r8, lsl #8
 8006724:	4330      	orrs	r0, r6
 8006726:	4339      	orrs	r1, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006728:	f893 800a 	ldrb.w	r8, [r3, #10]
 800672c:	2700      	movs	r7, #0
 800672e:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8006732:	4306      	orrs	r6, r0
 8006734:	430f      	orrs	r7, r1
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006736:	f893 800b 	ldrb.w	r8, [r3, #11]
 800673a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800673e:	ea4f 6008 	mov.w	r0, r8, lsl #24
 8006742:	4330      	orrs	r0, r6
 8006744:	4339      	orrs	r1, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006746:	7b1f      	ldrb	r7, [r3, #12]
 8006748:	4656      	mov	r6, sl
 800674a:	4330      	orrs	r0, r6
 800674c:	4339      	orrs	r1, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800674e:	f893 800d 	ldrb.w	r8, [r3, #13]
 8006752:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8006756:	4656      	mov	r6, sl
 8006758:	4330      	orrs	r0, r6
 800675a:	4339      	orrs	r1, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800675c:	f893 800e 	ldrb.w	r8, [r3, #14]
 8006760:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8006764:	4656      	mov	r6, sl
 8006766:	4330      	orrs	r0, r6
 8006768:	4339      	orrs	r1, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800676a:	f893 800f 	ldrb.w	r8, [r3, #15]
 800676e:	ea4f 6708 	mov.w	r7, r8, lsl #24
 8006772:	4656      	mov	r6, sl
      this->y = u_y.real;
 8006774:	4330      	orrs	r0, r6
 8006776:	4339      	orrs	r1, r7
 8006778:	e9ce 0104 	strd	r0, r1, [lr, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800677c:	7c1e      	ldrb	r6, [r3, #16]
 800677e:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006780:	f893 8011 	ldrb.w	r8, [r3, #17]
 8006784:	2100      	movs	r1, #0
 8006786:	ea4f 2008 	mov.w	r0, r8, lsl #8
 800678a:	4330      	orrs	r0, r6
 800678c:	4339      	orrs	r1, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800678e:	f893 8012 	ldrb.w	r8, [r3, #18]
 8006792:	2700      	movs	r7, #0
 8006794:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8006798:	4306      	orrs	r6, r0
 800679a:	430f      	orrs	r7, r1
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800679c:	f893 8013 	ldrb.w	r8, [r3, #19]
 80067a0:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80067a4:	ea4f 6008 	mov.w	r0, r8, lsl #24
 80067a8:	4330      	orrs	r0, r6
 80067aa:	4339      	orrs	r1, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80067ac:	7d1f      	ldrb	r7, [r3, #20]
 80067ae:	4656      	mov	r6, sl
 80067b0:	4330      	orrs	r0, r6
 80067b2:	4339      	orrs	r1, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80067b4:	f893 8015 	ldrb.w	r8, [r3, #21]
 80067b8:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80067bc:	4656      	mov	r6, sl
 80067be:	4330      	orrs	r0, r6
 80067c0:	4339      	orrs	r1, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80067c2:	f893 8016 	ldrb.w	r8, [r3, #22]
 80067c6:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80067ca:	4656      	mov	r6, sl
 80067cc:	4330      	orrs	r0, r6
 80067ce:	4339      	orrs	r1, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80067d0:	7dde      	ldrb	r6, [r3, #23]
 80067d2:	0633      	lsls	r3, r6, #24
 80067d4:	4652      	mov	r2, sl
      this->z = u_z.real;
 80067d6:	4310      	orrs	r0, r2
 80067d8:	4319      	orrs	r1, r3
 80067da:	e9ce 0106 	strd	r0, r1, [lr, #24]
      for( uint32_t i = 0; i < 36; i++){
 80067de:	4651      	mov	r1, sl
      offset += this->twist.deserialize(inbuffer + offset);
 80067e0:	2030      	movs	r0, #48	; 0x30
 80067e2:	46ae      	mov	lr, r5
      for( uint32_t i = 0; i < 36; i++){
 80067e4:	2923      	cmp	r1, #35	; 0x23
 80067e6:	d858      	bhi.n	800689a <_ZN8nav_msgs8Odometry11deserializeEPh+0x7aa>
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80067e8:	5c22      	ldrb	r2, [r4, r0]
 80067ea:	2300      	movs	r3, #0
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80067ec:	1c46      	adds	r6, r0, #1
 80067ee:	5da6      	ldrb	r6, [r4, r6]
 80067f0:	2500      	movs	r5, #0
 80067f2:	9501      	str	r5, [sp, #4]
 80067f4:	0235      	lsls	r5, r6, #8
 80067f6:	9500      	str	r5, [sp, #0]
 80067f8:	e89d 0060 	ldmia.w	sp, {r5, r6}
 80067fc:	4315      	orrs	r5, r2
 80067fe:	431e      	orrs	r6, r3
 8006800:	462a      	mov	r2, r5
 8006802:	4633      	mov	r3, r6
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006804:	1c86      	adds	r6, r0, #2
 8006806:	5da6      	ldrb	r6, [r4, r6]
 8006808:	2500      	movs	r5, #0
 800680a:	9503      	str	r5, [sp, #12]
 800680c:	0435      	lsls	r5, r6, #16
 800680e:	9502      	str	r5, [sp, #8]
 8006810:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 8006814:	4315      	orrs	r5, r2
 8006816:	431e      	orrs	r6, r3
 8006818:	4633      	mov	r3, r6
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800681a:	1cc6      	adds	r6, r0, #3
 800681c:	5da6      	ldrb	r6, [r4, r6]
 800681e:	ea4f 2b16 	mov.w	fp, r6, lsr #8
 8006822:	ea4f 6a06 	mov.w	sl, r6, lsl #24
 8006826:	ea45 020a 	orr.w	r2, r5, sl
 800682a:	ea43 030b 	orr.w	r3, r3, fp
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800682e:	1d06      	adds	r6, r0, #4
 8006830:	f814 9006 	ldrb.w	r9, [r4, r6]
 8006834:	f04f 0800 	mov.w	r8, #0
 8006838:	ea42 0208 	orr.w	r2, r2, r8
 800683c:	ea43 0309 	orr.w	r3, r3, r9
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006840:	1d46      	adds	r6, r0, #5
 8006842:	5da6      	ldrb	r6, [r4, r6]
 8006844:	0235      	lsls	r5, r6, #8
 8006846:	9505      	str	r5, [sp, #20]
 8006848:	f8cd 8010 	str.w	r8, [sp, #16]
 800684c:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8006850:	4315      	orrs	r5, r2
 8006852:	431e      	orrs	r6, r3
 8006854:	462a      	mov	r2, r5
 8006856:	4633      	mov	r3, r6
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006858:	1d86      	adds	r6, r0, #6
 800685a:	5da6      	ldrb	r6, [r4, r6]
 800685c:	0435      	lsls	r5, r6, #16
 800685e:	9507      	str	r5, [sp, #28]
 8006860:	f8cd 8018 	str.w	r8, [sp, #24]
 8006864:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 8006868:	4315      	orrs	r5, r2
 800686a:	431e      	orrs	r6, r3
 800686c:	462a      	mov	r2, r5
 800686e:	4633      	mov	r3, r6
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006870:	1dc6      	adds	r6, r0, #7
 8006872:	5da6      	ldrb	r6, [r4, r6]
 8006874:	0635      	lsls	r5, r6, #24
 8006876:	9509      	str	r5, [sp, #36]	; 0x24
 8006878:	f8cd 8020 	str.w	r8, [sp, #32]
      this->covariance[i] = u_covariancei.real;
 800687c:	f101 060a 	add.w	r6, r1, #10
 8006880:	eb0e 07c6 	add.w	r7, lr, r6, lsl #3
 8006884:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8006888:	4315      	orrs	r5, r2
 800688a:	431e      	orrs	r6, r3
 800688c:	462a      	mov	r2, r5
 800688e:	4633      	mov	r3, r6
 8006890:	e9c7 2300 	strd	r2, r3, [r7]
      offset += sizeof(this->covariance[i]);
 8006894:	3008      	adds	r0, #8
      for( uint32_t i = 0; i < 36; i++){
 8006896:	3101      	adds	r1, #1
 8006898:	e7a4      	b.n	80067e4 <_ZN8nav_msgs8Odometry11deserializeEPh+0x6f4>
    }
 800689a:	4460      	add	r0, ip
 800689c:	b01d      	add	sp, #116	; 0x74
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068a2 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80068a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a6:	b08f      	sub	sp, #60	; 0x3c
 80068a8:	4604      	mov	r4, r0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80068aa:	780e      	ldrb	r6, [r1, #0]
 80068ac:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80068ae:	f891 8001 	ldrb.w	r8, [r1, #1]
 80068b2:	2300      	movs	r3, #0
 80068b4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80068b8:	4316      	orrs	r6, r2
 80068ba:	431f      	orrs	r7, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80068bc:	f891 8002 	ldrb.w	r8, [r1, #2]
 80068c0:	2300      	movs	r3, #0
 80068c2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80068c6:	4332      	orrs	r2, r6
 80068c8:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80068ca:	f891 8003 	ldrb.w	r8, [r1, #3]
 80068ce:	ea4f 2718 	mov.w	r7, r8, lsr #8
 80068d2:	ea4f 6608 	mov.w	r6, r8, lsl #24
 80068d6:	4332      	orrs	r2, r6
 80068d8:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80068da:	2500      	movs	r5, #0
 80068dc:	790e      	ldrb	r6, [r1, #4]
 80068de:	432a      	orrs	r2, r5
 80068e0:	4333      	orrs	r3, r6
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80068e2:	f891 8005 	ldrb.w	r8, [r1, #5]
 80068e6:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80068ea:	432a      	orrs	r2, r5
 80068ec:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80068ee:	f891 8006 	ldrb.w	r8, [r1, #6]
 80068f2:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80068f6:	462e      	mov	r6, r5
 80068f8:	4316      	orrs	r6, r2
 80068fa:	431f      	orrs	r7, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80068fc:	f891 8007 	ldrb.w	r8, [r1, #7]
 8006900:	ea4f 6308 	mov.w	r3, r8, lsl #24
      this->x = u_x.real;
 8006904:	432e      	orrs	r6, r5
 8006906:	431f      	orrs	r7, r3
 8006908:	e9c4 6706 	strd	r6, r7, [r4, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800690c:	7a0e      	ldrb	r6, [r1, #8]
 800690e:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006910:	f891 8009 	ldrb.w	r8, [r1, #9]
 8006914:	2300      	movs	r3, #0
 8006916:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800691a:	4316      	orrs	r6, r2
 800691c:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800691e:	f891 800a 	ldrb.w	r8, [r1, #10]
 8006922:	2300      	movs	r3, #0
 8006924:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8006928:	4332      	orrs	r2, r6
 800692a:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800692c:	f891 800b 	ldrb.w	r8, [r1, #11]
 8006930:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8006934:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8006938:	4332      	orrs	r2, r6
 800693a:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800693c:	f891 900c 	ldrb.w	r9, [r1, #12]
 8006940:	432a      	orrs	r2, r5
 8006942:	ea43 0309 	orr.w	r3, r3, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006946:	f891 800d 	ldrb.w	r8, [r1, #13]
 800694a:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800694e:	432a      	orrs	r2, r5
 8006950:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006952:	f891 800e 	ldrb.w	r8, [r1, #14]
 8006956:	ea4f 4708 	mov.w	r7, r8, lsl #16
 800695a:	462e      	mov	r6, r5
 800695c:	4316      	orrs	r6, r2
 800695e:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006960:	f891 800f 	ldrb.w	r8, [r1, #15]
 8006964:	ea4f 6308 	mov.w	r3, r8, lsl #24
      this->y = u_y.real;
 8006968:	432e      	orrs	r6, r5
 800696a:	431f      	orrs	r7, r3
 800696c:	e9c4 6708 	strd	r6, r7, [r4, #32]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006970:	7c0e      	ldrb	r6, [r1, #16]
 8006972:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006974:	f891 8011 	ldrb.w	r8, [r1, #17]
 8006978:	2300      	movs	r3, #0
 800697a:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800697e:	4316      	orrs	r6, r2
 8006980:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006982:	f891 8012 	ldrb.w	r8, [r1, #18]
 8006986:	2300      	movs	r3, #0
 8006988:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800698c:	4332      	orrs	r2, r6
 800698e:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006990:	f891 8013 	ldrb.w	r8, [r1, #19]
 8006994:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8006998:	ea4f 6608 	mov.w	r6, r8, lsl #24
 800699c:	4332      	orrs	r2, r6
 800699e:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80069a0:	f891 9014 	ldrb.w	r9, [r1, #20]
 80069a4:	432a      	orrs	r2, r5
 80069a6:	ea43 0309 	orr.w	r3, r3, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80069aa:	f891 8015 	ldrb.w	r8, [r1, #21]
 80069ae:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80069b2:	432a      	orrs	r2, r5
 80069b4:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80069b6:	f891 8016 	ldrb.w	r8, [r1, #22]
 80069ba:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80069be:	462e      	mov	r6, r5
 80069c0:	4316      	orrs	r6, r2
 80069c2:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80069c4:	f891 8017 	ldrb.w	r8, [r1, #23]
 80069c8:	ea4f 6308 	mov.w	r3, r8, lsl #24
      this->z = u_z.real;
 80069cc:	432e      	orrs	r6, r5
 80069ce:	431f      	orrs	r7, r3
 80069d0:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 80069d4:	f101 0318 	add.w	r3, r1, #24
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80069d8:	f891 8018 	ldrb.w	r8, [r1, #24]
 80069dc:	f04f 0900 	mov.w	r9, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80069e0:	f893 a001 	ldrb.w	sl, [r3, #1]
 80069e4:	2700      	movs	r7, #0
 80069e6:	4652      	mov	r2, sl
 80069e8:	0216      	lsls	r6, r2, #8
 80069ea:	ea46 0608 	orr.w	r6, r6, r8
 80069ee:	ea47 0709 	orr.w	r7, r7, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80069f2:	f893 8002 	ldrb.w	r8, [r3, #2]
 80069f6:	46c2      	mov	sl, r8
 80069f8:	f04f 0900 	mov.w	r9, #0
 80069fc:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8006a00:	ea48 0806 	orr.w	r8, r8, r6
 8006a04:	ea49 0907 	orr.w	r9, r9, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006a08:	f893 a003 	ldrb.w	sl, [r3, #3]
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	0a17      	lsrs	r7, r2, #8
 8006a10:	0616      	lsls	r6, r2, #24
 8006a12:	ea46 0608 	orr.w	r6, r6, r8
 8006a16:	ea47 0709 	orr.w	r7, r7, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006a1a:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006a1e:	432e      	orrs	r6, r5
 8006a20:	ea47 0709 	orr.w	r7, r7, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006a24:	f893 8005 	ldrb.w	r8, [r3, #5]
 8006a28:	46c2      	mov	sl, r8
 8006a2a:	ea4f 290a 	mov.w	r9, sl, lsl #8
 8006a2e:	432e      	orrs	r6, r5
 8006a30:	ea47 0709 	orr.w	r7, r7, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006a34:	f893 8006 	ldrb.w	r8, [r3, #6]
 8006a38:	46c2      	mov	sl, r8
 8006a3a:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8006a3e:	432e      	orrs	r6, r5
 8006a40:	ea47 0709 	orr.w	r7, r7, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006a44:	f893 8007 	ldrb.w	r8, [r3, #7]
 8006a48:	46c2      	mov	sl, r8
 8006a4a:	ea4f 690a 	mov.w	r9, sl, lsl #24
      this->x = u_x.real;
 8006a4e:	432e      	orrs	r6, r5
 8006a50:	ea47 0709 	orr.w	r7, r7, r9
 8006a54:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006a58:	f893 8008 	ldrb.w	r8, [r3, #8]
 8006a5c:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006a60:	f893 a009 	ldrb.w	sl, [r3, #9]
 8006a64:	2700      	movs	r7, #0
 8006a66:	4652      	mov	r2, sl
 8006a68:	0216      	lsls	r6, r2, #8
 8006a6a:	ea46 0608 	orr.w	r6, r6, r8
 8006a6e:	ea47 0709 	orr.w	r7, r7, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006a72:	f893 800a 	ldrb.w	r8, [r3, #10]
 8006a76:	46c2      	mov	sl, r8
 8006a78:	f04f 0900 	mov.w	r9, #0
 8006a7c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8006a80:	ea48 0806 	orr.w	r8, r8, r6
 8006a84:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006a88:	f893 a00b 	ldrb.w	sl, [r3, #11]
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	0a17      	lsrs	r7, r2, #8
 8006a90:	0616      	lsls	r6, r2, #24
 8006a92:	ea46 0608 	orr.w	r6, r6, r8
 8006a96:	ea47 0709 	orr.w	r7, r7, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006a9a:	f893 900c 	ldrb.w	r9, [r3, #12]
 8006a9e:	432e      	orrs	r6, r5
 8006aa0:	ea47 0709 	orr.w	r7, r7, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006aa4:	f893 800d 	ldrb.w	r8, [r3, #13]
 8006aa8:	46c2      	mov	sl, r8
 8006aaa:	ea4f 290a 	mov.w	r9, sl, lsl #8
 8006aae:	432e      	orrs	r6, r5
 8006ab0:	ea47 0709 	orr.w	r7, r7, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006ab4:	f893 800e 	ldrb.w	r8, [r3, #14]
 8006ab8:	46c2      	mov	sl, r8
 8006aba:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8006abe:	432e      	orrs	r6, r5
 8006ac0:	ea47 0709 	orr.w	r7, r7, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006ac4:	f893 800f 	ldrb.w	r8, [r3, #15]
 8006ac8:	46c2      	mov	sl, r8
 8006aca:	ea4f 690a 	mov.w	r9, sl, lsl #24
      this->y = u_y.real;
 8006ace:	432e      	orrs	r6, r5
 8006ad0:	ea47 0709 	orr.w	r7, r7, r9
 8006ad4:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006ad8:	f893 8010 	ldrb.w	r8, [r3, #16]
 8006adc:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ae0:	f893 a011 	ldrb.w	sl, [r3, #17]
 8006ae4:	2700      	movs	r7, #0
 8006ae6:	4652      	mov	r2, sl
 8006ae8:	0216      	lsls	r6, r2, #8
 8006aea:	ea46 0608 	orr.w	r6, r6, r8
 8006aee:	ea47 0709 	orr.w	r7, r7, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006af2:	f893 8012 	ldrb.w	r8, [r3, #18]
 8006af6:	46c2      	mov	sl, r8
 8006af8:	f04f 0900 	mov.w	r9, #0
 8006afc:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8006b00:	ea48 0806 	orr.w	r8, r8, r6
 8006b04:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006b08:	f893 a013 	ldrb.w	sl, [r3, #19]
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	0a17      	lsrs	r7, r2, #8
 8006b10:	0616      	lsls	r6, r2, #24
 8006b12:	ea46 0608 	orr.w	r6, r6, r8
 8006b16:	ea47 0709 	orr.w	r7, r7, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006b1a:	f893 9014 	ldrb.w	r9, [r3, #20]
 8006b1e:	432e      	orrs	r6, r5
 8006b20:	ea47 0709 	orr.w	r7, r7, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006b24:	f893 8015 	ldrb.w	r8, [r3, #21]
 8006b28:	46c2      	mov	sl, r8
 8006b2a:	ea4f 290a 	mov.w	r9, sl, lsl #8
 8006b2e:	432e      	orrs	r6, r5
 8006b30:	ea47 0709 	orr.w	r7, r7, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006b34:	f893 8016 	ldrb.w	r8, [r3, #22]
 8006b38:	46c2      	mov	sl, r8
 8006b3a:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8006b3e:	432e      	orrs	r6, r5
 8006b40:	ea47 0709 	orr.w	r7, r7, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006b44:	f893 8017 	ldrb.w	r8, [r3, #23]
 8006b48:	46c2      	mov	sl, r8
 8006b4a:	ea4f 690a 	mov.w	r9, sl, lsl #24
      this->z = u_z.real;
 8006b4e:	432e      	orrs	r6, r5
 8006b50:	ea47 0709 	orr.w	r7, r7, r9
 8006b54:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006b58:	f893 8018 	ldrb.w	r8, [r3, #24]
 8006b5c:	f04f 0900 	mov.w	r9, #0
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006b60:	f893 a019 	ldrb.w	sl, [r3, #25]
 8006b64:	2700      	movs	r7, #0
 8006b66:	4652      	mov	r2, sl
 8006b68:	0216      	lsls	r6, r2, #8
 8006b6a:	ea46 0608 	orr.w	r6, r6, r8
 8006b6e:	ea47 0709 	orr.w	r7, r7, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006b72:	f893 801a 	ldrb.w	r8, [r3, #26]
 8006b76:	46c2      	mov	sl, r8
 8006b78:	f04f 0900 	mov.w	r9, #0
 8006b7c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8006b80:	ea48 0806 	orr.w	r8, r8, r6
 8006b84:	ea49 0907 	orr.w	r9, r9, r7
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006b88:	f893 a01b 	ldrb.w	sl, [r3, #27]
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	0a17      	lsrs	r7, r2, #8
 8006b90:	0616      	lsls	r6, r2, #24
 8006b92:	ea46 0608 	orr.w	r6, r6, r8
 8006b96:	ea47 0709 	orr.w	r7, r7, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006b9a:	f893 901c 	ldrb.w	r9, [r3, #28]
 8006b9e:	432e      	orrs	r6, r5
 8006ba0:	ea47 0709 	orr.w	r7, r7, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006ba4:	f893 801d 	ldrb.w	r8, [r3, #29]
 8006ba8:	46c2      	mov	sl, r8
 8006baa:	ea4f 290a 	mov.w	r9, sl, lsl #8
 8006bae:	432e      	orrs	r6, r5
 8006bb0:	ea47 0709 	orr.w	r7, r7, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006bb4:	f893 801e 	ldrb.w	r8, [r3, #30]
 8006bb8:	46c2      	mov	sl, r8
 8006bba:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8006bbe:	432e      	orrs	r6, r5
 8006bc0:	ea47 0709 	orr.w	r7, r7, r9
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006bc4:	f893 801f 	ldrb.w	r8, [r3, #31]
 8006bc8:	ea4f 6308 	mov.w	r3, r8, lsl #24
      this->w = u_w.real;
 8006bcc:	432e      	orrs	r6, r5
 8006bce:	431f      	orrs	r7, r3
 8006bd0:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
      offset += this->pose.deserialize(inbuffer + offset);
 8006bd4:	2038      	movs	r0, #56	; 0x38
 8006bd6:	46a6      	mov	lr, r4
      for( uint32_t i = 0; i < 36; i++){
 8006bd8:	2d23      	cmp	r5, #35	; 0x23
 8006bda:	d859      	bhi.n	8006c90 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x3ee>
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006bdc:	5c0a      	ldrb	r2, [r1, r0]
 8006bde:	2300      	movs	r3, #0
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006be0:	1c46      	adds	r6, r0, #1
 8006be2:	5d8e      	ldrb	r6, [r1, r6]
 8006be4:	2400      	movs	r4, #0
 8006be6:	9401      	str	r4, [sp, #4]
 8006be8:	0234      	lsls	r4, r6, #8
 8006bea:	9400      	str	r4, [sp, #0]
 8006bec:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006bf0:	4316      	orrs	r6, r2
 8006bf2:	431f      	orrs	r7, r3
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006bf8:	1c86      	adds	r6, r0, #2
 8006bfa:	5d8e      	ldrb	r6, [r1, r6]
 8006bfc:	2400      	movs	r4, #0
 8006bfe:	9403      	str	r4, [sp, #12]
 8006c00:	0434      	lsls	r4, r6, #16
 8006c02:	9402      	str	r4, [sp, #8]
 8006c04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c08:	4316      	orrs	r6, r2
 8006c0a:	431f      	orrs	r7, r3
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006c10:	1cc6      	adds	r6, r0, #3
 8006c12:	5d8e      	ldrb	r6, [r1, r6]
 8006c14:	ea4f 2b16 	mov.w	fp, r6, lsr #8
 8006c18:	ea4f 6a06 	mov.w	sl, r6, lsl #24
 8006c1c:	ea42 020a 	orr.w	r2, r2, sl
 8006c20:	ea43 030b 	orr.w	r3, r3, fp
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006c24:	1d06      	adds	r6, r0, #4
 8006c26:	f811 9006 	ldrb.w	r9, [r1, r6]
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	ea42 0208 	orr.w	r2, r2, r8
 8006c32:	ea43 0309 	orr.w	r3, r3, r9
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006c36:	1d46      	adds	r6, r0, #5
 8006c38:	5d8e      	ldrb	r6, [r1, r6]
 8006c3a:	0234      	lsls	r4, r6, #8
 8006c3c:	9405      	str	r4, [sp, #20]
 8006c3e:	f8cd 8010 	str.w	r8, [sp, #16]
 8006c42:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006c46:	4316      	orrs	r6, r2
 8006c48:	431f      	orrs	r7, r3
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006c4e:	1d86      	adds	r6, r0, #6
 8006c50:	5d8e      	ldrb	r6, [r1, r6]
 8006c52:	0434      	lsls	r4, r6, #16
 8006c54:	9407      	str	r4, [sp, #28]
 8006c56:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c5a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8006c5e:	4316      	orrs	r6, r2
 8006c60:	431f      	orrs	r7, r3
 8006c62:	4632      	mov	r2, r6
 8006c64:	463b      	mov	r3, r7
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006c66:	1dc6      	adds	r6, r0, #7
 8006c68:	5d8e      	ldrb	r6, [r1, r6]
 8006c6a:	0634      	lsls	r4, r6, #24
 8006c6c:	9409      	str	r4, [sp, #36]	; 0x24
 8006c6e:	f8cd 8020 	str.w	r8, [sp, #32]
      this->covariance[i] = u_covariancei.real;
 8006c72:	f105 060b 	add.w	r6, r5, #11
 8006c76:	eb0e 04c6 	add.w	r4, lr, r6, lsl #3
 8006c7a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8006c7e:	4316      	orrs	r6, r2
 8006c80:	431f      	orrs	r7, r3
 8006c82:	4632      	mov	r2, r6
 8006c84:	463b      	mov	r3, r7
 8006c86:	e9c4 2300 	strd	r2, r3, [r4]
      offset += sizeof(this->covariance[i]);
 8006c8a:	3008      	adds	r0, #8
      for( uint32_t i = 0; i < 36; i++){
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	e7a3      	b.n	8006bd8 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x336>
    }
 8006c90:	b00f      	add	sp, #60	; 0x3c
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 8006c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c9c:	b087      	sub	sp, #28
 8006c9e:	4604      	mov	r4, r0
	}

	unsigned long time()
	{
		return HAL_GetTick();
 8006ca0:	f7fa ff72 	bl	8001b88 <HAL_GetTick>
 8006ca4:	4605      	mov	r5, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8006ca6:	f241 03fc 	movw	r3, #4348	; 0x10fc
 8006caa:	58e3      	ldr	r3, [r4, r3]
 8006cac:	1ac3      	subs	r3, r0, r3
 8006cae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d903      	bls.n	8006cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x26>
      configured_ = false;
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8006cbc:	54e2      	strb	r2, [r4, r3]
    if (mode_ != MODE_FIRST_FF)
 8006cbe:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	b383      	cbz	r3, 8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
      if (c_time > last_msg_timeout_time)
 8006cc6:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	d22b      	bcs.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        mode_ = MODE_FIRST_FF;
 8006cd0:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e026      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
 8006cda:	f7fa ff55 	bl	8001b88 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8006cde:	1b40      	subs	r0, r0, r5
 8006ce0:	6963      	ldr	r3, [r4, #20]
 8006ce2:	4298      	cmp	r0, r3
 8006ce4:	d923      	bls.n	8006d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8006ce6:	f06f 0001 	mvn.w	r0, #1
 8006cea:	e2a8      	b.n	800723e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
			return -1;
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	e035      	b.n	8006d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0xc6>
        message_in[index_++] = data;
 8006cf2:	f241 02ec 	movw	r2, #4332	; 0x10ec
 8006cf6:	58a3      	ldr	r3, [r4, r2]
 8006cf8:	1c59      	adds	r1, r3, #1
 8006cfa:	50a1      	str	r1, [r4, r2]
 8006cfc:	4423      	add	r3, r4
 8006cfe:	7618      	strb	r0, [r3, #24]
        bytes_--;
 8006d00:	f241 02e4 	movw	r2, #4324	; 0x10e4
 8006d04:	58a3      	ldr	r3, [r4, r2]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	50a3      	str	r3, [r4, r2]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8006d0a:	b96b      	cbnz	r3, 8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_ = MODE_MSG_CHECKSUM;
 8006d0c:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006d10:	2208      	movs	r2, #8
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e008      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_++;
 8006d16:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8006d1e:	f105 0314 	add.w	r3, r5, #20
 8006d22:	f504 5288 	add.w	r2, r4, #4352	; 0x1100
 8006d26:	6013      	str	r3, [r2, #0]
      if (spin_timeout_ > 0)
 8006d28:	6963      	ldr	r3, [r4, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1d5      	bne.n	8006cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x42>
		return com->read();
 8006d2e:	6861      	ldr	r1, [r4, #4]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8006d30:	f241 0308 	movw	r3, #4104	; 0x1008
 8006d34:	58cb      	ldr	r3, [r1, r3]
 8006d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
		if (rx_tail == rx_head)
 8006d42:	f241 0202 	movw	r2, #4098	; 0x1002
 8006d46:	5a8a      	ldrh	r2, [r1, r2]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d0cf      	beq.n	8006cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x54>
		int c = (int) rx_buf[rx_tail++];
 8006d4c:	1c53      	adds	r3, r2, #1
 8006d4e:	440a      	add	r2, r1
 8006d50:	f892 0800 	ldrb.w	r0, [r2, #2048]	; 0x800
		rx_tail &= buf_mask;
 8006d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d58:	f241 0202 	movw	r2, #4098	; 0x1002
 8006d5c:	528b      	strh	r3, [r1, r2]
      if (data < 0)
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f2c0 824b 	blt.w	80071fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x562>
      checksum_ += data;
 8006d64:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8006d68:	58e2      	ldr	r2, [r4, r3]
 8006d6a:	4402      	add	r2, r0
 8006d6c:	50e2      	str	r2, [r4, r3]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006d6e:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b07      	cmp	r3, #7
 8006d76:	d0bc      	beq.n	8006cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_FIRST_FF)
 8006d78:	b97b      	cbnz	r3, 8006d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x102>
        if (data == 0xff)
 8006d7a:	28ff      	cmp	r0, #255	; 0xff
 8006d7c:	d0cb      	beq.n	8006d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x7e>
		return HAL_GetTick();
 8006d7e:	f7fa ff03 	bl	8001b88 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8006d82:	1b40      	subs	r0, r0, r5
 8006d84:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d88:	4298      	cmp	r0, r3
 8006d8a:	d9cd      	bls.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          configured_ = false;
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8006d92:	54e2      	strb	r2, [r4, r3]
          return SPIN_TIMEOUT;
 8006d94:	f06f 0001 	mvn.w	r0, #1
 8006d98:	e251      	b.n	800723e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
      else if (mode_ == MODE_PROTOCOL_VER)
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d038      	beq.n	8006e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x178>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d054      	beq.n	8006e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1b4>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d061      	beq.n	8006e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1d2>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d06a      	beq.n	8006e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1e8>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d079      	beq.n	8006ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x20a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	f000 8082 	beq.w	8006eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x220>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d1b7      	bne.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        mode_ = MODE_FIRST_FF;
 8006db8:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	6019      	str	r1, [r3, #0]
        if ((checksum_ % 256) == 255)
 8006dc0:	1a8b      	subs	r3, r1, r2
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	bf58      	it	pl
 8006dc8:	425a      	negpl	r2, r3
 8006dca:	2aff      	cmp	r2, #255	; 0xff
 8006dcc:	d1ac      	bne.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8006dce:	f241 03e8 	movw	r3, #4328	; 0x10e8
 8006dd2:	58e6      	ldr	r6, [r4, r3]
 8006dd4:	2e00      	cmp	r6, #0
 8006dd6:	f000 8084 	beq.w	8006ee2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x24a>
          else if (topic_ == TopicInfo::ID_TIME)
 8006dda:	2e0a      	cmp	r6, #10
 8006ddc:	f000 80fa 	beq.w	8006fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x33c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8006de0:	2e06      	cmp	r6, #6
 8006de2:	f000 8137 	beq.w	8007054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3bc>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8006de6:	2e0b      	cmp	r6, #11
 8006de8:	f000 8202 	beq.w	80071f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x558>
            if (subscribers[topic_ - 100])
 8006dec:	f206 33ba 	addw	r3, r6, #954	; 0x3ba
 8006df0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006df4:	6858      	ldr	r0, [r3, #4]
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d096      	beq.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
              subscribers[topic_ - 100]->callback(message_in);
 8006dfa:	f206 33ba 	addw	r3, r6, #954	; 0x3ba
 8006dfe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f104 0118 	add.w	r1, r4, #24
 8006e0c:	4798      	blx	r3
 8006e0e:	e78b      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        if (data == PROTOCOL_VER)
 8006e10:	28fe      	cmp	r0, #254	; 0xfe
 8006e12:	d016      	beq.n	8006e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1aa>
          mode_ = MODE_FIRST_FF;
 8006e14:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 8006e1c:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8006e20:	5ce3      	ldrb	r3, [r4, r3]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d180      	bne.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
      data()
 8006e26:	4ba8      	ldr	r3, [pc, #672]	; (80070c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>)
 8006e28:	9300      	str	r3, [sp, #0]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8006e2a:	9201      	str	r2, [sp, #4]
 8006e2c:	9202      	str	r2, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	466a      	mov	r2, sp
 8006e34:	210a      	movs	r1, #10
 8006e36:	4620      	mov	r0, r4
 8006e38:	4798      	blx	r3
 8006e3a:	f7fa fea5 	bl	8001b88 <HAL_GetTick>
    rt_time = hardware_.time();
 8006e3e:	60a0      	str	r0, [r4, #8]
 8006e40:	e772      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_++;
 8006e42:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8006e46:	3301      	adds	r3, #1
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e76d      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        bytes_ = data;
 8006e4c:	f241 02e4 	movw	r2, #4324	; 0x10e4
 8006e50:	50a0      	str	r0, [r4, r2]
        index_ = 0;
 8006e52:	2100      	movs	r1, #0
 8006e54:	f241 02ec 	movw	r2, #4332	; 0x10ec
 8006e58:	50a1      	str	r1, [r4, r2]
        mode_++;
 8006e5a:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8006e5e:	3301      	adds	r3, #1
 8006e60:	6013      	str	r3, [r2, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8006e62:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8006e66:	50e0      	str	r0, [r4, r3]
 8006e68:	e75e      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        bytes_ += data << 8;
 8006e6a:	f241 01e4 	movw	r1, #4324	; 0x10e4
 8006e6e:	5862      	ldr	r2, [r4, r1]
 8006e70:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8006e74:	5060      	str	r0, [r4, r1]
        mode_++;
 8006e76:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	e753      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        if ((checksum_ % 256) == 255)
 8006e80:	4251      	negs	r1, r2
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	b2c9      	uxtb	r1, r1
 8006e86:	bf58      	it	pl
 8006e88:	424a      	negpl	r2, r1
 8006e8a:	2aff      	cmp	r2, #255	; 0xff
 8006e8c:	d004      	beq.n	8006e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x200>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006e8e:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e747      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_++;
 8006e98:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	e742      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        topic_ = data;
 8006ea2:	f241 02e8 	movw	r2, #4328	; 0x10e8
 8006ea6:	50a0      	str	r0, [r4, r2]
        mode_++;
 8006ea8:	f504 5287 	add.w	r2, r4, #4320	; 0x10e0
 8006eac:	3301      	adds	r3, #1
 8006eae:	6013      	str	r3, [r2, #0]
        checksum_ = data;               /* first byte included in checksum */
 8006eb0:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8006eb4:	50e0      	str	r0, [r4, r3]
 8006eb6:	e737      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
        topic_ += data << 8;
 8006eb8:	f241 02e8 	movw	r2, #4328	; 0x10e8
 8006ebc:	58a3      	ldr	r3, [r4, r2]
 8006ebe:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8006ec2:	50a0      	str	r0, [r4, r2]
        mode_ = MODE_MESSAGE;
 8006ec4:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006ec8:	2207      	movs	r2, #7
 8006eca:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8006ecc:	f241 03e4 	movw	r3, #4324	; 0x10e4
 8006ed0:	58e3      	ldr	r3, [r4, r3]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f af28 	bne.w	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
          mode_ = MODE_MSG_CHECKSUM;
 8006ed8:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8006edc:	2208      	movs	r2, #8
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e722      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
 8006ee2:	4b79      	ldr	r3, [pc, #484]	; (80070c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>)
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	460f      	mov	r7, r1
 8006ee8:	9101      	str	r1, [sp, #4]
 8006eea:	9102      	str	r1, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	466a      	mov	r2, sp
 8006ef2:	210a      	movs	r1, #10
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4798      	blx	r3
 8006ef8:	f7fa fe46 	bl	8001b88 <HAL_GetTick>
    rt_time = hardware_.time();
 8006efc:	60a0      	str	r0, [r4, #8]
      buffer_size(0)
 8006efe:	4b73      	ldr	r3, [pc, #460]	; (80070cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x434>)
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	f8ad 7004 	strh.w	r7, [sp, #4]
 8006f06:	4b72      	ldr	r3, [pc, #456]	; (80070d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x438>)
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	9705      	str	r7, [sp, #20]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006f10:	4637      	mov	r7, r6
 8006f12:	e000      	b.n	8006f16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27e>
 8006f14:	3701      	adds	r7, #1
 8006f16:	2f18      	cmp	r7, #24
 8006f18:	dc25      	bgt.n	8006f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2ce>
      if (publishers[i] != 0) // non-empty slot
 8006f1a:	f207 4306 	addw	r3, r7, #1030	; 0x406
 8006f1e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f6      	beq.n	8006f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27c>
        ti.topic_id = publishers[i]->id_;
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8006f30:	6858      	ldr	r0, [r3, #4]
 8006f32:	6803      	ldr	r3, [r0, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4798      	blx	r3
 8006f38:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8006f3a:	f207 4806 	addw	r8, r7, #1030	; 0x406
 8006f3e:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
 8006f42:	6858      	ldr	r0, [r3, #4]
 8006f44:	6803      	ldr	r3, [r0, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4798      	blx	r3
 8006f4a:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 8006f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f50:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 8006f5a:	466a      	mov	r2, sp
 8006f5c:	6909      	ldr	r1, [r1, #16]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4798      	blx	r3
 8006f62:	e7d7      	b.n	8006f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27c>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8006f64:	3601      	adds	r6, #1
 8006f66:	2e18      	cmp	r6, #24
 8006f68:	dc27      	bgt.n	8006fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x322>
      if (subscribers[i] != 0) // non-empty slot
 8006f6a:	f206 431e 	addw	r3, r6, #1054	; 0x41e
 8006f6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f72:	6858      	ldr	r0, [r3, #4]
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d0f5      	beq.n	8006f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2cc>
        ti.topic_id = subscribers[i]->id_;
 8006f78:	6843      	ldr	r3, [r0, #4]
 8006f7a:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8006f7e:	6883      	ldr	r3, [r0, #8]
 8006f80:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8006f82:	6803      	ldr	r3, [r0, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	4798      	blx	r3
 8006f88:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8006f8a:	f206 471e 	addw	r7, r6, #1054	; 0x41e
 8006f8e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	6803      	ldr	r3, [r0, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4798      	blx	r3
 8006f9a:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 8006f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fa0:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	f8d3 8000 	ldr.w	r8, [r3]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4798      	blx	r3
 8006fb0:	466a      	mov	r2, sp
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	47c0      	blx	r8
 8006fb8:	e7d4      	b.n	8006f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2cc>
    configured_ = true;
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8006fc0:	54e2      	strb	r2, [r4, r3]
            last_sync_time = c_time;
 8006fc2:	f241 03f8 	movw	r3, #4344	; 0x10f8
 8006fc6:	50e5      	str	r5, [r4, r3]
            last_sync_receive_time = c_time;
 8006fc8:	f241 03fc 	movw	r3, #4348	; 0x10fc
 8006fcc:	50e5      	str	r5, [r4, r3]
            return SPIN_ERR;
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	e134      	b.n	800723e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
            syncTime(message_in);
 8006fd4:	f104 0618 	add.w	r6, r4, #24
 8006fd8:	f7fa fdd6 	bl	8001b88 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006fe0:	7e22      	ldrb	r2, [r4, #24]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006fe2:	4633      	mov	r3, r6
 8006fe4:	7871      	ldrb	r1, [r6, #1]
 8006fe6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006fea:	78b1      	ldrb	r1, [r6, #2]
 8006fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006ff0:	78f1      	ldrb	r1, [r6, #3]
 8006ff2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8006ff6:	7932      	ldrb	r2, [r6, #4]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ff8:	7976      	ldrb	r6, [r6, #5]
 8006ffa:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006ffe:	799e      	ldrb	r6, [r3, #6]
 8007000:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007004:	79db      	ldrb	r3, [r3, #7]
 8007006:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    t.data.sec += offset / 1000;
 800700a:	4e32      	ldr	r6, [pc, #200]	; (80070d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x43c>)
 800700c:	fba6 7300 	umull	r7, r3, r6, r0
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	4419      	add	r1, r3
 8007014:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007016:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800701a:	fb08 0313 	mls	r3, r8, r3, r0
 800701e:	4f2e      	ldr	r7, [pc, #184]	; (80070d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x440>)
 8007020:	fb07 2303 	mla	r3, r7, r3, r2
 8007024:	9302      	str	r3, [sp, #8]
 8007026:	f7fa fdaf 	bl	8001b88 <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 800702a:	fba6 2300 	umull	r2, r3, r6, r0
 800702e:	099b      	lsrs	r3, r3, #6
 8007030:	9a01      	ldr	r2, [sp, #4]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	3a01      	subs	r2, #1
 8007036:	60e2      	str	r2, [r4, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007038:	fb08 0313 	mls	r3, r8, r3, r0
 800703c:	9a02      	ldr	r2, [sp, #8]
 800703e:	fb07 2313 	mls	r3, r7, r3, r2
 8007042:	4a26      	ldr	r2, [pc, #152]	; (80070dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x444>)
 8007044:	441a      	add	r2, r3
 8007046:	6122      	str	r2, [r4, #16]
 8007048:	f7fa fd9e 	bl	8001b88 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 800704c:	f241 03fc 	movw	r3, #4348	; 0x10fc
 8007050:	50e0      	str	r0, [r4, r3]
 8007052:	e669      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
            req_param_resp.deserialize(message_in);
 8007054:	f504 5888 	add.w	r8, r4, #4352	; 0x1100
 8007058:	f108 0808 	add.w	r8, r8, #8
 800705c:	f104 0718 	add.w	r7, r4, #24
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007060:	7e26      	ldrb	r6, [r4, #24]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007062:	787b      	ldrb	r3, [r7, #1]
 8007064:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007068:	78bb      	ldrb	r3, [r7, #2]
 800706a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
 8007074:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007078:	429e      	cmp	r6, r3
 800707a:	d81d      	bhi.n	80070b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x420>
      ints_length = ints_lengthT;
 800707c:	f8c8 6004 	str.w	r6, [r8, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8007080:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8007082:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8007084:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007088:	4293      	cmp	r3, r2
 800708a:	d929      	bls.n	80070e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x448>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800708c:	5dbb      	ldrb	r3, [r7, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800708e:	1c71      	adds	r1, r6, #1
 8007090:	5c79      	ldrb	r1, [r7, r1]
 8007092:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007096:	1cb1      	adds	r1, r6, #2
 8007098:	5c79      	ldrb	r1, [r7, r1]
 800709a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800709e:	1cf1      	adds	r1, r6, #3
 80070a0:	5c79      	ldrb	r1, [r7, r1]
 80070a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 80070a6:	f8c8 3008 	str.w	r3, [r8, #8]
      offset += sizeof(this->st_ints);
 80070aa:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80070ac:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80070b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 80070b4:	3201      	adds	r2, #1
 80070b6:	e7e5      	b.n	8007084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3ec>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80070b8:	00b1      	lsls	r1, r6, #2
 80070ba:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80070be:	f002 fe93 	bl	8009de8 <realloc>
 80070c2:	f8c8 000c 	str.w	r0, [r8, #12]
 80070c6:	e7d9      	b.n	800707c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3e4>
 80070c8:	0800a7c0 	.word	0x0800a7c0
 80070cc:	0800a7d8 	.word	0x0800a7d8
 80070d0:	0800ac7c 	.word	0x0800ac7c
 80070d4:	10624dd3 	.word	0x10624dd3
 80070d8:	000f4240 	.word	0x000f4240
 80070dc:	3b9aca00 	.word	0x3b9aca00
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80070e0:	f817 9006 	ldrb.w	r9, [r7, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80070e4:	1c73      	adds	r3, r6, #1
 80070e6:	5cfb      	ldrb	r3, [r7, r3]
 80070e8:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80070ec:	1cb3      	adds	r3, r6, #2
 80070ee:	5cfb      	ldrb	r3, [r7, r3]
 80070f0:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80070f4:	1cf3      	adds	r3, r6, #3
 80070f6:	5cfb      	ldrb	r3, [r7, r3]
 80070f8:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->floats_length);
 80070fc:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 80070fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007102:	4599      	cmp	r9, r3
 8007104:	d81c      	bhi.n	8007140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4a8>
      floats_length = floats_lengthT;
 8007106:	f8c8 9010 	str.w	r9, [r8, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800710a:	2200      	movs	r2, #0
 800710c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007110:	4293      	cmp	r3, r2
 8007112:	d91e      	bls.n	8007152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ba>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007114:	5dbb      	ldrb	r3, [r7, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007116:	1c71      	adds	r1, r6, #1
 8007118:	5c79      	ldrb	r1, [r7, r1]
 800711a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800711e:	1cb1      	adds	r1, r6, #2
 8007120:	5c79      	ldrb	r1, [r7, r1]
 8007122:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007126:	1cf1      	adds	r1, r6, #3
 8007128:	5c79      	ldrb	r1, [r7, r1]
 800712a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 800712e:	f8c8 3014 	str.w	r3, [r8, #20]
      offset += sizeof(this->st_floats);
 8007132:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8007134:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007138:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 800713c:	3201      	adds	r2, #1
 800713e:	e7e5      	b.n	800710c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x474>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8007140:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8007144:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8007148:	f002 fe4e 	bl	8009de8 <realloc>
 800714c:	f8c8 0018 	str.w	r0, [r8, #24]
 8007150:	e7d9      	b.n	8007106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x46e>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007152:	f817 9006 	ldrb.w	r9, [r7, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007156:	1c73      	adds	r3, r6, #1
 8007158:	5cfb      	ldrb	r3, [r7, r3]
 800715a:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800715e:	1cb3      	adds	r3, r6, #2
 8007160:	5cfb      	ldrb	r3, [r7, r3]
 8007162:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007166:	1cf3      	adds	r3, r6, #3
 8007168:	5cfb      	ldrb	r3, [r7, r3]
 800716a:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->strings_length);
 800716e:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8007170:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007174:	4599      	cmp	r9, r3
 8007176:	d804      	bhi.n	8007182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ea>
      strings_length = strings_lengthT;
 8007178:	f8c8 901c 	str.w	r9, [r8, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800717c:	f04f 0e00 	mov.w	lr, #0
 8007180:	e029      	b.n	80071d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x53e>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8007182:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8007186:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 800718a:	f002 fe2d 	bl	8009de8 <realloc>
 800718e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 8007192:	e7f1      	b.n	8007178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e0>
      var |= (arr[i] << (8 * i));
 8007194:	eb07 020c 	add.w	r2, r7, ip
 8007198:	5cd2      	ldrb	r2, [r2, r3]
 800719a:	00d8      	lsls	r0, r3, #3
 800719c:	4082      	lsls	r2, r0
 800719e:	4311      	orrs	r1, r2
    for (size_t i = 0; i < sizeof(V); i++)
 80071a0:	3301      	adds	r3, #1
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d9f6      	bls.n	8007194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4fc>
      offset += 4;
 80071a6:	3604      	adds	r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80071a8:	4633      	mov	r3, r6
 80071aa:	198a      	adds	r2, r1, r6
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d904      	bls.n	80071ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x522>
          inbuffer[k-1]=inbuffer[k];
 80071b0:	1e5a      	subs	r2, r3, #1
 80071b2:	5cf8      	ldrb	r0, [r7, r3]
 80071b4:	54b8      	strb	r0, [r7, r2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80071b6:	3301      	adds	r3, #1
 80071b8:	e7f7      	b.n	80071aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x512>
      inbuffer[offset+length_st_strings-1]=0;
 80071ba:	1e53      	subs	r3, r2, #1
 80071bc:	2100      	movs	r1, #0
 80071be:	54f9      	strb	r1, [r7, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 80071c0:	3e01      	subs	r6, #1
 80071c2:	19bb      	adds	r3, r7, r6
 80071c4:	f8c8 3020 	str.w	r3, [r8, #32]
      offset += length_st_strings;
 80071c8:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80071ca:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80071ce:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 80071d2:	f10e 0e01 	add.w	lr, lr, #1
 80071d6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80071da:	4573      	cmp	r3, lr
 80071dc:	d903      	bls.n	80071e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x54e>
      arrToVar(length_st_strings, (inbuffer + offset));
 80071de:	46b4      	mov	ip, r6
    var = 0;
 80071e0:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80071e2:	460b      	mov	r3, r1
 80071e4:	e7dd      	b.n	80071a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x50a>
            param_recieved = true;
 80071e6:	2201      	movs	r2, #1
 80071e8:	f241 1304 	movw	r3, #4356	; 0x1104
 80071ec:	54e2      	strb	r2, [r4, r3]
 80071ee:	e59b      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
            configured_ = false;
 80071f0:	2200      	movs	r2, #0
 80071f2:	f241 03f4 	movw	r3, #4340	; 0x10f4
 80071f6:	54e2      	strb	r2, [r4, r3]
 80071f8:	e596      	b.n	8006d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x90>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80071fa:	f241 03f4 	movw	r3, #4340	; 0x10f4
 80071fe:	5ce3      	ldrb	r3, [r4, r3]
 8007200:	b1e3      	cbz	r3, 800723c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a4>
 8007202:	f241 03f8 	movw	r3, #4344	; 0x10f8
 8007206:	58e3      	ldr	r3, [r4, r3]
 8007208:	1aeb      	subs	r3, r5, r3
 800720a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800720e:	4293      	cmp	r3, r2
 8007210:	d801      	bhi.n	8007216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x57e>
    return SPIN_OK;
 8007212:	2000      	movs	r0, #0
 8007214:	e013      	b.n	800723e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
      data()
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5ac>)
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2600      	movs	r6, #0
 800721c:	9601      	str	r6, [sp, #4]
 800721e:	9602      	str	r6, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	466a      	mov	r2, sp
 8007226:	210a      	movs	r1, #10
 8007228:	4620      	mov	r0, r4
 800722a:	4798      	blx	r3
 800722c:	f7fa fcac 	bl	8001b88 <HAL_GetTick>
    rt_time = hardware_.time();
 8007230:	60a0      	str	r0, [r4, #8]
      last_sync_time = c_time;
 8007232:	f241 03f8 	movw	r3, #4344	; 0x10f8
 8007236:	50e5      	str	r5, [r4, r3]
    return SPIN_OK;
 8007238:	4630      	mov	r0, r6
 800723a:	e000      	b.n	800723e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a6>
 800723c:	2000      	movs	r0, #0
  }
 800723e:	b007      	add	sp, #28
 8007240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007244:	0800a7c0 	.word	0x0800a7c0

08007248 <HAL_UART_TxCpltCallback>:
extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8007248:	6802      	ldr	r2, [r0, #0]
		return &huart;
 800724a:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800724e:	4906      	ldr	r1, [pc, #24]	; (8007268 <HAL_UART_TxCpltCallback+0x20>)
 8007250:	58cb      	ldr	r3, [r1, r3]
	if (huart->Instance == serial.get_handle()->Instance)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d000      	beq.n	800725a <HAL_UART_TxCpltCallback+0x12>
 8007258:	4770      	bx	lr
		tx_cplt = true;
 800725a:	2101      	movs	r1, #1
 800725c:	f241 03c8 	movw	r3, #4296	; 0x10c8
 8007260:	4a01      	ldr	r2, [pc, #4]	; (8007268 <HAL_UART_TxCpltCallback+0x20>)
 8007262:	54d1      	strb	r1, [r2, r3]
	{
		serial.tx_cplt_callback();
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8007264:	e7f8      	b.n	8007258 <HAL_UART_TxCpltCallback+0x10>
 8007266:	bf00      	nop
 8007268:	20000530 	.word	0x20000530

0800726c <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800726c:	b508      	push	{r3, lr}
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <HAL_UART_RxCpltCallback+0x24>)
 8007270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007274:	f603 01c8 	addw	r1, r3, #2248	; 0x8c8
 8007278:	f241 00d0 	movw	r0, #4304	; 0x10d0
 800727c:	5818      	ldr	r0, [r3, r0]
 800727e:	f7fb fc63 	bl	8002b48 <HAL_UART_Receive_DMA>
	serial.reset_rbuf();
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8007282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007286:	4803      	ldr	r0, [pc, #12]	; (8007294 <HAL_UART_RxCpltCallback+0x28>)
 8007288:	f7fa ff5e 	bl	8002148 <HAL_GPIO_TogglePin>
 800728c:	bd08      	pop	{r3, pc}
 800728e:	bf00      	nop
 8007290:	20000530 	.word	0x20000530
 8007294:	40011000 	.word	0x40011000

08007298 <_ZN8nav_msgs8OdometryC1Ev>:
    Odometry():
 8007298:	b430      	push	{r4, r5}
      twist()
 800729a:	4b2c      	ldr	r3, [pc, #176]	; (800734c <_ZN8nav_msgs8OdometryC1Ev+0xb4>)
 800729c:	6003      	str	r3, [r0, #0]
      frame_id("")
 800729e:	4b2c      	ldr	r3, [pc, #176]	; (8007350 <_ZN8nav_msgs8OdometryC1Ev+0xb8>)
 80072a0:	6043      	str	r3, [r0, #4]
 80072a2:	2300      	movs	r3, #0
 80072a4:	6083      	str	r3, [r0, #8]
 80072a6:	60c3      	str	r3, [r0, #12]
 80072a8:	6103      	str	r3, [r0, #16]
 80072aa:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <_ZN8nav_msgs8OdometryC1Ev+0xbc>)
 80072ac:	6143      	str	r3, [r0, #20]
 80072ae:	6183      	str	r3, [r0, #24]
      covariance()
 80072b0:	4b29      	ldr	r3, [pc, #164]	; (8007358 <_ZN8nav_msgs8OdometryC1Ev+0xc0>)
 80072b2:	6203      	str	r3, [r0, #32]
      orientation()
 80072b4:	4b29      	ldr	r3, [pc, #164]	; (800735c <_ZN8nav_msgs8OdometryC1Ev+0xc4>)
 80072b6:	6283      	str	r3, [r0, #40]	; 0x28
      z(0)
 80072b8:	4b29      	ldr	r3, [pc, #164]	; (8007360 <_ZN8nav_msgs8OdometryC1Ev+0xc8>)
 80072ba:	6303      	str	r3, [r0, #48]	; 0x30
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
 80072c4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
 80072c8:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
      w(0)
 80072cc:	4925      	ldr	r1, [pc, #148]	; (8007364 <_ZN8nav_msgs8OdometryC1Ev+0xcc>)
 80072ce:	6501      	str	r1, [r0, #80]	; 0x50
 80072d0:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
 80072d4:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
 80072d8:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
 80072dc:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
 80072e0:	f100 0278 	add.w	r2, r0, #120	; 0x78
 80072e4:	2323      	movs	r3, #35	; 0x23
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	db05      	blt.n	80072f6 <_ZN8nav_msgs8OdometryC1Ev+0x5e>
 80072ea:	2400      	movs	r4, #0
 80072ec:	2500      	movs	r5, #0
 80072ee:	e8e2 4502 	strd	r4, r5, [r2], #8
 80072f2:	3b01      	subs	r3, #1
 80072f4:	e7f7      	b.n	80072e6 <_ZN8nav_msgs8OdometryC1Ev+0x4e>
      covariance()
 80072f6:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <_ZN8nav_msgs8OdometryC1Ev+0xd0>)
 80072f8:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
      angular()
 80072fc:	4b1b      	ldr	r3, [pc, #108]	; (800736c <_ZN8nav_msgs8OdometryC1Ev+0xd4>)
 80072fe:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
      z(0)
 8007302:	4c1b      	ldr	r4, [pc, #108]	; (8007370 <_ZN8nav_msgs8OdometryC1Ev+0xd8>)
 8007304:	f8c0 41a8 	str.w	r4, [r0, #424]	; 0x1a8
 8007308:	f500 71d4 	add.w	r1, r0, #424	; 0x1a8
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007314:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007318:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800731c:	f8c0 41c8 	str.w	r4, [r0, #456]	; 0x1c8
 8007320:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 8007324:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007328:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800732c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007330:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
 8007334:	2323      	movs	r3, #35	; 0x23
 8007336:	2b00      	cmp	r3, #0
 8007338:	db05      	blt.n	8007346 <_ZN8nav_msgs8OdometryC1Ev+0xae>
 800733a:	2400      	movs	r4, #0
 800733c:	2500      	movs	r5, #0
 800733e:	e8e2 4502 	strd	r4, r5, [r2], #8
 8007342:	3b01      	subs	r3, #1
 8007344:	e7f7      	b.n	8007336 <_ZN8nav_msgs8OdometryC1Ev+0x9e>
    }
 8007346:	bc30      	pop	{r4, r5}
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	0800a93c 	.word	0x0800a93c
 8007350:	0800a820 	.word	0x0800a820
 8007354:	0800ac7c 	.word	0x0800ac7c
 8007358:	0800a8f4 	.word	0x0800a8f4
 800735c:	0800a8dc 	.word	0x0800a8dc
 8007360:	0800a8c4 	.word	0x0800a8c4
 8007364:	0800a850 	.word	0x0800a850
 8007368:	0800a924 	.word	0x0800a924
 800736c:	0800a90c 	.word	0x0800a90c
 8007370:	0800a838 	.word	0x0800a838

08007374 <_Z18SystemClock_Configv>:
{
 8007374:	b530      	push	{r4, r5, lr}
 8007376:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007378:	2228      	movs	r2, #40	; 0x28
 800737a:	2100      	movs	r1, #0
 800737c:	a806      	add	r0, sp, #24
 800737e:	f002 fd1e 	bl	8009dbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007382:	2400      	movs	r4, #0
 8007384:	9401      	str	r4, [sp, #4]
 8007386:	9402      	str	r4, [sp, #8]
 8007388:	9403      	str	r4, [sp, #12]
 800738a:	9404      	str	r4, [sp, #16]
 800738c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800738e:	2201      	movs	r2, #1
 8007390:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007396:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007398:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800739a:	2502      	movs	r5, #2
 800739c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800739e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80073a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80073a4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073a6:	a806      	add	r0, sp, #24
 80073a8:	f7fa feec 	bl	8002184 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073ac:	230f      	movs	r3, #15
 80073ae:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073b0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073b2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80073ba:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80073bc:	4629      	mov	r1, r5
 80073be:	a801      	add	r0, sp, #4
 80073c0:	f7fb f91e 	bl	8002600 <HAL_RCC_ClockConfig>
}
 80073c4:	b011      	add	sp, #68	; 0x44
 80073c6:	bd30      	pop	{r4, r5, pc}

080073c8 <main>:
{
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
  HAL_Init();
 80073d0:	f7fa fbbc 	bl	8001b4c <HAL_Init>
  SystemClock_Config();
 80073d4:	f7ff ffce 	bl	8007374 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80073d8:	f7fc fa4c 	bl	8003874 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80073dc:	f7fc fa90 	bl	8003900 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80073e0:	f7fc fab0 	bl	8003944 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80073e4:	f7fc fac6 	bl	8003974 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80073e8:	f7fc fadc 	bl	80039a4 <_ZL19MX_USART3_UART_Initv>
  USART2->CR1 |= USART_CR1_RXNEIE;
 80073ec:	4a3d      	ldr	r2, [pc, #244]	; (80074e4 <main+0x11c>)
 80073ee:	68d3      	ldr	r3, [r2, #12]
 80073f0:	f043 0320 	orr.w	r3, r3, #32
 80073f4:	60d3      	str	r3, [r2, #12]
  USART3->CR1 |= USART_CR1_RXNEIE;
 80073f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073fa:	68d3      	ldr	r3, [r2, #12]
 80073fc:	f043 0320 	orr.w	r3, r3, #32
 8007400:	60d3      	str	r3, [r2, #12]
		com->start_dma();
 8007402:	4d39      	ldr	r5, [pc, #228]	; (80074e8 <main+0x120>)
 8007404:	f855 3c20 	ldr.w	r3, [r5, #-32]
		tx_cplt = true;
 8007408:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800740c:	2101      	movs	r1, #1
 800740e:	7011      	strb	r1, [r2, #0]
		rx_tail = 0;
 8007410:	2400      	movs	r4, #0
 8007412:	f241 0202 	movw	r2, #4098	; 0x1002
 8007416:	529c      	strh	r4, [r3, r2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8007418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800741c:	1899      	adds	r1, r3, r2
 800741e:	f241 0008 	movw	r0, #4104	; 0x1008
 8007422:	5818      	ldr	r0, [r3, r0]
 8007424:	f7fb fb90 	bl	8002b48 <HAL_UART_Receive_DMA>
    mode_ = 0;
 8007428:	f241 03bc 	movw	r3, #4284	; 0x10bc
 800742c:	50ec      	str	r4, [r5, r3]
    bytes_ = 0;
 800742e:	f505 5386 	add.w	r3, r5, #4288	; 0x10c0
 8007432:	601c      	str	r4, [r3, #0]
    index_ = 0;
 8007434:	f241 03c8 	movw	r3, #4296	; 0x10c8
 8007438:	50ec      	str	r4, [r5, r3]
    topic_ = 0;
 800743a:	f241 03c4 	movw	r3, #4292	; 0x10c4
 800743e:	50ec      	str	r4, [r5, r3]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007440:	2c18      	cmp	r4, #24
 8007442:	dc12      	bgt.n	800746a <main+0xa2>
      if (subscribers[i] == 0) // empty slot
 8007444:	f204 421e 	addw	r2, r4, #1054	; 0x41e
 8007448:	4b27      	ldr	r3, [pc, #156]	; (80074e8 <main+0x120>)
 800744a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800744e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d140      	bne.n	80074d8 <main+0x110>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8007456:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <main+0x120>)
 8007458:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800745c:	4a23      	ldr	r2, [pc, #140]	; (80074ec <main+0x124>)
 800745e:	f102 0118 	add.w	r1, r2, #24
 8007462:	f843 1c20 	str.w	r1, [r3, #-32]
        s.id_ = i + 100;
 8007466:	3464      	adds	r4, #100	; 0x64
 8007468:	61d4      	str	r4, [r2, #28]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800746a:	2300      	movs	r3, #0
 800746c:	2b18      	cmp	r3, #24
 800746e:	dc15      	bgt.n	800749c <main+0xd4>
      if (publishers[i] == 0) // empty slot
 8007470:	f203 4106 	addw	r1, r3, #1030	; 0x406
 8007474:	4a1c      	ldr	r2, [pc, #112]	; (80074e8 <main+0x120>)
 8007476:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800747a:	f852 2c24 	ldr.w	r2, [r2, #-36]
 800747e:	bb6a      	cbnz	r2, 80074dc <main+0x114>
        publishers[i] = &p;
 8007480:	4a19      	ldr	r2, [pc, #100]	; (80074e8 <main+0x120>)
 8007482:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007486:	4919      	ldr	r1, [pc, #100]	; (80074ec <main+0x124>)
 8007488:	f101 0478 	add.w	r4, r1, #120	; 0x78
 800748c:	f840 4c24 	str.w	r4, [r0, #-36]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007490:	337d      	adds	r3, #125	; 0x7d
 8007492:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        p.nh_ = this;
 8007496:	3a24      	subs	r2, #36	; 0x24
 8007498:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800749c:	2300      	movs	r3, #0
 800749e:	2b18      	cmp	r3, #24
 80074a0:	dc15      	bgt.n	80074ce <main+0x106>
      if (publishers[i] == 0) // empty slot
 80074a2:	f203 4106 	addw	r1, r3, #1030	; 0x406
 80074a6:	4a10      	ldr	r2, [pc, #64]	; (80074e8 <main+0x120>)
 80074a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80074ac:	f852 2c24 	ldr.w	r2, [r2, #-36]
 80074b0:	b9b2      	cbnz	r2, 80074e0 <main+0x118>
        publishers[i] = &p;
 80074b2:	4a0d      	ldr	r2, [pc, #52]	; (80074e8 <main+0x120>)
 80074b4:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80074b8:	490c      	ldr	r1, [pc, #48]	; (80074ec <main+0x124>)
 80074ba:	f501 7488 	add.w	r4, r1, #272	; 0x110
 80074be:	f840 4c24 	str.w	r4, [r0, #-36]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80074c2:	337d      	adds	r3, #125	; 0x7d
 80074c4:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
        p.nh_ = this;
 80074c8:	3a24      	subs	r2, #36	; 0x24
 80074ca:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
  int send_last = HAL_GetTick();
 80074ce:	f7fa fb5b 	bl	8001b88 <HAL_GetTick>
 80074d2:	4605      	mov	r5, r0
 80074d4:	f000 bd23 	b.w	8007f1e <main+0xb56>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80074d8:	3401      	adds	r4, #1
 80074da:	e7b1      	b.n	8007440 <main+0x78>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80074dc:	3301      	adds	r3, #1
 80074de:	e7c5      	b.n	800746c <main+0xa4>
 80074e0:	3301      	adds	r3, #1
 80074e2:	e7dc      	b.n	800749e <main+0xd6>
 80074e4:	40004400 	.word	0x40004400
 80074e8:	20001628 	.word	0x20001628
 80074ec:	20002720 	.word	0x20002720
          if(HAL_GetTick() - send_last > send_freq)
 80074f0:	f7fa fb4a 	bl	8001b88 <HAL_GetTick>
 80074f4:	1b40      	subs	r0, r0, r5
 80074f6:	280a      	cmp	r0, #10
 80074f8:	f240 851e 	bls.w	8007f38 <main+0xb70>
		return HAL_GetTick();
 80074fc:	f7fa fb44 	bl	8001b88 <HAL_GetTick>
    current_time.sec = ms / 1000 + sec_offset;
 8007500:	4baf      	ldr	r3, [pc, #700]	; (80077c0 <main+0x3f8>)
 8007502:	fba3 2300 	umull	r2, r3, r3, r0
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	49ae      	ldr	r1, [pc, #696]	; (80077c4 <main+0x3fc>)
 800750a:	f851 2c18 	ldr.w	r2, [r1, #-24]
 800750e:	441a      	add	r2, r3
 8007510:	92f2      	str	r2, [sp, #968]	; 0x3c8
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8007512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007516:	fb02 0313 	mls	r3, r2, r3, r0
 800751a:	f851 2c14 	ldr.w	r2, [r1, #-20]
 800751e:	49aa      	ldr	r1, [pc, #680]	; (80077c8 <main+0x400>)
 8007520:	fb01 2303 	mla	r3, r1, r3, r2
 8007524:	93f3      	str	r3, [sp, #972]	; 0x3cc
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8007526:	aef2      	add	r6, sp, #968	; 0x3c8
 8007528:	a9f3      	add	r1, sp, #972	; 0x3cc
 800752a:	4630      	mov	r0, r6
 800752c:	f001 f842 	bl	80085b4 <_ZN3ros16normalizeSecNSecERmS0_>
        	  current_time = nh.now();
 8007530:	4ca6      	ldr	r4, [pc, #664]	; (80077cc <main+0x404>)
 8007532:	f504 7594 	add.w	r5, r4, #296	; 0x128
 8007536:	e896 0003 	ldmia.w	r6, {r0, r1}
 800753a:	e885 0003 	stmia.w	r5, {r0, r1}
    normalizeSecNSec(sec, nsec);
  }

  double toSec() const
  {
    return (double)sec + 1e-9 * (double)nsec;
 800753e:	f7f8 ff5b 	bl	80003f8 <__aeabi_ui2d>
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800754a:	f7f8 ff55 	bl	80003f8 <__aeabi_ui2d>
 800754e:	a39a      	add	r3, pc, #616	; (adr r3, 80077b8 <main+0x3f0>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f8 ffc6 	bl	80004e4 <__aeabi_dmul>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f8 fe0e 	bl	8000180 <__adddf3>
 8007564:	4606      	mov	r6, r0
 8007566:	460f      	mov	r7, r1
 8007568:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 800756c:	f7f8 ff44 	bl	80003f8 <__aeabi_ui2d>
 8007570:	4680      	mov	r8, r0
 8007572:	4689      	mov	r9, r1
 8007574:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8007578:	f7f8 ff3e 	bl	80003f8 <__aeabi_ui2d>
 800757c:	a38e      	add	r3, pc, #568	; (adr r3, 80077b8 <main+0x3f0>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f8 ffaf 	bl	80004e4 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4640      	mov	r0, r8
 800758c:	4649      	mov	r1, r9
 800758e:	f7f8 fdf7 	bl	8000180 <__adddf3>
        	      double dt = (current_time.toSec() - last_time.toSec());
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f8 fdef 	bl	800017c <__aeabi_dsub>
 800759e:	e9cd 0100 	strd	r0, r1, [sp]
        	      double delta_x = (vx * cos(th) - vy * sin(th)) * dt;
 80075a2:	f504 7a9c 	add.w	sl, r4, #312	; 0x138
 80075a6:	e9da 2300 	ldrd	r2, r3, [sl]
 80075aa:	4616      	mov	r6, r2
 80075ac:	461f      	mov	r7, r3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	f001 f96d 	bl	8008890 <cos>
 80075b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ba:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 80075be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	f7f8 ff8d 	bl	80004e4 <__aeabi_dmul>
 80075ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f001 f991 	bl	80088fc <sin>
 80075da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075de:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 80075e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80075e6:	4632      	mov	r2, r6
 80075e8:	463b      	mov	r3, r7
 80075ea:	f7f8 ff7b 	bl	80004e4 <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075f6:	f7f8 fdc1 	bl	800017c <__aeabi_dsub>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007602:	f7f8 ff6f 	bl	80004e4 <__aeabi_dmul>
 8007606:	e9cd 0108 	strd	r0, r1, [sp, #32]
        	      double delta_y = (vx * sin(th) + vy * cos(th)) * dt;
 800760a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f8 ff67 	bl	80004e4 <__aeabi_dmul>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	4632      	mov	r2, r6
 800761c:	463b      	mov	r3, r7
 800761e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007622:	f7f8 ff5f 	bl	80004e4 <__aeabi_dmul>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4640      	mov	r0, r8
 800762c:	4649      	mov	r1, r9
 800762e:	f7f8 fda7 	bl	8000180 <__adddf3>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	e9dd 6700 	ldrd	r6, r7, [sp]
 800763a:	4630      	mov	r0, r6
 800763c:	4639      	mov	r1, r7
 800763e:	f7f8 ff51 	bl	80004e4 <__aeabi_dmul>
 8007642:	4680      	mov	r8, r0
 8007644:	4689      	mov	r9, r1
        	      double delta_th = vth * dt;
 8007646:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f8 ff47 	bl	80004e4 <__aeabi_dmul>
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
        	      x += delta_x;
 800765a:	f504 7bac 	add.w	fp, r4, #344	; 0x158
 800765e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007662:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007666:	f7f8 fd8b 	bl	8000180 <__adddf3>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	e9cd 2300 	strd	r2, r3, [sp]
 8007672:	e9cb 2300 	strd	r2, r3, [fp]
        	      y += delta_y;
 8007676:	f504 7bb0 	add.w	fp, r4, #352	; 0x160
 800767a:	e9db 2300 	ldrd	r2, r3, [fp]
 800767e:	4640      	mov	r0, r8
 8007680:	4649      	mov	r1, r9
 8007682:	f7f8 fd7d 	bl	8000180 <__adddf3>
 8007686:	460a      	mov	r2, r1
 8007688:	4601      	mov	r1, r0
 800768a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800768e:	e88b 0006 	stmia.w	fp, {r1, r2}
        	      th += delta_th;
 8007692:	4632      	mov	r2, r6
 8007694:	463b      	mov	r3, r7
 8007696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769a:	f7f8 fd71 	bl	8000180 <__adddf3>
 800769e:	e9ca 0100 	strd	r0, r1, [sl]
 80076a2:	2600      	movs	r6, #0
 80076a4:	2700      	movs	r7, #0
 80076a6:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80076aa:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
  geometry_msgs::Quaternion q;
  q.x = 0;
  q.y = 0;
  q.z = sin(yaw * 0.5);
 80076ae:	2200      	movs	r2, #0
 80076b0:	4b47      	ldr	r3, [pc, #284]	; (80077d0 <main+0x408>)
 80076b2:	f7f8 ff17 	bl	80004e4 <__aeabi_dmul>
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	f001 f91f 	bl	80088fc <sin>
 80076be:	4682      	mov	sl, r0
 80076c0:	468b      	mov	fp, r1
 80076c2:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  q.w = cos(yaw * 0.5);
 80076c6:	4640      	mov	r0, r8
 80076c8:	4649      	mov	r1, r9
 80076ca:	f001 f8e1 	bl	8008890 <cos>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
      transform()
 80076d6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 80076da:	493e      	ldr	r1, [pc, #248]	; (80077d4 <main+0x40c>)
 80076dc:	9114      	str	r1, [sp, #80]	; 0x50
 80076de:	493e      	ldr	r1, [pc, #248]	; (80077d8 <main+0x410>)
 80076e0:	9115      	str	r1, [sp, #84]	; 0x54
 80076e2:	f04f 0900 	mov.w	r9, #0
 80076e6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
      rotation()
 80076ea:	493c      	ldr	r1, [pc, #240]	; (80077dc <main+0x414>)
 80076ec:	911c      	str	r1, [sp, #112]	; 0x70
 80076ee:	493c      	ldr	r1, [pc, #240]	; (80077e0 <main+0x418>)
 80076f0:	911e      	str	r1, [sp, #120]	; 0x78
 80076f2:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
 80076f6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007804 <main+0x43c>
 80076fa:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        	      odom_trans.header.stamp = current_time;
 80076fe:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8007702:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007706:	e88c 0003 	stmia.w	ip, {r0, r1}
        	      odom_trans.header.frame_id = "odom";
 800770a:	4936      	ldr	r1, [pc, #216]	; (80077e4 <main+0x41c>)
 800770c:	9119      	str	r1, [sp, #100]	; 0x64
        	      odom_trans.child_frame_id = "base_link";
 800770e:	4936      	ldr	r1, [pc, #216]	; (80077e8 <main+0x420>)
 8007710:	911a      	str	r1, [sp, #104]	; 0x68
        	      odom_trans.transform.translation.x = x;
 8007712:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007716:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
        	      odom_trans.transform.translation.y = y;
 800771a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771e:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
  class Quaternion : public ros::Msg
 8007722:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 8007726:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 800772a:	e9cd ab2c 	strd	sl, fp, [sp, #176]	; 0xb0
 800772e:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
    nh.advertise(publisher_);
  }

  void sendTransform(geometry_msgs::TransformStamped &transform)
  {
    internal_msg.transforms_length = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    internal_msg.transforms = &transform;
 8007738:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 800773c:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
 8007740:	6803      	ldr	r3, [r0, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f104 0290 	add.w	r2, r4, #144	; 0x90
 8007748:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 800774c:	4798      	blx	r3
      twist()
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <main+0x424>)
 8007750:	9330      	str	r3, [sp, #192]	; 0xc0
 8007752:	4b21      	ldr	r3, [pc, #132]	; (80077d8 <main+0x410>)
 8007754:	9331      	str	r3, [sp, #196]	; 0xc4
 8007756:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 800775a:	4b25      	ldr	r3, [pc, #148]	; (80077f0 <main+0x428>)
 800775c:	9338      	str	r3, [sp, #224]	; 0xe0
 800775e:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <main+0x42c>)
 8007760:	933a      	str	r3, [sp, #232]	; 0xe8
 8007762:	4b25      	ldr	r3, [pc, #148]	; (80077f8 <main+0x430>)
 8007764:	933c      	str	r3, [sp, #240]	; 0xf0
      w(0)
 8007766:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
 800776a:	2323      	movs	r3, #35	; 0x23
 800776c:	aa4e      	add	r2, sp, #312	; 0x138
 800776e:	2b00      	cmp	r3, #0
 8007770:	db05      	blt.n	800777e <main+0x3b6>
 8007772:	2000      	movs	r0, #0
 8007774:	2100      	movs	r1, #0
 8007776:	e8e2 0102 	strd	r0, r1, [r2], #8
 800777a:	3b01      	subs	r3, #1
 800777c:	e7f7      	b.n	800776e <main+0x3a6>
 800777e:	4b1f      	ldr	r3, [pc, #124]	; (80077fc <main+0x434>)
 8007780:	9396      	str	r3, [sp, #600]	; 0x258
 8007782:	4b1f      	ldr	r3, [pc, #124]	; (8007800 <main+0x438>)
 8007784:	9398      	str	r3, [sp, #608]	; 0x260
 8007786:	4916      	ldr	r1, [pc, #88]	; (80077e0 <main+0x418>)
 8007788:	919a      	str	r1, [sp, #616]	; 0x268
 800778a:	2200      	movs	r2, #0
 800778c:	2300      	movs	r3, #0
 800778e:	a8a0      	add	r0, sp, #640	; 0x280
 8007790:	e9c0 2300 	strd	r2, r3, [r0]
 8007794:	91a2      	str	r1, [sp, #648]	; 0x288
 8007796:	a9a4      	add	r1, sp, #656	; 0x290
 8007798:	e9c1 2300 	strd	r2, r3, [r1]
 800779c:	a9a6      	add	r1, sp, #664	; 0x298
 800779e:	e9c1 2300 	strd	r2, r3, [r1]
 80077a2:	2323      	movs	r3, #35	; 0x23
 80077a4:	aaaa      	add	r2, sp, #680	; 0x2a8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	db2e      	blt.n	8007808 <main+0x440>
 80077aa:	2000      	movs	r0, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	e8e2 0102 	strd	r0, r1, [r2], #8
 80077b2:	3b01      	subs	r3, #1
 80077b4:	e7f7      	b.n	80077a6 <main+0x3de>
 80077b6:	bf00      	nop
 80077b8:	e826d695 	.word	0xe826d695
 80077bc:	3e112e0b 	.word	0x3e112e0b
 80077c0:	10624dd3 	.word	0x10624dd3
 80077c4:	20001628 	.word	0x20001628
 80077c8:	000f4240 	.word	0x000f4240
 80077cc:	20002720 	.word	0x20002720
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	0800a880 	.word	0x0800a880
 80077d8:	0800a820 	.word	0x0800a820
 80077dc:	0800a868 	.word	0x0800a868
 80077e0:	0800a838 	.word	0x0800a838
 80077e4:	0800ad20 	.word	0x0800ad20
 80077e8:	0800ad28 	.word	0x0800ad28
 80077ec:	0800a93c 	.word	0x0800a93c
 80077f0:	0800a8f4 	.word	0x0800a8f4
 80077f4:	0800a8dc 	.word	0x0800a8dc
 80077f8:	0800a8c4 	.word	0x0800a8c4
 80077fc:	0800a924 	.word	0x0800a924
 8007800:	0800a90c 	.word	0x0800a90c
 8007804:	0800a850 	.word	0x0800a850
        	      odom.header.stamp = current_time;
 8007808:	aa30      	add	r2, sp, #192	; 0xc0
 800780a:	4cad      	ldr	r4, [pc, #692]	; (8007ac0 <main+0x6f8>)
 800780c:	ab33      	add	r3, sp, #204	; 0xcc
 800780e:	f504 7594 	add.w	r5, r4, #296	; 0x128
 8007812:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007816:	e883 0003 	stmia.w	r3, {r0, r1}
        	      odom.header.frame_id = "odom";
 800781a:	4baa      	ldr	r3, [pc, #680]	; (8007ac4 <main+0x6fc>)
 800781c:	6153      	str	r3, [r2, #20]
        	      odom.pose.pose.position.x = x;
 800781e:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 8007822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007826:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
        	      odom.pose.pose.position.y = y;
 800782a:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 800782e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007832:	e9c2 0110 	strd	r0, r1, [r2, #64]	; 0x40
        	      odom.pose.pose.position.z = 0.0;
 8007836:	2000      	movs	r0, #0
 8007838:	2100      	movs	r1, #0
 800783a:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
  class Quaternion : public ros::Msg
 800783e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007842:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
 8007846:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800784a:	e9c2 0118 	strd	r0, r1, [r2, #96]	; 0x60
 800784e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007852:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
 8007856:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800785a:	e9c2 011c 	strd	r0, r1, [r2, #112]	; 0x70
        	      odom.child_frame_id = "base_link";
 800785e:	4b9a      	ldr	r3, [pc, #616]	; (8007ac8 <main+0x700>)
 8007860:	6193      	str	r3, [r2, #24]
        	      odom.twist.twist.linear.x = vx;
 8007862:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 8007866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800786a:	ab9c      	add	r3, sp, #624	; 0x270
 800786c:	e9c3 0100 	strd	r0, r1, [r3]
        	      odom.twist.twist.linear.y = vy;
 8007870:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8007874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007878:	ab9e      	add	r3, sp, #632	; 0x278
 800787a:	e9c3 0100 	strd	r0, r1, [r3]
        	      odom.twist.twist.angular.z = vth;
 800787e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8007882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007886:	aba8      	add	r3, sp, #672	; 0x2a0
 8007888:	e9c3 0100 	strd	r0, r1, [r3]
 800788c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007890:	6803      	ldr	r3, [r0, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007898:	4798      	blx	r3
        	      last_time = current_time;
 800789a:	f504 7498 	add.w	r4, r4, #304	; 0x130
 800789e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80078a2:	e884 0003 	stmia.w	r4, {r0, r1}
        	      send_last = HAL_GetTick();
 80078a6:	f7fa f96f 	bl	8001b88 <HAL_GetTick>
 80078aa:	4605      	mov	r5, r0
 80078ac:	e344      	b.n	8007f38 <main+0xb70>
 80078ae:	f7fa f96b 	bl	8001b88 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80078b2:	1b00      	subs	r0, r0, r4
 80078b4:	4b85      	ldr	r3, [pc, #532]	; (8007acc <main+0x704>)
 80078b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80078ba:	4298      	cmp	r0, r3
 80078bc:	d927      	bls.n	800790e <main+0x546>
 80078be:	e301      	b.n	8007ec4 <main+0xafc>
			return -1;
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	e03d      	b.n	8007942 <main+0x57a>
        message_in[index_++] = data;
 80078c6:	4b81      	ldr	r3, [pc, #516]	; (8007acc <main+0x704>)
 80078c8:	f241 01c8 	movw	r1, #4296	; 0x10c8
 80078cc:	585a      	ldr	r2, [r3, r1]
 80078ce:	1c56      	adds	r6, r2, #1
 80078d0:	505e      	str	r6, [r3, r1]
 80078d2:	441a      	add	r2, r3
 80078d4:	f802 0c0c 	strb.w	r0, [r2, #-12]
        bytes_--;
 80078d8:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	3a01      	subs	r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80078e2:	b97a      	cbnz	r2, 8007904 <main+0x53c>
          mode_ = MODE_MSG_CHECKSUM;
 80078e4:	2108      	movs	r1, #8
 80078e6:	f241 03bc 	movw	r3, #4284	; 0x10bc
 80078ea:	4a78      	ldr	r2, [pc, #480]	; (8007acc <main+0x704>)
 80078ec:	50d1      	str	r1, [r2, r3]
 80078ee:	e009      	b.n	8007904 <main+0x53c>
          mode_++;
 80078f0:	4a76      	ldr	r2, [pc, #472]	; (8007acc <main+0x704>)
 80078f2:	3301      	adds	r3, #1
 80078f4:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80078f8:	5053      	str	r3, [r2, r1]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80078fa:	f104 0314 	add.w	r3, r4, #20
 80078fe:	f241 01dc 	movw	r1, #4316	; 0x10dc
 8007902:	5053      	str	r3, [r2, r1]
      if (spin_timeout_ > 0)
 8007904:	4b71      	ldr	r3, [pc, #452]	; (8007acc <main+0x704>)
 8007906:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1cf      	bne.n	80078ae <main+0x4e6>
		return com->read();
 800790e:	4b6f      	ldr	r3, [pc, #444]	; (8007acc <main+0x704>)
 8007910:	f853 1c20 	ldr.w	r1, [r3, #-32]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8007914:	f241 0308 	movw	r3, #4104	; 0x1008
 8007918:	58cb      	ldr	r3, [r1, r3]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 8007920:	425b      	negs	r3, r3
 8007922:	f3c3 030a 	ubfx	r3, r3, #0, #11
		if (rx_tail == rx_head)
 8007926:	f241 0202 	movw	r2, #4098	; 0x1002
 800792a:	5a8a      	ldrh	r2, [r1, r2]
 800792c:	4293      	cmp	r3, r2
 800792e:	d0c7      	beq.n	80078c0 <main+0x4f8>
		int c = (int) rx_buf[rx_tail++];
 8007930:	1c53      	adds	r3, r2, #1
 8007932:	440a      	add	r2, r1
 8007934:	f892 0800 	ldrb.w	r0, [r2, #2048]	; 0x800
		rx_tail &= buf_mask;
 8007938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800793c:	f241 0202 	movw	r2, #4098	; 0x1002
 8007940:	528b      	strh	r3, [r1, r2]
      if (data < 0)
 8007942:	2800      	cmp	r0, #0
 8007944:	f2c0 82b1 	blt.w	8007eaa <main+0xae2>
      checksum_ += data;
 8007948:	4b60      	ldr	r3, [pc, #384]	; (8007acc <main+0x704>)
 800794a:	f241 01cc 	movw	r1, #4300	; 0x10cc
 800794e:	585a      	ldr	r2, [r3, r1]
 8007950:	4402      	add	r2, r0
 8007952:	505a      	str	r2, [r3, r1]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8007954:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8007958:	585b      	ldr	r3, [r3, r1]
 800795a:	2b07      	cmp	r3, #7
 800795c:	d0b3      	beq.n	80078c6 <main+0x4fe>
      else if (mode_ == MODE_FIRST_FF)
 800795e:	b973      	cbnz	r3, 800797e <main+0x5b6>
        if (data == 0xff)
 8007960:	28ff      	cmp	r0, #255	; 0xff
 8007962:	d0c5      	beq.n	80078f0 <main+0x528>
		return HAL_GetTick();
 8007964:	f7fa f910 	bl	8001b88 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8007968:	1b00      	subs	r0, r0, r4
 800796a:	f241 3388 	movw	r3, #5000	; 0x1388
 800796e:	4298      	cmp	r0, r3
 8007970:	d9c8      	bls.n	8007904 <main+0x53c>
          configured_ = false;
 8007972:	2100      	movs	r1, #0
 8007974:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8007978:	4a54      	ldr	r2, [pc, #336]	; (8007acc <main+0x704>)
 800797a:	54d1      	strb	r1, [r2, r3]
 800797c:	e2a2      	b.n	8007ec4 <main+0xafc>
      else if (mode_ == MODE_PROTOCOL_VER)
 800797e:	2b01      	cmp	r3, #1
 8007980:	d03f      	beq.n	8007a02 <main+0x63a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007982:	2b02      	cmp	r3, #2
 8007984:	d061      	beq.n	8007a4a <main+0x682>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007986:	2b03      	cmp	r3, #3
 8007988:	d06f      	beq.n	8007a6a <main+0x6a2>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800798a:	2b04      	cmp	r3, #4
 800798c:	d079      	beq.n	8007a82 <main+0x6ba>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800798e:	2b05      	cmp	r3, #5
 8007990:	f000 808a 	beq.w	8007aa8 <main+0x6e0>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8007994:	2b06      	cmp	r3, #6
 8007996:	f000 809d 	beq.w	8007ad4 <main+0x70c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800799a:	2b08      	cmp	r3, #8
 800799c:	d1b2      	bne.n	8007904 <main+0x53c>
        mode_ = MODE_FIRST_FF;
 800799e:	2000      	movs	r0, #0
 80079a0:	f241 03bc 	movw	r3, #4284	; 0x10bc
 80079a4:	4949      	ldr	r1, [pc, #292]	; (8007acc <main+0x704>)
 80079a6:	50c8      	str	r0, [r1, r3]
        if ((checksum_ % 256) == 255)
 80079a8:	1a83      	subs	r3, r0, r2
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	bf58      	it	pl
 80079b0:	425a      	negpl	r2, r3
 80079b2:	2aff      	cmp	r2, #255	; 0xff
 80079b4:	d1a6      	bne.n	8007904 <main+0x53c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80079b6:	f241 03c4 	movw	r3, #4292	; 0x10c4
 80079ba:	58ce      	ldr	r6, [r1, r3]
 80079bc:	2e00      	cmp	r6, #0
 80079be:	f000 809f 	beq.w	8007b00 <main+0x738>
          else if (topic_ == TopicInfo::ID_TIME)
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	f000 8126 	beq.w	8007c14 <main+0x84c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80079c8:	2e06      	cmp	r6, #6
 80079ca:	f000 816d 	beq.w	8007ca8 <main+0x8e0>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80079ce:	2e0b      	cmp	r6, #11
 80079d0:	f000 8265 	beq.w	8007e9e <main+0xad6>
            if (subscribers[topic_ - 100])
 80079d4:	f1a6 0264 	sub.w	r2, r6, #100	; 0x64
 80079d8:	f206 36ba 	addw	r6, r6, #954	; 0x3ba
 80079dc:	4b3b      	ldr	r3, [pc, #236]	; (8007acc <main+0x704>)
 80079de:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80079e2:	f856 0c20 	ldr.w	r0, [r6, #-32]
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d08c      	beq.n	8007904 <main+0x53c>
              subscribers[topic_ - 100]->callback(message_in);
 80079ea:	4619      	mov	r1, r3
 80079ec:	f202 431e 	addw	r3, r2, #1054	; 0x41e
 80079f0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80079f4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	390c      	subs	r1, #12
 80079fe:	4798      	blx	r3
 8007a00:	e780      	b.n	8007904 <main+0x53c>
        if (data == PROTOCOL_VER)
 8007a02:	28fe      	cmp	r0, #254	; 0xfe
 8007a04:	d01b      	beq.n	8007a3e <main+0x676>
          mode_ = MODE_FIRST_FF;
 8007a06:	4b31      	ldr	r3, [pc, #196]	; (8007acc <main+0x704>)
 8007a08:	2100      	movs	r1, #0
 8007a0a:	f241 02bc 	movw	r2, #4284	; 0x10bc
 8007a0e:	5099      	str	r1, [r3, r2]
          if (configured_ == false)
 8007a10:	f241 02d0 	movw	r2, #4304	; 0x10d0
 8007a14:	5c9b      	ldrb	r3, [r3, r2]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f47f af74 	bne.w	8007904 <main+0x53c>
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	; (8007ad0 <main+0x708>)
 8007a1e:	9330      	str	r3, [sp, #192]	; 0xc0
  Time() : sec(0), nsec(0) {}
 8007a20:	9131      	str	r1, [sp, #196]	; 0xc4
 8007a22:	9132      	str	r1, [sp, #200]	; 0xc8
    publish(TopicInfo::ID_TIME, &t);
 8007a24:	4e29      	ldr	r6, [pc, #164]	; (8007acc <main+0x704>)
 8007a26:	4630      	mov	r0, r6
 8007a28:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	aa30      	add	r2, sp, #192	; 0xc0
 8007a30:	210a      	movs	r1, #10
 8007a32:	4798      	blx	r3
 8007a34:	f7fa f8a8 	bl	8001b88 <HAL_GetTick>
    rt_time = hardware_.time();
 8007a38:	f846 0c1c 	str.w	r0, [r6, #-28]
 8007a3c:	e762      	b.n	8007904 <main+0x53c>
          mode_++;
 8007a3e:	3301      	adds	r3, #1
 8007a40:	f241 02bc 	movw	r2, #4284	; 0x10bc
 8007a44:	4921      	ldr	r1, [pc, #132]	; (8007acc <main+0x704>)
 8007a46:	508b      	str	r3, [r1, r2]
 8007a48:	e75c      	b.n	8007904 <main+0x53c>
        bytes_ = data;
 8007a4a:	4a20      	ldr	r2, [pc, #128]	; (8007acc <main+0x704>)
 8007a4c:	f502 5186 	add.w	r1, r2, #4288	; 0x10c0
 8007a50:	6008      	str	r0, [r1, #0]
        index_ = 0;
 8007a52:	2600      	movs	r6, #0
 8007a54:	f241 01c8 	movw	r1, #4296	; 0x10c8
 8007a58:	5056      	str	r6, [r2, r1]
        mode_++;
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8007a60:	5053      	str	r3, [r2, r1]
        checksum_ = data;               /* first byte for calculating size checksum */
 8007a62:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8007a66:	50d0      	str	r0, [r2, r3]
 8007a68:	e74c      	b.n	8007904 <main+0x53c>
        bytes_ += data << 8;
 8007a6a:	4918      	ldr	r1, [pc, #96]	; (8007acc <main+0x704>)
 8007a6c:	f501 5686 	add.w	r6, r1, #4288	; 0x10c0
 8007a70:	6832      	ldr	r2, [r6, #0]
 8007a72:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8007a76:	6030      	str	r0, [r6, #0]
        mode_++;
 8007a78:	3301      	adds	r3, #1
 8007a7a:	f241 02bc 	movw	r2, #4284	; 0x10bc
 8007a7e:	508b      	str	r3, [r1, r2]
 8007a80:	e740      	b.n	8007904 <main+0x53c>
        if ((checksum_ % 256) == 255)
 8007a82:	4251      	negs	r1, r2
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	b2c9      	uxtb	r1, r1
 8007a88:	bf58      	it	pl
 8007a8a:	424a      	negpl	r2, r1
 8007a8c:	2aff      	cmp	r2, #255	; 0xff
 8007a8e:	d005      	beq.n	8007a9c <main+0x6d4>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007a90:	2100      	movs	r1, #0
 8007a92:	f241 03bc 	movw	r3, #4284	; 0x10bc
 8007a96:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <main+0x704>)
 8007a98:	50d1      	str	r1, [r2, r3]
 8007a9a:	e733      	b.n	8007904 <main+0x53c>
          mode_++;
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	f241 02bc 	movw	r2, #4284	; 0x10bc
 8007aa2:	490a      	ldr	r1, [pc, #40]	; (8007acc <main+0x704>)
 8007aa4:	508b      	str	r3, [r1, r2]
 8007aa6:	e72d      	b.n	8007904 <main+0x53c>
        topic_ = data;
 8007aa8:	4a08      	ldr	r2, [pc, #32]	; (8007acc <main+0x704>)
 8007aaa:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8007aae:	5050      	str	r0, [r2, r1]
        mode_++;
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8007ab6:	5053      	str	r3, [r2, r1]
        checksum_ = data;               /* first byte included in checksum */
 8007ab8:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8007abc:	50d0      	str	r0, [r2, r3]
 8007abe:	e721      	b.n	8007904 <main+0x53c>
 8007ac0:	20002720 	.word	0x20002720
 8007ac4:	0800ad20 	.word	0x0800ad20
 8007ac8:	0800ad28 	.word	0x0800ad28
 8007acc:	20001628 	.word	0x20001628
 8007ad0:	0800a7c0 	.word	0x0800a7c0
        topic_ += data << 8;
 8007ad4:	4bba      	ldr	r3, [pc, #744]	; (8007dc0 <main+0x9f8>)
 8007ad6:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8007ada:	585a      	ldr	r2, [r3, r1]
 8007adc:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8007ae0:	5058      	str	r0, [r3, r1]
        mode_ = MODE_MESSAGE;
 8007ae2:	2107      	movs	r1, #7
 8007ae4:	f241 02bc 	movw	r2, #4284	; 0x10bc
 8007ae8:	5099      	str	r1, [r3, r2]
        if (bytes_ == 0)
 8007aea:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f af07 	bne.w	8007904 <main+0x53c>
          mode_ = MODE_MSG_CHECKSUM;
 8007af6:	2108      	movs	r1, #8
 8007af8:	4613      	mov	r3, r2
 8007afa:	4ab1      	ldr	r2, [pc, #708]	; (8007dc0 <main+0x9f8>)
 8007afc:	50d1      	str	r1, [r2, r3]
 8007afe:	e701      	b.n	8007904 <main+0x53c>
 8007b00:	4bb0      	ldr	r3, [pc, #704]	; (8007dc4 <main+0x9fc>)
 8007b02:	9330      	str	r3, [sp, #192]	; 0xc0
 8007b04:	4680      	mov	r8, r0
 8007b06:	9031      	str	r0, [sp, #196]	; 0xc4
 8007b08:	9032      	str	r0, [sp, #200]	; 0xc8
    publish(TopicInfo::ID_TIME, &t);
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	aa30      	add	r2, sp, #192	; 0xc0
 8007b16:	210a      	movs	r1, #10
 8007b18:	4798      	blx	r3
 8007b1a:	f7fa f835 	bl	8001b88 <HAL_GetTick>
    rt_time = hardware_.time();
 8007b1e:	f847 0c1c 	str.w	r0, [r7, #-28]
 8007b22:	4ba9      	ldr	r3, [pc, #676]	; (8007dc8 <main+0xa00>)
 8007b24:	9330      	str	r3, [sp, #192]	; 0xc0
 8007b26:	f8ad 80c4 	strh.w	r8, [sp, #196]	; 0xc4
 8007b2a:	4ba8      	ldr	r3, [pc, #672]	; (8007dcc <main+0xa04>)
 8007b2c:	9332      	str	r3, [sp, #200]	; 0xc8
 8007b2e:	9333      	str	r3, [sp, #204]	; 0xcc
 8007b30:	9334      	str	r3, [sp, #208]	; 0xd0
 8007b32:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007b36:	4637      	mov	r7, r6
 8007b38:	e000      	b.n	8007b3c <main+0x774>
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	2f18      	cmp	r7, #24
 8007b3e:	dc2d      	bgt.n	8007b9c <main+0x7d4>
      if (publishers[i] != 0) // non-empty slot
 8007b40:	f207 4206 	addw	r2, r7, #1030	; 0x406
 8007b44:	4b9e      	ldr	r3, [pc, #632]	; (8007dc0 <main+0x9f8>)
 8007b46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007b4a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f3      	beq.n	8007b3a <main+0x772>
        ti.topic_id = publishers[i]->id_;
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	f8ad 20c4 	strh.w	r2, [sp, #196]	; 0xc4
        ti.topic_name = (char *) publishers[i]->topic_;
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	9232      	str	r2, [sp, #200]	; 0xc8
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007b5c:	6858      	ldr	r0, [r3, #4]
 8007b5e:	6803      	ldr	r3, [r0, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	4798      	blx	r3
 8007b64:	9033      	str	r0, [sp, #204]	; 0xcc
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007b66:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8007dc0 <main+0x9f8>
 8007b6a:	f207 4906 	addw	r9, r7, #1030	; 0x406
 8007b6e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8007b72:	f859 3c24 	ldr.w	r3, [r9, #-36]
 8007b76:	6858      	ldr	r0, [r3, #4]
 8007b78:	6803      	ldr	r3, [r0, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4798      	blx	r3
 8007b7e:	9034      	str	r0, [sp, #208]	; 0xd0
        ti.buffer_size = OUTPUT_SIZE;
 8007b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b84:	9335      	str	r3, [sp, #212]	; 0xd4
        publish(publishers[i]->getEndpointType(), &ti);
 8007b86:	4640      	mov	r0, r8
 8007b88:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f859 1c24 	ldr.w	r1, [r9, #-36]
 8007b92:	aa30      	add	r2, sp, #192	; 0xc0
 8007b94:	6909      	ldr	r1, [r1, #16]
 8007b96:	4798      	blx	r3
 8007b98:	e7cf      	b.n	8007b3a <main+0x772>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	2e18      	cmp	r6, #24
 8007b9e:	dc2d      	bgt.n	8007bfc <main+0x834>
      if (subscribers[i] != 0) // non-empty slot
 8007ba0:	f206 421e 	addw	r2, r6, #1054	; 0x41e
 8007ba4:	4b86      	ldr	r3, [pc, #536]	; (8007dc0 <main+0x9f8>)
 8007ba6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007baa:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d0f3      	beq.n	8007b9a <main+0x7d2>
        ti.topic_id = subscribers[i]->id_;
 8007bb2:	6843      	ldr	r3, [r0, #4]
 8007bb4:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        ti.topic_name = (char *) subscribers[i]->topic_;
 8007bb8:	6883      	ldr	r3, [r0, #8]
 8007bba:	9332      	str	r3, [sp, #200]	; 0xc8
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8007bbc:	6803      	ldr	r3, [r0, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4798      	blx	r3
 8007bc2:	9033      	str	r0, [sp, #204]	; 0xcc
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007bc4:	4f7e      	ldr	r7, [pc, #504]	; (8007dc0 <main+0x9f8>)
 8007bc6:	f206 481e 	addw	r8, r6, #1054	; 0x41e
 8007bca:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 8007bce:	f858 0c20 	ldr.w	r0, [r8, #-32]
 8007bd2:	6803      	ldr	r3, [r0, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	4798      	blx	r3
 8007bd8:	9034      	str	r0, [sp, #208]	; 0xd0
        ti.buffer_size = INPUT_SIZE;
 8007bda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bde:	9335      	str	r3, [sp, #212]	; 0xd4
        publish(subscribers[i]->getEndpointType(), &ti);
 8007be0:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8007be4:	f8d3 9000 	ldr.w	r9, [r3]
 8007be8:	f858 0c20 	ldr.w	r0, [r8, #-32]
 8007bec:	6803      	ldr	r3, [r0, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4798      	blx	r3
 8007bf2:	aa30      	add	r2, sp, #192	; 0xc0
 8007bf4:	4601      	mov	r1, r0
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c8      	blx	r9
 8007bfa:	e7ce      	b.n	8007b9a <main+0x7d2>
    configured_ = true;
 8007bfc:	4b70      	ldr	r3, [pc, #448]	; (8007dc0 <main+0x9f8>)
 8007bfe:	2101      	movs	r1, #1
 8007c00:	f241 02d0 	movw	r2, #4304	; 0x10d0
 8007c04:	5499      	strb	r1, [r3, r2]
            last_sync_time = c_time;
 8007c06:	f241 02d4 	movw	r2, #4308	; 0x10d4
 8007c0a:	509c      	str	r4, [r3, r2]
            last_sync_receive_time = c_time;
 8007c0c:	f241 02d8 	movw	r2, #4312	; 0x10d8
 8007c10:	509c      	str	r4, [r3, r2]
 8007c12:	e157      	b.n	8007ec4 <main+0xafc>
 8007c14:	f7f9 ffb8 	bl	8001b88 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 8007c18:	4e69      	ldr	r6, [pc, #420]	; (8007dc0 <main+0x9f8>)
 8007c1a:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8007c1e:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8007c20:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007c24:	f816 2c0b 	ldrb.w	r2, [r6, #-11]
 8007c28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007c2c:	f816 2c0a 	ldrb.w	r2, [r6, #-10]
 8007c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007c34:	f816 1c09 	ldrb.w	r1, [r6, #-9]
 8007c38:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8007c3c:	f816 3c08 	ldrb.w	r3, [r6, #-8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007c40:	f816 2c07 	ldrb.w	r2, [r6, #-7]
 8007c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007c48:	f816 2c06 	ldrb.w	r2, [r6, #-6]
 8007c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007c50:	f816 2c05 	ldrb.w	r2, [r6, #-5]
 8007c54:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
    t.data.sec += offset / 1000;
 8007c58:	4f5d      	ldr	r7, [pc, #372]	; (8007dd0 <main+0xa08>)
 8007c5a:	fba7 e300 	umull	lr, r3, r7, r0
 8007c5e:	099b      	lsrs	r3, r3, #6
 8007c60:	4419      	add	r1, r3
 8007c62:	9131      	str	r1, [sp, #196]	; 0xc4
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007c64:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8007c68:	fb09 0313 	mls	r3, r9, r3, r0
 8007c6c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8007dd8 <main+0xa10>
 8007c70:	fb08 2303 	mla	r3, r8, r3, r2
 8007c74:	9332      	str	r3, [sp, #200]	; 0xc8
 8007c76:	f7f9 ff87 	bl	8001b88 <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007c7a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007c7c:	fba7 1300 	umull	r1, r3, r7, r0
 8007c80:	099b      	lsrs	r3, r3, #6
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	3a01      	subs	r2, #1
 8007c86:	f846 2c18 	str.w	r2, [r6, #-24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007c8a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007c8c:	fb09 0313 	mls	r3, r9, r3, r0
 8007c90:	fb08 2313 	mls	r3, r8, r3, r2
 8007c94:	4a4f      	ldr	r2, [pc, #316]	; (8007dd4 <main+0xa0c>)
 8007c96:	441a      	add	r2, r3
 8007c98:	f846 2c14 	str.w	r2, [r6, #-20]
 8007c9c:	f7f9 ff74 	bl	8001b88 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8007ca0:	f241 03d8 	movw	r3, #4312	; 0x10d8
 8007ca4:	50f0      	str	r0, [r6, r3]
 8007ca6:	e62d      	b.n	8007904 <main+0x53c>
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007ca8:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <main+0x9f8>)
 8007caa:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007cae:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
 8007cb2:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007cb6:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 8007cba:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007cbe:	f813 2c09 	ldrb.w	r2, [r3, #-9]
 8007cc2:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
      if(ints_lengthT > ints_length)
 8007cc6:	f241 02e8 	movw	r2, #4328	; 0x10e8
 8007cca:	589b      	ldr	r3, [r3, r2]
 8007ccc:	429e      	cmp	r6, r3
 8007cce:	d825      	bhi.n	8007d1c <main+0x954>
      ints_length = ints_lengthT;
 8007cd0:	f241 03e8 	movw	r3, #4328	; 0x10e8
 8007cd4:	4a3a      	ldr	r2, [pc, #232]	; (8007dc0 <main+0x9f8>)
 8007cd6:	50d6      	str	r6, [r2, r3]
      for( uint32_t i = 0; i < ints_length; i++){
 8007cd8:	2100      	movs	r1, #0
      offset += sizeof(this->ints_length);
 8007cda:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8007cdc:	f241 03e8 	movw	r3, #4328	; 0x10e8
 8007ce0:	4a37      	ldr	r2, [pc, #220]	; (8007dc0 <main+0x9f8>)
 8007ce2:	58d3      	ldr	r3, [r2, r3]
 8007ce4:	428b      	cmp	r3, r1
 8007ce6:	d925      	bls.n	8007d34 <main+0x96c>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007ce8:	4610      	mov	r0, r2
 8007cea:	3a0c      	subs	r2, #12
 8007cec:	5d93      	ldrb	r3, [r2, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007cee:	1c77      	adds	r7, r6, #1
 8007cf0:	5dd7      	ldrb	r7, [r2, r7]
 8007cf2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007cf6:	1cb7      	adds	r7, r6, #2
 8007cf8:	5dd7      	ldrb	r7, [r2, r7]
 8007cfa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007cfe:	1cf7      	adds	r7, r6, #3
 8007d00:	5dd2      	ldrb	r2, [r2, r7]
 8007d02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_ints = u_st_ints.real;
 8007d06:	f241 02ec 	movw	r2, #4332	; 0x10ec
 8007d0a:	5083      	str	r3, [r0, r2]
      offset += sizeof(this->st_ints);
 8007d0c:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007d0e:	f241 02f0 	movw	r2, #4336	; 0x10f0
 8007d12:	5882      	ldr	r2, [r0, r2]
 8007d14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8007d18:	3101      	adds	r1, #1
 8007d1a:	e7df      	b.n	8007cdc <main+0x914>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8007d1c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007dc0 <main+0x9f8>
 8007d20:	f241 07f0 	movw	r7, #4336	; 0x10f0
 8007d24:	00b1      	lsls	r1, r6, #2
 8007d26:	f858 0007 	ldr.w	r0, [r8, r7]
 8007d2a:	f002 f85d 	bl	8009de8 <realloc>
 8007d2e:	f848 0007 	str.w	r0, [r8, r7]
 8007d32:	e7cd      	b.n	8007cd0 <main+0x908>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007d34:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <main+0x9f8>)
 8007d36:	f1a2 030c 	sub.w	r3, r2, #12
 8007d3a:	5d9f      	ldrb	r7, [r3, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007d3c:	1c71      	adds	r1, r6, #1
 8007d3e:	5c59      	ldrb	r1, [r3, r1]
 8007d40:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007d44:	1cb1      	adds	r1, r6, #2
 8007d46:	5c59      	ldrb	r1, [r3, r1]
 8007d48:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007d4c:	1cf1      	adds	r1, r6, #3
 8007d4e:	5c5b      	ldrb	r3, [r3, r1]
 8007d50:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8007d54:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 8007d56:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8007d5a:	58d3      	ldr	r3, [r2, r3]
 8007d5c:	429f      	cmp	r7, r3
 8007d5e:	d824      	bhi.n	8007daa <main+0x9e2>
      floats_length = floats_lengthT;
 8007d60:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8007d64:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <main+0x9f8>)
 8007d66:	50d7      	str	r7, [r2, r3]
      for( uint32_t i = 0; i < floats_length; i++){
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f241 03f4 	movw	r3, #4340	; 0x10f4
 8007d6e:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <main+0x9f8>)
 8007d70:	58d3      	ldr	r3, [r2, r3]
 8007d72:	428b      	cmp	r3, r1
 8007d74:	d932      	bls.n	8007ddc <main+0xa14>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007d76:	4610      	mov	r0, r2
 8007d78:	3a0c      	subs	r2, #12
 8007d7a:	5d93      	ldrb	r3, [r2, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007d7c:	1c77      	adds	r7, r6, #1
 8007d7e:	5dd7      	ldrb	r7, [r2, r7]
 8007d80:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007d84:	1cb7      	adds	r7, r6, #2
 8007d86:	5dd7      	ldrb	r7, [r2, r7]
 8007d88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007d8c:	1cf7      	adds	r7, r6, #3
 8007d8e:	5dd2      	ldrb	r2, [r2, r7]
 8007d90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
 8007d94:	f241 02f8 	movw	r2, #4344	; 0x10f8
 8007d98:	5083      	str	r3, [r0, r2]
      offset += sizeof(this->st_floats);
 8007d9a:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8007d9c:	f241 02fc 	movw	r2, #4348	; 0x10fc
 8007da0:	5882      	ldr	r2, [r0, r2]
 8007da2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8007da6:	3101      	adds	r1, #1
 8007da8:	e7df      	b.n	8007d6a <main+0x9a2>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8007daa:	4691      	mov	r9, r2
 8007dac:	f241 08fc 	movw	r8, #4348	; 0x10fc
 8007db0:	00b9      	lsls	r1, r7, #2
 8007db2:	f852 0008 	ldr.w	r0, [r2, r8]
 8007db6:	f002 f817 	bl	8009de8 <realloc>
 8007dba:	f849 0008 	str.w	r0, [r9, r8]
 8007dbe:	e7cf      	b.n	8007d60 <main+0x998>
 8007dc0:	20001628 	.word	0x20001628
 8007dc4:	0800a7c0 	.word	0x0800a7c0
 8007dc8:	0800a7d8 	.word	0x0800a7d8
 8007dcc:	0800ac7c 	.word	0x0800ac7c
 8007dd0:	10624dd3 	.word	0x10624dd3
 8007dd4:	3b9aca00 	.word	0x3b9aca00
 8007dd8:	000f4240 	.word	0x000f4240
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007ddc:	4b72      	ldr	r3, [pc, #456]	; (8007fa8 <main+0xbe0>)
 8007dde:	f1a3 020c 	sub.w	r2, r3, #12
 8007de2:	5d97      	ldrb	r7, [r2, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007de4:	1c71      	adds	r1, r6, #1
 8007de6:	5c51      	ldrb	r1, [r2, r1]
 8007de8:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007dec:	1cb1      	adds	r1, r6, #2
 8007dee:	5c51      	ldrb	r1, [r2, r1]
 8007df0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007df4:	1cf1      	adds	r1, r6, #3
 8007df6:	5c52      	ldrb	r2, [r2, r1]
 8007df8:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
      offset += sizeof(this->strings_length);
 8007dfc:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8007dfe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429f      	cmp	r7, r3
 8007e06:	d803      	bhi.n	8007e10 <main+0xa48>
      strings_length = strings_lengthT;
 8007e08:	4b68      	ldr	r3, [pc, #416]	; (8007fac <main+0xbe4>)
 8007e0a:	601f      	str	r7, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8007e0c:	2700      	movs	r7, #0
 8007e0e:	e03a      	b.n	8007e86 <main+0xabe>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8007e10:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8007fa8 <main+0xbe0>
 8007e14:	f241 1808 	movw	r8, #4360	; 0x1108
 8007e18:	00b9      	lsls	r1, r7, #2
 8007e1a:	f859 0008 	ldr.w	r0, [r9, r8]
 8007e1e:	f001 ffe3 	bl	8009de8 <realloc>
 8007e22:	f849 0008 	str.w	r0, [r9, r8]
 8007e26:	e7ef      	b.n	8007e08 <main+0xa40>
      var |= (arr[i] << (8 * i));
 8007e28:	4b5f      	ldr	r3, [pc, #380]	; (8007fa8 <main+0xbe0>)
 8007e2a:	4473      	add	r3, lr
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007e32:	00d0      	lsls	r0, r2, #3
 8007e34:	4083      	lsls	r3, r0
 8007e36:	4319      	orrs	r1, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8007e38:	3201      	adds	r2, #1
 8007e3a:	2a03      	cmp	r2, #3
 8007e3c:	d9f4      	bls.n	8007e28 <main+0xa60>
      offset += 4;
 8007e3e:	f106 0e04 	add.w	lr, r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007e42:	4673      	mov	r3, lr
 8007e44:	eb01 020e 	add.w	r2, r1, lr
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d909      	bls.n	8007e60 <main+0xa98>
          inbuffer[k-1]=inbuffer[k];
 8007e4c:	4a56      	ldr	r2, [pc, #344]	; (8007fa8 <main+0xbe0>)
 8007e4e:	f1a2 060c 	sub.w	r6, r2, #12
 8007e52:	1e58      	subs	r0, r3, #1
 8007e54:	441a      	add	r2, r3
 8007e56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007e5a:	5432      	strb	r2, [r6, r0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	e7f1      	b.n	8007e44 <main+0xa7c>
      inbuffer[offset+length_st_strings-1]=0;
 8007e60:	4951      	ldr	r1, [pc, #324]	; (8007fa8 <main+0xbe0>)
 8007e62:	f1a1 030c 	sub.w	r3, r1, #12
 8007e66:	1e50      	subs	r0, r2, #1
 8007e68:	2600      	movs	r6, #0
 8007e6a:	541e      	strb	r6, [r3, r0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8007e6c:	f10e 36ff 	add.w	r6, lr, #4294967295
 8007e70:	4433      	add	r3, r6
 8007e72:	f241 1004 	movw	r0, #4356	; 0x1104
 8007e76:	500b      	str	r3, [r1, r0]
      offset += length_st_strings;
 8007e78:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8007e7a:	f241 1208 	movw	r2, #4360	; 0x1108
 8007e7e:	588a      	ldr	r2, [r1, r2]
 8007e80:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8007e84:	3701      	adds	r7, #1
 8007e86:	4b49      	ldr	r3, [pc, #292]	; (8007fac <main+0xbe4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	42bb      	cmp	r3, r7
 8007e8c:	d903      	bls.n	8007e96 <main+0xace>
      arrToVar(length_st_strings, (inbuffer + offset));
 8007e8e:	46b6      	mov	lr, r6
    var = 0;
 8007e90:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8007e92:	460a      	mov	r2, r1
 8007e94:	e7d1      	b.n	8007e3a <main+0xa72>
            param_recieved = true;
 8007e96:	2201      	movs	r2, #1
 8007e98:	4b45      	ldr	r3, [pc, #276]	; (8007fb0 <main+0xbe8>)
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e532      	b.n	8007904 <main+0x53c>
            configured_ = false;
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8007ea4:	4a40      	ldr	r2, [pc, #256]	; (8007fa8 <main+0xbe0>)
 8007ea6:	54d1      	strb	r1, [r2, r3]
 8007ea8:	e52c      	b.n	8007904 <main+0x53c>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007eaa:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8007eae:	4a3e      	ldr	r2, [pc, #248]	; (8007fa8 <main+0xbe0>)
 8007eb0:	5cd3      	ldrb	r3, [r2, r3]
 8007eb2:	b13b      	cbz	r3, 8007ec4 <main+0xafc>
 8007eb4:	f241 03d4 	movw	r3, #4308	; 0x10d4
 8007eb8:	58d3      	ldr	r3, [r2, r3]
 8007eba:	1ae3      	subs	r3, r4, r3
 8007ebc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d85c      	bhi.n	8007f7e <main+0xbb6>
		buf_drv_send_decoded[0] = 'v';
 8007ec4:	4c3b      	ldr	r4, [pc, #236]	; (8007fb4 <main+0xbec>)
 8007ec6:	f04f 0a76 	mov.w	sl, #118	; 0x76
 8007eca:	f884 a168 	strb.w	sl, [r4, #360]	; 0x168
		memcpy(buf_drv_send_decoded + 1, &speed_drv1, sizeof(float));
 8007ece:	4f3a      	ldr	r7, [pc, #232]	; (8007fb8 <main+0xbf0>)
 8007ed0:	46b8      	mov	r8, r7
 8007ed2:	f858 3b48 	ldr.w	r3, [r8], #72
 8007ed6:	f8c4 3169 	str.w	r3, [r4, #361]	; 0x169
		cobs_encode(buf_drv_send_decoded, BUF_SIZE_DRV_SEND - 2, buf_drv_send);
 8007eda:	f504 76b8 	add.w	r6, r4, #368	; 0x170
 8007ede:	f504 79b4 	add.w	r9, r4, #360	; 0x168
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	2105      	movs	r1, #5
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	f7fa ffe6 	bl	8002eb8 <_Z11cobs_encodePKhjPh>
		HAL_UART_Transmit(&huart2, buf_drv_send, BUF_SIZE_DRV_SEND, 0x0FFF);
 8007eec:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	f7fa fd70 	bl	80029da <HAL_UART_Transmit>
		buf_drv_send_decoded[0] = 'v';
 8007efa:	f884 a168 	strb.w	sl, [r4, #360]	; 0x168
		memcpy(buf_drv_send_decoded + 1, &speed_drv2, sizeof(float));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c4 3169 	str.w	r3, [r4, #361]	; 0x169
		cobs_encode(buf_drv_send_decoded, BUF_SIZE_DRV_SEND - 2, buf_drv_send);
 8007f04:	4632      	mov	r2, r6
 8007f06:	2105      	movs	r1, #5
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f7fa ffd5 	bl	8002eb8 <_Z11cobs_encodePKhjPh>
		HAL_UART_Transmit(&huart3, buf_drv_send, BUF_SIZE_DRV_SEND, 0x0FFF);
 8007f0e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007f12:	2207      	movs	r2, #7
 8007f14:	4631      	mov	r1, r6
 8007f16:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8007f1a:	f7fa fd5e 	bl	80029da <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f24:	4825      	ldr	r0, [pc, #148]	; (8007fbc <main+0xbf4>)
 8007f26:	f7fa f909 	bl	800213c <HAL_GPIO_WritePin>
    return configured_;
 8007f2a:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <main+0xbe0>)
 8007f30:	5cd3      	ldrb	r3, [r2, r3]
      if (nh.connected())
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f47f aadc 	bne.w	80074f0 <main+0x128>
 8007f38:	f7f9 fe26 	bl	8001b88 <HAL_GetTick>
 8007f3c:	4604      	mov	r4, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007f3e:	f241 03d8 	movw	r3, #4312	; 0x10d8
 8007f42:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <main+0xbe0>)
 8007f44:	58d3      	ldr	r3, [r2, r3]
 8007f46:	1ac3      	subs	r3, r0, r3
 8007f48:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d904      	bls.n	8007f5a <main+0xb92>
      configured_ = false;
 8007f50:	2100      	movs	r1, #0
 8007f52:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <main+0xbe0>)
 8007f58:	54d1      	strb	r1, [r2, r3]
    if (mode_ != MODE_FIRST_FF)
 8007f5a:	f241 03bc 	movw	r3, #4284	; 0x10bc
 8007f5e:	4a12      	ldr	r2, [pc, #72]	; (8007fa8 <main+0xbe0>)
 8007f60:	58d3      	ldr	r3, [r2, r3]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f43f acce 	beq.w	8007904 <main+0x53c>
      if (c_time > last_msg_timeout_time)
 8007f68:	f241 03dc 	movw	r3, #4316	; 0x10dc
 8007f6c:	58d3      	ldr	r3, [r2, r3]
 8007f6e:	429c      	cmp	r4, r3
 8007f70:	f67f acc8 	bls.w	8007904 <main+0x53c>
        mode_ = MODE_FIRST_FF;
 8007f74:	2100      	movs	r1, #0
 8007f76:	f241 03bc 	movw	r3, #4284	; 0x10bc
 8007f7a:	50d1      	str	r1, [r2, r3]
 8007f7c:	e4c2      	b.n	8007904 <main+0x53c>
      data()
 8007f7e:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <main+0xbf8>)
 8007f80:	9330      	str	r3, [sp, #192]	; 0xc0
 8007f82:	2300      	movs	r3, #0
 8007f84:	9331      	str	r3, [sp, #196]	; 0xc4
 8007f86:	9332      	str	r3, [sp, #200]	; 0xc8
    publish(TopicInfo::ID_TIME, &t);
 8007f88:	4e07      	ldr	r6, [pc, #28]	; (8007fa8 <main+0xbe0>)
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	aa30      	add	r2, sp, #192	; 0xc0
 8007f94:	210a      	movs	r1, #10
 8007f96:	4798      	blx	r3
 8007f98:	f7f9 fdf6 	bl	8001b88 <HAL_GetTick>
    rt_time = hardware_.time();
 8007f9c:	f846 0c1c 	str.w	r0, [r6, #-28]
      last_sync_time = c_time;
 8007fa0:	f241 03d4 	movw	r3, #4308	; 0x10d4
 8007fa4:	50f4      	str	r4, [r6, r3]
 8007fa6:	e78d      	b.n	8007ec4 <main+0xafc>
 8007fa8:	20001628 	.word	0x20001628
 8007fac:	20002728 	.word	0x20002728
 8007fb0:	20002708 	.word	0x20002708
 8007fb4:	20002720 	.word	0x20002720
 8007fb8:	20000530 	.word	0x20000530
 8007fbc:	40011000 	.word	0x40011000
 8007fc0:	0800a7c0 	.word	0x0800a7c0

08007fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fc4:	4770      	bx	lr
	...

08007fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4604      	mov	r4, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	f7f9 fddb 	bl	8001b88 <HAL_GetTick>
    current_time.sec = ms / 1000 + sec_offset;
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x38>)
 8007fd4:	fba3 2300 	umull	r2, r3, r3, r0
 8007fd8:	099b      	lsrs	r3, r3, #6
 8007fda:	68ea      	ldr	r2, [r5, #12]
 8007fdc:	441a      	add	r2, r3
 8007fde:	6022      	str	r2, [r4, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8007fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fe4:	fb02 0213 	mls	r2, r2, r3, r0
 8007fe8:	692b      	ldr	r3, [r5, #16]
 8007fea:	4906      	ldr	r1, [pc, #24]	; (8008004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x3c>)
 8007fec:	fb01 3202 	mla	r2, r1, r2, r3
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	f841 2f04 	str.w	r2, [r1, #4]!
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fadc 	bl	80085b4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	10624dd3 	.word	0x10624dd3
 8008004:	000f4240 	.word	0x000f4240

08008008 <_Z41__static_initialization_and_destruction_0ii>:
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008008:	2801      	cmp	r0, #1
 800800a:	d000      	beq.n	800800e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800800c:	4770      	bx	lr
 800800e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008016:	4299      	cmp	r1, r3
 8008018:	d001      	beq.n	800801e <_Z41__static_initialization_and_destruction_0ii+0x16>
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 800801e:	496a      	ldr	r1, [pc, #424]	; (80081c8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8008020:	2201      	movs	r2, #1
 8008022:	f241 03c8 	movw	r3, #4296	; 0x10c8
 8008026:	54ca      	strb	r2, [r1, r3]
 8008028:	2300      	movs	r3, #0
 800802a:	f241 02ca 	movw	r2, #4298	; 0x10ca
 800802e:	528b      	strh	r3, [r1, r2]
 8008030:	f241 02cc 	movw	r2, #4300	; 0x10cc
 8008034:	528b      	strh	r3, [r1, r2]
 8008036:	f241 02ce 	movw	r2, #4302	; 0x10ce
 800803a:	528b      	strh	r3, [r1, r2]
 800803c:	f241 00d0 	movw	r0, #4304	; 0x10d0
 8008040:	f101 0208 	add.w	r2, r1, #8
 8008044:	500a      	str	r2, [r1, r0]
  NodeHandle_() : configured_(false)
 8008046:	4a61      	ldr	r2, [pc, #388]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8008048:	4c61      	ldr	r4, [pc, #388]	; (80081d0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800804a:	f842 4c24 	str.w	r4, [r2, #-36]
			com(&serial)
 800804e:	31c8      	adds	r1, #200	; 0xc8
 8008050:	f842 1c20 	str.w	r1, [r2, #-32]
 8008054:	5413      	strb	r3, [r2, r0]
      strings_length(0), strings(NULL)
 8008056:	485f      	ldr	r0, [pc, #380]	; (80081d4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8008058:	f241 01e4 	movw	r1, #4324	; 0x10e4
 800805c:	5050      	str	r0, [r2, r1]
 800805e:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8008062:	5053      	str	r3, [r2, r1]
 8008064:	f241 01f0 	movw	r1, #4336	; 0x10f0
 8008068:	5053      	str	r3, [r2, r1]
 800806a:	f241 01f4 	movw	r1, #4340	; 0x10f4
 800806e:	5053      	str	r3, [r2, r1]
 8008070:	f241 01fc 	movw	r1, #4348	; 0x10fc
 8008074:	5053      	str	r3, [r2, r1]
 8008076:	f502 5188 	add.w	r1, r2, #4352	; 0x1100
 800807a:	600b      	str	r3, [r1, #0]
 800807c:	f241 1108 	movw	r1, #4360	; 0x1108
 8008080:	5053      	str	r3, [r2, r1]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8008082:	2b18      	cmp	r3, #24
 8008084:	d809      	bhi.n	800809a <_Z41__static_initialization_and_destruction_0ii+0x92>
      publishers[i] = 0;
 8008086:	f203 4106 	addw	r1, r3, #1030	; 0x406
 800808a:	4a50      	ldr	r2, [pc, #320]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800808c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008090:	2100      	movs	r1, #0
 8008092:	f842 1c24 	str.w	r1, [r2, #-36]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8008096:	3301      	adds	r3, #1
 8008098:	e7f3      	b.n	8008082 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800809a:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800809c:	2b18      	cmp	r3, #24
 800809e:	d809      	bhi.n	80080b4 <_Z41__static_initialization_and_destruction_0ii+0xac>
      subscribers[i] = 0;
 80080a0:	f203 411e 	addw	r1, r3, #1054	; 0x41e
 80080a4:	4a49      	ldr	r2, [pc, #292]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80080a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80080aa:	2100      	movs	r1, #0
 80080ac:	f842 1c20 	str.w	r1, [r2, #-32]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80080b0:	3301      	adds	r3, #1
 80080b2:	e7f3      	b.n	800809c <_Z41__static_initialization_and_destruction_0ii+0x94>
 80080b4:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80080b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ba:	d206      	bcs.n	80080ca <_Z41__static_initialization_and_destruction_0ii+0xc2>
      message_in[i] = 0;
 80080bc:	4a43      	ldr	r2, [pc, #268]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80080be:	441a      	add	r2, r3
 80080c0:	2100      	movs	r1, #0
 80080c2:	f802 1c0c 	strb.w	r1, [r2, #-12]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80080c6:	3301      	adds	r3, #1
 80080c8:	e7f5      	b.n	80080b6 <_Z41__static_initialization_and_destruction_0ii+0xae>
 80080ca:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80080cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d0:	d206      	bcs.n	80080e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
      message_out[i] = 0;
 80080d2:	4a3e      	ldr	r2, [pc, #248]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80080d4:	441a      	add	r2, r3
 80080d6:	2100      	movs	r1, #0
 80080d8:	f882 17f4 	strb.w	r1, [r2, #2036]	; 0x7f4
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80080dc:	3301      	adds	r3, #1
 80080de:	e7f5      	b.n	80080cc <_Z41__static_initialization_and_destruction_0ii+0xc4>
    spin_timeout_ = 0;
 80080e0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80081cc <_Z41__static_initialization_and_destruction_0ii+0x1c4>
 80080e4:	2500      	movs	r5, #0
 80080e6:	f848 5c10 	str.w	r5, [r8, #-16]
nav_msgs::Odometry odom;
 80080ea:	4c3b      	ldr	r4, [pc, #236]	; (80081d8 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80080ec:	f504 76bc 	add.w	r6, r4, #376	; 0x178
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff f8d1 	bl	8007298 <_ZN8nav_msgs8OdometryC1Ev>
    endpoint_(endpoint) {};
 80080f6:	4b39      	ldr	r3, [pc, #228]	; (80081dc <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80080f8:	67a3      	str	r3, [r4, #120]	; 0x78
 80080fa:	67e6      	str	r6, [r4, #124]	; 0x7c
 80080fc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
      transforms_length(0), transforms(NULL)
 8008100:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8008102:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8008106:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 800810a:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800810c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8008110:	4b35      	ldr	r3, [pc, #212]	; (80081e8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8008112:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8008116:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 800811a:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800811e:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8008122:	4b32      	ldr	r3, [pc, #200]	; (80081ec <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008124:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8008128:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 800812c:	4b30      	ldr	r3, [pc, #192]	; (80081f0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800812e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8008132:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800820c <_Z41__static_initialization_and_destruction_0ii+0x204>
 8008136:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
 800813a:	2600      	movs	r6, #0
 800813c:	2700      	movs	r7, #0
 800813e:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 8008142:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 8008146:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
      w(0)
 800814a:	4b2a      	ldr	r3, [pc, #168]	; (80081f4 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800814c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008150:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 8008154:	e9c4 673c 	strd	r6, r7, [r4, #240]	; 0xf0
 8008158:	e9c4 673e 	strd	r6, r7, [r4, #248]	; 0xf8
 800815c:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8008160:	e9c3 6700 	strd	r6, r7, [r3]
 8008164:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 8008168:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800816a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800816e:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8008172:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008176:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
ros::Time current_time = nh.now();
 800817a:	f1a8 0824 	sub.w	r8, r8, #36	; 0x24
 800817e:	4641      	mov	r1, r8
 8008180:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8008184:	f7ff ff20 	bl	8007fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
ros::Time last_time = nh.now();
 8008188:	4641      	mov	r1, r8
 800818a:	f504 7098 	add.w	r0, r4, #304	; 0x130
 800818e:	f7ff ff1b 	bl	8007fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
    endpoint_(endpoint)
 8008192:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8008194:	61a3      	str	r3, [r4, #24]
 8008196:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8008198:	62a3      	str	r3, [r4, #40]	; 0x28
 800819a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 800819e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
 80081a2:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
 80081a6:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
 80081aa:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 80081ae:	e9c4 6716 	strd	r6, r7, [r4, #88]	; 0x58
 80081b2:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
 80081b6:	e9c4 671a 	strd	r6, r7, [r4, #104]	; 0x68
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80081bc:	6723      	str	r3, [r4, #112]	; 0x70
 80081be:	2301      	movs	r3, #1
 80081c0:	6763      	str	r3, [r4, #116]	; 0x74
    topic_ = topic_name;
 80081c2:	4b11      	ldr	r3, [pc, #68]	; (8008208 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80081c4:	6223      	str	r3, [r4, #32]
}
 80081c6:	e728      	b.n	800801a <_Z41__static_initialization_and_destruction_0ii+0x12>
 80081c8:	20000530 	.word	0x20000530
 80081cc:	20001628 	.word	0x20001628
 80081d0:	0800a8b0 	.word	0x0800a8b0
 80081d4:	0800a808 	.word	0x0800a808
 80081d8:	20002720 	.word	0x20002720
 80081dc:	0800ad20 	.word	0x0800ad20
 80081e0:	0800a898 	.word	0x0800a898
 80081e4:	0800a880 	.word	0x0800a880
 80081e8:	0800a820 	.word	0x0800a820
 80081ec:	0800ac7c 	.word	0x0800ac7c
 80081f0:	0800a868 	.word	0x0800a868
 80081f4:	0800a850 	.word	0x0800a850
 80081f8:	0800ad34 	.word	0x0800ad34
 80081fc:	0800a954 	.word	0x0800a954
 8008200:	0800a90c 	.word	0x0800a90c
 8008204:	080037b9 	.word	0x080037b9
 8008208:	0800ad38 	.word	0x0800ad38
 800820c:	0800a838 	.word	0x0800a838

08008210 <_GLOBAL__sub_I_serial>:
 8008210:	b508      	push	{r3, lr}
 8008212:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008216:	2001      	movs	r0, #1
 8008218:	f7ff fef6 	bl	8008008 <_Z41__static_initialization_and_destruction_0ii>
 800821c:	bd08      	pop	{r3, pc}
	...

08008220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008220:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008222:	4b0e      	ldr	r3, [pc, #56]	; (800825c <HAL_MspInit+0x3c>)
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	619a      	str	r2, [r3, #24]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	f002 0201 	and.w	r2, r2, #1
 8008232:	9200      	str	r2, [sp, #0]
 8008234:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800823c:	61da      	str	r2, [r3, #28]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008248:	4a05      	ldr	r2, [pc, #20]	; (8008260 <HAL_MspInit+0x40>)
 800824a:	6853      	ldr	r3, [r2, #4]
 800824c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008256:	b002      	add	sp, #8
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40021000 	.word	0x40021000
 8008260:	40010000 	.word	0x40010000

08008264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008268:	2300      	movs	r3, #0
 800826a:	9306      	str	r3, [sp, #24]
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8008272:	6803      	ldr	r3, [r0, #0]
 8008274:	4a67      	ldr	r2, [pc, #412]	; (8008414 <HAL_UART_MspInit+0x1b0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d008      	beq.n	800828c <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800827a:	4a67      	ldr	r2, [pc, #412]	; (8008418 <HAL_UART_MspInit+0x1b4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d066      	beq.n	800834e <HAL_UART_MspInit+0xea>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8008280:	4a66      	ldr	r2, [pc, #408]	; (800841c <HAL_UART_MspInit+0x1b8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	f000 8093 	beq.w	80083ae <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008288:	b00a      	add	sp, #40	; 0x28
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800828e:	4b64      	ldr	r3, [pc, #400]	; (8008420 <HAL_UART_MspInit+0x1bc>)
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008296:	619a      	str	r2, [r3, #24]
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800829e:	9200      	str	r2, [sp, #0]
 80082a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	f042 0204 	orr.w	r2, r2, #4
 80082a8:	619a      	str	r2, [r3, #24]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80082b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ba:	2302      	movs	r3, #2
 80082bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082be:	2303      	movs	r3, #3
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c2:	4e58      	ldr	r6, [pc, #352]	; (8008424 <HAL_UART_MspInit+0x1c0>)
 80082c4:	a906      	add	r1, sp, #24
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7f9 fe40 	bl	8001f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80082cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082d2:	2500      	movs	r5, #0
 80082d4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d6:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d8:	a906      	add	r1, sp, #24
 80082da:	4630      	mov	r0, r6
 80082dc:	f7f9 fe36 	bl	8001f4c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80082e0:	4851      	ldr	r0, [pc, #324]	; (8008428 <HAL_UART_MspInit+0x1c4>)
 80082e2:	4b52      	ldr	r3, [pc, #328]	; (800842c <HAL_UART_MspInit+0x1c8>)
 80082e4:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082e6:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082e8:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082ee:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082f0:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80082f2:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80082f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082f8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80082fa:	f7f9 fcc9 	bl	8001c90 <HAL_DMA_Init>
 80082fe:	bb00      	cbnz	r0, 8008342 <HAL_UART_MspInit+0xde>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008300:	4b49      	ldr	r3, [pc, #292]	; (8008428 <HAL_UART_MspInit+0x1c4>)
 8008302:	6363      	str	r3, [r4, #52]	; 0x34
 8008304:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008306:	484a      	ldr	r0, [pc, #296]	; (8008430 <HAL_UART_MspInit+0x1cc>)
 8008308:	4b4a      	ldr	r3, [pc, #296]	; (8008434 <HAL_UART_MspInit+0x1d0>)
 800830a:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800830c:	2310      	movs	r3, #16
 800830e:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008310:	2300      	movs	r3, #0
 8008312:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008314:	2280      	movs	r2, #128	; 0x80
 8008316:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008318:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800831a:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800831c:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800831e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008322:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008324:	f7f9 fcb4 	bl	8001c90 <HAL_DMA_Init>
 8008328:	b970      	cbnz	r0, 8008348 <HAL_UART_MspInit+0xe4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800832a:	4b41      	ldr	r3, [pc, #260]	; (8008430 <HAL_UART_MspInit+0x1cc>)
 800832c:	6323      	str	r3, [r4, #48]	; 0x30
 800832e:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008330:	2200      	movs	r2, #0
 8008332:	4611      	mov	r1, r2
 8008334:	2025      	movs	r0, #37	; 0x25
 8008336:	f7f9 fc3f 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800833a:	2025      	movs	r0, #37	; 0x25
 800833c:	f7f9 fc6e 	bl	8001c1c <HAL_NVIC_EnableIRQ>
 8008340:	e7a2      	b.n	8008288 <HAL_UART_MspInit+0x24>
      Error_Handler();
 8008342:	f7ff fe3f 	bl	8007fc4 <Error_Handler>
 8008346:	e7db      	b.n	8008300 <HAL_UART_MspInit+0x9c>
      Error_Handler();
 8008348:	f7ff fe3c 	bl	8007fc4 <Error_Handler>
 800834c:	e7ed      	b.n	800832a <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800834e:	4b34      	ldr	r3, [pc, #208]	; (8008420 <HAL_UART_MspInit+0x1bc>)
 8008350:	69da      	ldr	r2, [r3, #28]
 8008352:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008356:	61da      	str	r2, [r3, #28]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800835e:	9202      	str	r2, [sp, #8]
 8008360:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008362:	699a      	ldr	r2, [r3, #24]
 8008364:	f042 0204 	orr.w	r2, r2, #4
 8008368:	619a      	str	r2, [r3, #24]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008374:	2304      	movs	r3, #4
 8008376:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008378:	2302      	movs	r3, #2
 800837a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800837c:	2303      	movs	r3, #3
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008380:	4d28      	ldr	r5, [pc, #160]	; (8008424 <HAL_UART_MspInit+0x1c0>)
 8008382:	a906      	add	r1, sp, #24
 8008384:	4628      	mov	r0, r5
 8008386:	f7f9 fde1 	bl	8001f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800838a:	2308      	movs	r3, #8
 800838c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800838e:	2400      	movs	r4, #0
 8008390:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008392:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008394:	a906      	add	r1, sp, #24
 8008396:	4628      	mov	r0, r5
 8008398:	f7f9 fdd8 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800839c:	4622      	mov	r2, r4
 800839e:	4621      	mov	r1, r4
 80083a0:	2026      	movs	r0, #38	; 0x26
 80083a2:	f7f9 fc09 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80083a6:	2026      	movs	r0, #38	; 0x26
 80083a8:	f7f9 fc38 	bl	8001c1c <HAL_NVIC_EnableIRQ>
 80083ac:	e76c      	b.n	8008288 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART3_CLK_ENABLE();
 80083ae:	4b1c      	ldr	r3, [pc, #112]	; (8008420 <HAL_UART_MspInit+0x1bc>)
 80083b0:	69da      	ldr	r2, [r3, #28]
 80083b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083b6:	61da      	str	r2, [r3, #28]
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80083be:	9204      	str	r2, [sp, #16]
 80083c0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083c2:	699a      	ldr	r2, [r3, #24]
 80083c4:	f042 0208 	orr.w	r2, r2, #8
 80083c8:	619a      	str	r2, [r3, #24]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	f003 0308 	and.w	r3, r3, #8
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80083d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083da:	2302      	movs	r3, #2
 80083dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083de:	2303      	movs	r3, #3
 80083e0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083e2:	4d15      	ldr	r5, [pc, #84]	; (8008438 <HAL_UART_MspInit+0x1d4>)
 80083e4:	a906      	add	r1, sp, #24
 80083e6:	4628      	mov	r0, r5
 80083e8:	f7f9 fdb0 	bl	8001f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083f0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083f2:	2400      	movs	r4, #0
 80083f4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083f8:	a906      	add	r1, sp, #24
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7f9 fda6 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008400:	4622      	mov	r2, r4
 8008402:	4621      	mov	r1, r4
 8008404:	2027      	movs	r0, #39	; 0x27
 8008406:	f7f9 fbd7 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800840a:	2027      	movs	r0, #39	; 0x27
 800840c:	f7f9 fc06 	bl	8001c1c <HAL_NVIC_EnableIRQ>
}
 8008410:	e73a      	b.n	8008288 <HAL_UART_MspInit+0x24>
 8008412:	bf00      	nop
 8008414:	40013800 	.word	0x40013800
 8008418:	40004400 	.word	0x40004400
 800841c:	40004800 	.word	0x40004800
 8008420:	40021000 	.word	0x40021000
 8008424:	40010800 	.word	0x40010800
 8008428:	20002bfc 	.word	0x20002bfc
 800842c:	40020058 	.word	0x40020058
 8008430:	20002bb8 	.word	0x20002bb8
 8008434:	40020044 	.word	0x40020044
 8008438:	40010c00 	.word	0x40010c00

0800843c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800843c:	4770      	bx	lr

0800843e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800843e:	e7fe      	b.n	800843e <HardFault_Handler>

08008440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008440:	e7fe      	b.n	8008440 <MemManage_Handler>

08008442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008442:	e7fe      	b.n	8008442 <BusFault_Handler>

08008444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008444:	e7fe      	b.n	8008444 <UsageFault_Handler>

08008446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008446:	4770      	bx	lr

08008448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008448:	4770      	bx	lr

0800844a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800844a:	4770      	bx	lr

0800844c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800844c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800844e:	f7f9 fb8f 	bl	8001b70 <HAL_IncTick>
 8008452:	bd08      	pop	{r3, pc}

08008454 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008454:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008456:	4802      	ldr	r0, [pc, #8]	; (8008460 <DMA1_Channel4_IRQHandler+0xc>)
 8008458:	f7f9 fcd6 	bl	8001e08 <HAL_DMA_IRQHandler>
 800845c:	bd08      	pop	{r3, pc}
 800845e:	bf00      	nop
 8008460:	20002bb8 	.word	0x20002bb8

08008464 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008464:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008466:	4802      	ldr	r0, [pc, #8]	; (8008470 <DMA1_Channel5_IRQHandler+0xc>)
 8008468:	f7f9 fcce 	bl	8001e08 <HAL_DMA_IRQHandler>
 800846c:	bd08      	pop	{r3, pc}
 800846e:	bf00      	nop
 8008470:	20002bfc 	.word	0x20002bfc

08008474 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008476:	4802      	ldr	r0, [pc, #8]	; (8008480 <USART1_IRQHandler+0xc>)
 8008478:	f7fa fc86 	bl	8002d88 <HAL_UART_IRQHandler>
 800847c:	bd08      	pop	{r3, pc}
 800847e:	bf00      	nop
 8008480:	20000538 	.word	0x20000538

08008484 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008484:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	static uint8_t counter;

	if (USART2->SR&USART_SR_RXNE) // if data received
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <USART2_IRQHandler+0x34>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f013 0f20 	tst.w	r3, #32
 800848e:	d00a      	beq.n	80084a6 <USART2_IRQHandler+0x22>
	{
		buf_drv1[counter] = USART2->DR;
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <USART2_IRQHandler+0x38>)
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <USART2_IRQHandler+0x34>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	4909      	ldr	r1, [pc, #36]	; (80084c0 <USART2_IRQHandler+0x3c>)
 800849c:	548b      	strb	r3, [r1, r2]
		if (buf_drv1[counter] == 0)
 800849e:	b133      	cbz	r3, 80084ae <USART2_IRQHandler+0x2a>
		{
			counter  = 0;
			return ;
		}
		counter++;
 80084a0:	3201      	adds	r2, #1
 80084a2:	4b06      	ldr	r3, [pc, #24]	; (80084bc <USART2_IRQHandler+0x38>)
 80084a4:	701a      	strb	r2, [r3, #0]

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80084a6:	4807      	ldr	r0, [pc, #28]	; (80084c4 <USART2_IRQHandler+0x40>)
 80084a8:	f7fa fc6e 	bl	8002d88 <HAL_UART_IRQHandler>
 80084ac:	bd08      	pop	{r3, pc}
			counter  = 0;
 80084ae:	2200      	movs	r2, #0
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USART2_IRQHandler+0x38>)
 80084b2:	701a      	strb	r2, [r3, #0]
			return ;
 80084b4:	bd08      	pop	{r3, pc}
 80084b6:	bf00      	nop
 80084b8:	40004400 	.word	0x40004400
 80084bc:	20002c40 	.word	0x20002c40
 80084c0:	20002bb0 	.word	0x20002bb0
 80084c4:	20000578 	.word	0x20000578

080084c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80084c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */
	static uint8_t counter;

	if (USART3->SR&USART_SR_RXNE) // if data received
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <USART3_IRQHandler+0x34>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f013 0f20 	tst.w	r3, #32
 80084d2:	d00a      	beq.n	80084ea <USART3_IRQHandler+0x22>
	{
		buf_drv2[counter] = USART3->DR;
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <USART3_IRQHandler+0x38>)
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	4b08      	ldr	r3, [pc, #32]	; (80084fc <USART3_IRQHandler+0x34>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	4909      	ldr	r1, [pc, #36]	; (8008504 <USART3_IRQHandler+0x3c>)
 80084e0:	548b      	strb	r3, [r1, r2]
		if (buf_drv2[counter] == 0)
 80084e2:	b133      	cbz	r3, 80084f2 <USART3_IRQHandler+0x2a>
		{
			counter  = 0;
			return ;
		}
		counter++;
 80084e4:	3201      	adds	r2, #1
 80084e6:	4b06      	ldr	r3, [pc, #24]	; (8008500 <USART3_IRQHandler+0x38>)
 80084e8:	701a      	strb	r2, [r3, #0]

	}

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80084ea:	4807      	ldr	r0, [pc, #28]	; (8008508 <USART3_IRQHandler+0x40>)
 80084ec:	f7fa fc4c 	bl	8002d88 <HAL_UART_IRQHandler>
 80084f0:	bd08      	pop	{r3, pc}
			counter  = 0;
 80084f2:	2200      	movs	r2, #0
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USART3_IRQHandler+0x38>)
 80084f6:	701a      	strb	r2, [r3, #0]
			return ;
 80084f8:	bd08      	pop	{r3, pc}
 80084fa:	bf00      	nop
 80084fc:	40004800 	.word	0x40004800
 8008500:	20002c41 	.word	0x20002c41
 8008504:	20002ba8 	.word	0x20002ba8
 8008508:	200005b8 	.word	0x200005b8

0800850c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800850c:	2001      	movs	r0, #1
 800850e:	4770      	bx	lr

08008510 <_kill>:

int _kill(int pid, int sig)
{
 8008510:	b508      	push	{r3, lr}
	errno = EINVAL;
 8008512:	f001 fa0b 	bl	800992c <__errno>
 8008516:	2316      	movs	r3, #22
 8008518:	6003      	str	r3, [r0, #0]
	return -1;
}
 800851a:	f04f 30ff 	mov.w	r0, #4294967295
 800851e:	bd08      	pop	{r3, pc}

08008520 <_exit>:

void _exit (int status)
{
 8008520:	b508      	push	{r3, lr}
	_kill(status, -1);
 8008522:	f04f 31ff 	mov.w	r1, #4294967295
 8008526:	f7ff fff3 	bl	8008510 <_kill>
 800852a:	e7fe      	b.n	800852a <_exit+0xa>

0800852c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800852c:	b508      	push	{r3, lr}
 800852e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008530:	4a0b      	ldr	r2, [pc, #44]	; (8008560 <_sbrk+0x34>)
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	b142      	cbz	r2, 8008548 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8008536:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <_sbrk+0x34>)
 8008538:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800853a:	4403      	add	r3, r0
 800853c:	466a      	mov	r2, sp
 800853e:	4293      	cmp	r3, r2
 8008540:	d806      	bhi.n	8008550 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8008542:	4a07      	ldr	r2, [pc, #28]	; (8008560 <_sbrk+0x34>)
 8008544:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8008546:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8008548:	4906      	ldr	r1, [pc, #24]	; (8008564 <_sbrk+0x38>)
 800854a:	4a05      	ldr	r2, [pc, #20]	; (8008560 <_sbrk+0x34>)
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	e7f2      	b.n	8008536 <_sbrk+0xa>
		errno = ENOMEM;
 8008550:	f001 f9ec 	bl	800992c <__errno>
 8008554:	230c      	movs	r3, #12
 8008556:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	bd08      	pop	{r3, pc}
 800855e:	bf00      	nop
 8008560:	20002c44 	.word	0x20002c44
 8008564:	20002c90 	.word	0x20002c90

08008568 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008568:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <SystemInit+0x40>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f042 0201 	orr.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008572:	6859      	ldr	r1, [r3, #4]
 8008574:	4a0d      	ldr	r2, [pc, #52]	; (80085ac <SystemInit+0x44>)
 8008576:	400a      	ands	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008580:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008584:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800858c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008594:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008596:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800859a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800859c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085a0:	4b03      	ldr	r3, [pc, #12]	; (80085b0 <SystemInit+0x48>)
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40021000 	.word	0x40021000
 80085ac:	f8ff0000 	.word	0xf8ff0000
 80085b0:	e000ed00 	.word	0xe000ed00

080085b4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80085b4:	b430      	push	{r4, r5}
  uint32_t nsec_part = nsec % 1000000000UL;
 80085b6:	680c      	ldr	r4, [r1, #0]
 80085b8:	0a63      	lsrs	r3, r4, #9
 80085ba:	4a07      	ldr	r2, [pc, #28]	; (80085d8 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	09da      	lsrs	r2, r3, #7
 80085c2:	4d06      	ldr	r5, [pc, #24]	; (80085dc <_ZN3ros16normalizeSecNSecERmS0_+0x28>)
 80085c4:	fb05 4212 	mls	r2, r5, r2, r4
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
 80085c8:	6804      	ldr	r4, [r0, #0]
 80085ca:	eb04 13d3 	add.w	r3, r4, r3, lsr #7
 80085ce:	6003      	str	r3, [r0, #0]
  nsec = nsec_part;
 80085d0:	600a      	str	r2, [r1, #0]
}
 80085d2:	bc30      	pop	{r4, r5}
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	00044b83 	.word	0x00044b83
 80085dc:	3b9aca00 	.word	0x3b9aca00

080085e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80085e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80085e2:	e003      	b.n	80085ec <LoopCopyDataInit>

080085e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80085e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80085e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80085ea:	3104      	adds	r1, #4

080085ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80085ec:	480a      	ldr	r0, [pc, #40]	; (8008618 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80085f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80085f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80085f4:	d3f6      	bcc.n	80085e4 <CopyDataInit>
  ldr r2, =_sbss
 80085f6:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80085f8:	e002      	b.n	8008600 <LoopFillZerobss>

080085fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80085fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80085fc:	f842 3b04 	str.w	r3, [r2], #4

08008600 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008600:	4b08      	ldr	r3, [pc, #32]	; (8008624 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008602:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008604:	d3f9      	bcc.n	80085fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008606:	f7ff ffaf 	bl	8008568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800860a:	f001 f995 	bl	8009938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800860e:	f7fe fedb 	bl	80073c8 <main>
  bx lr
 8008612:	4770      	bx	lr
  ldr r3, =_sidata
 8008614:	0800b1e4 	.word	0x0800b1e4
  ldr r0, =_sdata
 8008618:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800861c:	20000510 	.word	0x20000510
  ldr r2, =_sbss
 8008620:	20000510 	.word	0x20000510
  ldr r3, = _ebss
 8008624:	20002c90 	.word	0x20002c90

08008628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008628:	e7fe      	b.n	8008628 <ADC1_2_IRQHandler>
	...

0800862c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800862c:	b510      	push	{r4, lr}
 800862e:	4604      	mov	r4, r0
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8008632:	6003      	str	r3, [r0, #0]
 8008634:	f000 f8b6 	bl	80087a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008638:	4620      	mov	r0, r4
 800863a:	bd10      	pop	{r4, pc}
 800863c:	0800ad94 	.word	0x0800ad94

08008640 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8008640:	b510      	push	{r4, lr}
 8008642:	4604      	mov	r4, r0
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8008646:	6003      	str	r3, [r0, #0]
 8008648:	f000 f8ac 	bl	80087a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800864c:	4620      	mov	r0, r4
 800864e:	210c      	movs	r1, #12
 8008650:	f000 f884 	bl	800875c <_ZdlPvj>
 8008654:	4620      	mov	r0, r4
 8008656:	bd10      	pop	{r4, pc}
 8008658:	0800ad94 	.word	0x0800ad94

0800865c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	9c06      	ldr	r4, [sp, #24]
 8008662:	460d      	mov	r5, r1
 8008664:	4294      	cmp	r4, r2
 8008666:	4606      	mov	r6, r0
 8008668:	d009      	beq.n	800867e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800866a:	68b0      	ldr	r0, [r6, #8]
 800866c:	4629      	mov	r1, r5
 800866e:	6806      	ldr	r6, [r0, #0]
 8008670:	9406      	str	r4, [sp, #24]
 8008672:	6a34      	ldr	r4, [r6, #32]
 8008674:	46a4      	mov	ip, r4
 8008676:	b002      	add	sp, #8
 8008678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800867c:	4760      	bx	ip
 800867e:	4619      	mov	r1, r3
 8008680:	9201      	str	r2, [sp, #4]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	f000 f8ec 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	9a01      	ldr	r2, [sp, #4]
 800868c:	2800      	cmp	r0, #0
 800868e:	d0ec      	beq.n	800866a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8008690:	2006      	movs	r0, #6
 8008692:	b002      	add	sp, #8
 8008694:	bd70      	pop	{r4, r5, r6, pc}
 8008696:	bf00      	nop

08008698 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	4689      	mov	r9, r1
 800869e:	b081      	sub	sp, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	461d      	mov	r5, r3
 80086a4:	4616      	mov	r6, r2
 80086a6:	4607      	mov	r7, r0
 80086a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086aa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80086ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086b2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80086b6:	f000 f8d3 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 80086ba:	b188      	cbz	r0, 80086e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
 80086bc:	f1b9 0f00 	cmp.w	r9, #0
 80086c0:	f8c8 4000 	str.w	r4, [r8]
 80086c4:	f888 6004 	strb.w	r6, [r8, #4]
 80086c8:	db1e      	blt.n	8008708 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 80086ca:	444c      	add	r4, r9
 80086cc:	45a2      	cmp	sl, r4
 80086ce:	bf0c      	ite	eq
 80086d0:	2406      	moveq	r4, #6
 80086d2:	2401      	movne	r4, #1
 80086d4:	f888 4006 	strb.w	r4, [r8, #6]
 80086d8:	2000      	movs	r0, #0
 80086da:	b001      	add	sp, #4
 80086dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e0:	4554      	cmp	r4, sl
 80086e2:	d018      	beq.n	8008716 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7e>
 80086e4:	68b8      	ldr	r0, [r7, #8]
 80086e6:	462b      	mov	r3, r5
 80086e8:	6805      	ldr	r5, [r0, #0]
 80086ea:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80086ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80086f2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086f6:	940a      	str	r4, [sp, #40]	; 0x28
 80086f8:	69ec      	ldr	r4, [r5, #28]
 80086fa:	4632      	mov	r2, r6
 80086fc:	4649      	mov	r1, r9
 80086fe:	46a4      	mov	ip, r4
 8008700:	b001      	add	sp, #4
 8008702:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008706:	4760      	bx	ip
 8008708:	f119 0f02 	cmn.w	r9, #2
 800870c:	d1e4      	bne.n	80086d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800870e:	2301      	movs	r3, #1
 8008710:	f888 3006 	strb.w	r3, [r8, #6]
 8008714:	e7e0      	b.n	80086d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8008716:	4659      	mov	r1, fp
 8008718:	4638      	mov	r0, r7
 800871a:	f000 f8a1 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 800871e:	2800      	cmp	r0, #0
 8008720:	d0e0      	beq.n	80086e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
 8008722:	2000      	movs	r0, #0
 8008724:	f888 6005 	strb.w	r6, [r8, #5]
 8008728:	b001      	add	sp, #4
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872e:	bf00      	nop

08008730 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	4607      	mov	r7, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4615      	mov	r5, r2
 800873a:	461e      	mov	r6, r3
 800873c:	f000 f84a 	bl	80087d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8008740:	b108      	cbz	r0, 8008746 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 8008742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008746:	68b8      	ldr	r0, [r7, #8]
 8008748:	4633      	mov	r3, r6
 800874a:	6806      	ldr	r6, [r0, #0]
 800874c:	4621      	mov	r1, r4
 800874e:	69b4      	ldr	r4, [r6, #24]
 8008750:	462a      	mov	r2, r5
 8008752:	46a4      	mov	ip, r4
 8008754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008758:	4760      	bx	ip
 800875a:	bf00      	nop

0800875c <_ZdlPvj>:
 800875c:	f000 b896 	b.w	800888c <_ZdlPv>

08008760 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	2400      	movs	r4, #0
 8008764:	2610      	movs	r6, #16
 8008766:	6803      	ldr	r3, [r0, #0]
 8008768:	b084      	sub	sp, #16
 800876a:	4615      	mov	r5, r2
 800876c:	9602      	str	r6, [sp, #8]
 800876e:	6812      	ldr	r2, [r2, #0]
 8008770:	699e      	ldr	r6, [r3, #24]
 8008772:	9400      	str	r4, [sp, #0]
 8008774:	466b      	mov	r3, sp
 8008776:	f88d 4004 	strb.w	r4, [sp, #4]
 800877a:	9403      	str	r4, [sp, #12]
 800877c:	47b0      	blx	r6
 800877e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008782:	f003 0306 	and.w	r3, r3, #6
 8008786:	2b06      	cmp	r3, #6
 8008788:	bf09      	itett	eq
 800878a:	2001      	moveq	r0, #1
 800878c:	4620      	movne	r0, r4
 800878e:	9b00      	ldreq	r3, [sp, #0]
 8008790:	602b      	streq	r3, [r5, #0]
 8008792:	b004      	add	sp, #16
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	bf00      	nop

08008798 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8008798:	9800      	ldr	r0, [sp, #0]
 800879a:	4290      	cmp	r0, r2
 800879c:	bf0c      	ite	eq
 800879e:	2006      	moveq	r0, #6
 80087a0:	2001      	movne	r0, #1
 80087a2:	4770      	bx	lr

080087a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4604      	mov	r4, r0
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	f000 f854 	bl	8008858 <_ZNSt9type_infoD1Ev>
 80087b0:	4620      	mov	r0, r4
 80087b2:	bd10      	pop	{r4, pc}
 80087b4:	0800adf0 	.word	0x0800adf0

080087b8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 80087be:	6003      	str	r3, [r0, #0]
 80087c0:	f000 f84a 	bl	8008858 <_ZNSt9type_infoD1Ev>
 80087c4:	4620      	mov	r0, r4
 80087c6:	2108      	movs	r1, #8
 80087c8:	f7ff ffc8 	bl	800875c <_ZdlPvj>
 80087cc:	4620      	mov	r0, r4
 80087ce:	bd10      	pop	{r4, pc}
 80087d0:	0800adf0 	.word	0x0800adf0

080087d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4615      	mov	r5, r2
 80087d8:	461c      	mov	r4, r3
 80087da:	f000 f841 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 80087de:	b120      	cbz	r0, 80087ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80087e0:	2208      	movs	r2, #8
 80087e2:	2306      	movs	r3, #6
 80087e4:	6025      	str	r5, [r4, #0]
 80087e6:	60e2      	str	r2, [r4, #12]
 80087e8:	7123      	strb	r3, [r4, #4]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}

080087ec <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80087ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f0:	4617      	mov	r7, r2
 80087f2:	461c      	mov	r4, r3
 80087f4:	4606      	mov	r6, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	f000 f832 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 80087fc:	b908      	cbnz	r0, 8008802 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80087fe:	2c03      	cmp	r4, #3
 8008800:	d901      	bls.n	8008806 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 8008802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	463a      	mov	r2, r7
 800880a:	4631      	mov	r1, r6
 800880c:	4628      	mov	r0, r5
 800880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	4718      	bx	r3
 8008816:	bf00      	nop

08008818 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8008818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881a:	b083      	sub	sp, #12
 800881c:	9d08      	ldr	r5, [sp, #32]
 800881e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008820:	4617      	mov	r7, r2
 8008822:	428d      	cmp	r5, r1
 8008824:	4606      	mov	r6, r0
 8008826:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008828:	d00b      	beq.n	8008842 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800882a:	4619      	mov	r1, r3
 800882c:	4630      	mov	r0, r6
 800882e:	f000 f817 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 8008832:	b118      	cbz	r0, 800883c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8008834:	2301      	movs	r3, #1
 8008836:	6025      	str	r5, [r4, #0]
 8008838:	7127      	strb	r7, [r4, #4]
 800883a:	71a3      	strb	r3, [r4, #6]
 800883c:	2000      	movs	r0, #0
 800883e:	b003      	add	sp, #12
 8008840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008842:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	f000 f80b 	bl	8008860 <_ZNKSt9type_infoeqERKS_>
 800884a:	b118      	cbz	r0, 8008854 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800884c:	2000      	movs	r0, #0
 800884e:	7167      	strb	r7, [r4, #5]
 8008850:	b003      	add	sp, #12
 8008852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	e7e8      	b.n	800882a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

08008858 <_ZNSt9type_infoD1Ev>:
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop

0800885c <_ZNKSt9type_info14__is_pointer_pEv>:
 800885c:	2000      	movs	r0, #0
 800885e:	4770      	bx	lr

08008860 <_ZNKSt9type_infoeqERKS_>:
 8008860:	4281      	cmp	r1, r0
 8008862:	d011      	beq.n	8008888 <_ZNKSt9type_infoeqERKS_+0x28>
 8008864:	b508      	push	{r3, lr}
 8008866:	6840      	ldr	r0, [r0, #4]
 8008868:	7803      	ldrb	r3, [r0, #0]
 800886a:	2b2a      	cmp	r3, #42	; 0x2a
 800886c:	d00a      	beq.n	8008884 <_ZNKSt9type_infoeqERKS_+0x24>
 800886e:	6849      	ldr	r1, [r1, #4]
 8008870:	780b      	ldrb	r3, [r1, #0]
 8008872:	2b2a      	cmp	r3, #42	; 0x2a
 8008874:	bf08      	it	eq
 8008876:	3101      	addeq	r1, #1
 8008878:	f7f7 fc6a 	bl	8000150 <strcmp>
 800887c:	fab0 f080 	clz	r0, r0
 8008880:	0940      	lsrs	r0, r0, #5
 8008882:	bd08      	pop	{r3, pc}
 8008884:	2000      	movs	r0, #0
 8008886:	bd08      	pop	{r3, pc}
 8008888:	2001      	movs	r0, #1
 800888a:	4770      	bx	lr

0800888c <_ZdlPv>:
 800888c:	f001 b878 	b.w	8009980 <free>

08008890 <cos>:
 8008890:	b530      	push	{r4, r5, lr}
 8008892:	4a18      	ldr	r2, [pc, #96]	; (80088f4 <cos+0x64>)
 8008894:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008898:	4293      	cmp	r3, r2
 800889a:	b087      	sub	sp, #28
 800889c:	dc04      	bgt.n	80088a8 <cos+0x18>
 800889e:	2200      	movs	r2, #0
 80088a0:	2300      	movs	r3, #0
 80088a2:	f000 fa59 	bl	8008d58 <__kernel_cos>
 80088a6:	e006      	b.n	80088b6 <cos+0x26>
 80088a8:	4a13      	ldr	r2, [pc, #76]	; (80088f8 <cos+0x68>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	dd05      	ble.n	80088ba <cos+0x2a>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	f7f7 fc63 	bl	800017c <__aeabi_dsub>
 80088b6:	b007      	add	sp, #28
 80088b8:	bd30      	pop	{r4, r5, pc}
 80088ba:	aa02      	add	r2, sp, #8
 80088bc:	f000 f858 	bl	8008970 <__ieee754_rem_pio2>
 80088c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c4:	f000 0403 	and.w	r4, r0, #3
 80088c8:	2c01      	cmp	r4, #1
 80088ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ce:	d008      	beq.n	80088e2 <cos+0x52>
 80088d0:	2c02      	cmp	r4, #2
 80088d2:	d00c      	beq.n	80088ee <cos+0x5e>
 80088d4:	2c00      	cmp	r4, #0
 80088d6:	d0e4      	beq.n	80088a2 <cos+0x12>
 80088d8:	2401      	movs	r4, #1
 80088da:	9400      	str	r4, [sp, #0]
 80088dc:	f000 fe70 	bl	80095c0 <__kernel_sin>
 80088e0:	e7e9      	b.n	80088b6 <cos+0x26>
 80088e2:	9400      	str	r4, [sp, #0]
 80088e4:	f000 fe6c 	bl	80095c0 <__kernel_sin>
 80088e8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80088ec:	e7e3      	b.n	80088b6 <cos+0x26>
 80088ee:	f000 fa33 	bl	8008d58 <__kernel_cos>
 80088f2:	e7f9      	b.n	80088e8 <cos+0x58>
 80088f4:	3fe921fb 	.word	0x3fe921fb
 80088f8:	7fefffff 	.word	0x7fefffff

080088fc <sin>:
 80088fc:	b530      	push	{r4, r5, lr}
 80088fe:	4a1a      	ldr	r2, [pc, #104]	; (8008968 <sin+0x6c>)
 8008900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008904:	4293      	cmp	r3, r2
 8008906:	b087      	sub	sp, #28
 8008908:	dc06      	bgt.n	8008918 <sin+0x1c>
 800890a:	2300      	movs	r3, #0
 800890c:	2200      	movs	r2, #0
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	f000 fe55 	bl	80095c0 <__kernel_sin>
 8008916:	e006      	b.n	8008926 <sin+0x2a>
 8008918:	4a14      	ldr	r2, [pc, #80]	; (800896c <sin+0x70>)
 800891a:	4293      	cmp	r3, r2
 800891c:	dd05      	ble.n	800892a <sin+0x2e>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	f7f7 fc2b 	bl	800017c <__aeabi_dsub>
 8008926:	b007      	add	sp, #28
 8008928:	bd30      	pop	{r4, r5, pc}
 800892a:	aa02      	add	r2, sp, #8
 800892c:	f000 f820 	bl	8008970 <__ieee754_rem_pio2>
 8008930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008934:	f000 0403 	and.w	r4, r0, #3
 8008938:	2c01      	cmp	r4, #1
 800893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893e:	d005      	beq.n	800894c <sin+0x50>
 8008940:	2c02      	cmp	r4, #2
 8008942:	d006      	beq.n	8008952 <sin+0x56>
 8008944:	b964      	cbnz	r4, 8008960 <sin+0x64>
 8008946:	2401      	movs	r4, #1
 8008948:	9400      	str	r4, [sp, #0]
 800894a:	e7e2      	b.n	8008912 <sin+0x16>
 800894c:	f000 fa04 	bl	8008d58 <__kernel_cos>
 8008950:	e7e9      	b.n	8008926 <sin+0x2a>
 8008952:	2401      	movs	r4, #1
 8008954:	9400      	str	r4, [sp, #0]
 8008956:	f000 fe33 	bl	80095c0 <__kernel_sin>
 800895a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800895e:	e7e2      	b.n	8008926 <sin+0x2a>
 8008960:	f000 f9fa 	bl	8008d58 <__kernel_cos>
 8008964:	e7f9      	b.n	800895a <sin+0x5e>
 8008966:	bf00      	nop
 8008968:	3fe921fb 	.word	0x3fe921fb
 800896c:	7fefffff 	.word	0x7fefffff

08008970 <__ieee754_rem_pio2>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4614      	mov	r4, r2
 8008976:	4ac4      	ldr	r2, [pc, #784]	; (8008c88 <__ieee754_rem_pio2+0x318>)
 8008978:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800897c:	4592      	cmp	sl, r2
 800897e:	b08d      	sub	sp, #52	; 0x34
 8008980:	468b      	mov	fp, r1
 8008982:	dc07      	bgt.n	8008994 <__ieee754_rem_pio2+0x24>
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	e9c4 0100 	strd	r0, r1, [r4]
 800898c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008990:	2500      	movs	r5, #0
 8008992:	e023      	b.n	80089dc <__ieee754_rem_pio2+0x6c>
 8008994:	4abd      	ldr	r2, [pc, #756]	; (8008c8c <__ieee754_rem_pio2+0x31c>)
 8008996:	4592      	cmp	sl, r2
 8008998:	dc71      	bgt.n	8008a7e <__ieee754_rem_pio2+0x10e>
 800899a:	a3ad      	add	r3, pc, #692	; (adr r3, 8008c50 <__ieee754_rem_pio2+0x2e0>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	2900      	cmp	r1, #0
 80089a2:	4dbb      	ldr	r5, [pc, #748]	; (8008c90 <__ieee754_rem_pio2+0x320>)
 80089a4:	dd36      	ble.n	8008a14 <__ieee754_rem_pio2+0xa4>
 80089a6:	f7f7 fbe9 	bl	800017c <__aeabi_dsub>
 80089aa:	45aa      	cmp	sl, r5
 80089ac:	4606      	mov	r6, r0
 80089ae:	460f      	mov	r7, r1
 80089b0:	d018      	beq.n	80089e4 <__ieee754_rem_pio2+0x74>
 80089b2:	a3a9      	add	r3, pc, #676	; (adr r3, 8008c58 <__ieee754_rem_pio2+0x2e8>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fbe0 	bl	800017c <__aeabi_dsub>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4630      	mov	r0, r6
 80089c2:	e9c4 2300 	strd	r2, r3, [r4]
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f7 fbd8 	bl	800017c <__aeabi_dsub>
 80089cc:	a3a2      	add	r3, pc, #648	; (adr r3, 8008c58 <__ieee754_rem_pio2+0x2e8>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f7f7 fbd3 	bl	800017c <__aeabi_dsub>
 80089d6:	2501      	movs	r5, #1
 80089d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089dc:	4628      	mov	r0, r5
 80089de:	b00d      	add	sp, #52	; 0x34
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	a39e      	add	r3, pc, #632	; (adr r3, 8008c60 <__ieee754_rem_pio2+0x2f0>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f7 fbc7 	bl	800017c <__aeabi_dsub>
 80089ee:	a39e      	add	r3, pc, #632	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x2f8>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	f7f7 fbc0 	bl	800017c <__aeabi_dsub>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4630      	mov	r0, r6
 8008a02:	e9c4 2300 	strd	r2, r3, [r4]
 8008a06:	4639      	mov	r1, r7
 8008a08:	f7f7 fbb8 	bl	800017c <__aeabi_dsub>
 8008a0c:	a396      	add	r3, pc, #600	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x2f8>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	e7de      	b.n	80089d2 <__ieee754_rem_pio2+0x62>
 8008a14:	f7f7 fbb4 	bl	8000180 <__adddf3>
 8008a18:	45aa      	cmp	sl, r5
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	d016      	beq.n	8008a4e <__ieee754_rem_pio2+0xde>
 8008a20:	a38d      	add	r3, pc, #564	; (adr r3, 8008c58 <__ieee754_rem_pio2+0x2e8>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fbab 	bl	8000180 <__adddf3>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4630      	mov	r0, r6
 8008a30:	e9c4 2300 	strd	r2, r3, [r4]
 8008a34:	4639      	mov	r1, r7
 8008a36:	f7f7 fba1 	bl	800017c <__aeabi_dsub>
 8008a3a:	a387      	add	r3, pc, #540	; (adr r3, 8008c58 <__ieee754_rem_pio2+0x2e8>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	f7f7 fb9e 	bl	8000180 <__adddf3>
 8008a44:	f04f 35ff 	mov.w	r5, #4294967295
 8008a48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a4c:	e7c6      	b.n	80089dc <__ieee754_rem_pio2+0x6c>
 8008a4e:	a384      	add	r3, pc, #528	; (adr r3, 8008c60 <__ieee754_rem_pio2+0x2f0>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f7f7 fb94 	bl	8000180 <__adddf3>
 8008a58:	a383      	add	r3, pc, #524	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x2f8>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	f7f7 fb8d 	bl	8000180 <__adddf3>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	e9c4 2300 	strd	r2, r3, [r4]
 8008a70:	4639      	mov	r1, r7
 8008a72:	f7f7 fb83 	bl	800017c <__aeabi_dsub>
 8008a76:	a37c      	add	r3, pc, #496	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x2f8>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	e7e0      	b.n	8008a40 <__ieee754_rem_pio2+0xd0>
 8008a7e:	4a85      	ldr	r2, [pc, #532]	; (8008c94 <__ieee754_rem_pio2+0x324>)
 8008a80:	4592      	cmp	sl, r2
 8008a82:	f300 80d6 	bgt.w	8008c32 <__ieee754_rem_pio2+0x2c2>
 8008a86:	f000 fe51 	bl	800972c <fabs>
 8008a8a:	a379      	add	r3, pc, #484	; (adr r3, 8008c70 <__ieee754_rem_pio2+0x300>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	4606      	mov	r6, r0
 8008a92:	460f      	mov	r7, r1
 8008a94:	f7f7 fd26 	bl	80004e4 <__aeabi_dmul>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4b7f      	ldr	r3, [pc, #508]	; (8008c98 <__ieee754_rem_pio2+0x328>)
 8008a9c:	f7f7 fb70 	bl	8000180 <__adddf3>
 8008aa0:	f7f7 ffba 	bl	8000a18 <__aeabi_d2iz>
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	f7f7 fcb7 	bl	8000418 <__aeabi_i2d>
 8008aaa:	a369      	add	r3, pc, #420	; (adr r3, 8008c50 <__ieee754_rem_pio2+0x2e0>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab4:	f7f7 fd16 	bl	80004e4 <__aeabi_dmul>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4630      	mov	r0, r6
 8008abe:	4639      	mov	r1, r7
 8008ac0:	f7f7 fb5c 	bl	800017c <__aeabi_dsub>
 8008ac4:	a364      	add	r3, pc, #400	; (adr r3, 8008c58 <__ieee754_rem_pio2+0x2e8>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	4606      	mov	r6, r0
 8008acc:	460f      	mov	r7, r1
 8008ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad2:	f7f7 fd07 	bl	80004e4 <__aeabi_dmul>
 8008ad6:	2d1f      	cmp	r5, #31
 8008ad8:	4680      	mov	r8, r0
 8008ada:	4689      	mov	r9, r1
 8008adc:	dc2e      	bgt.n	8008b3c <__ieee754_rem_pio2+0x1cc>
 8008ade:	4b6f      	ldr	r3, [pc, #444]	; (8008c9c <__ieee754_rem_pio2+0x32c>)
 8008ae0:	1e6a      	subs	r2, r5, #1
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	459a      	cmp	sl, r3
 8008ae8:	d028      	beq.n	8008b3c <__ieee754_rem_pio2+0x1cc>
 8008aea:	4642      	mov	r2, r8
 8008aec:	464b      	mov	r3, r9
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fb43 	bl	800017c <__aeabi_dsub>
 8008af6:	e9c4 0100 	strd	r0, r1, [r4]
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8008b00:	9302      	str	r3, [sp, #8]
 8008b02:	9a02      	ldr	r2, [sp, #8]
 8008b04:	4653      	mov	r3, sl
 8008b06:	4630      	mov	r0, r6
 8008b08:	4639      	mov	r1, r7
 8008b0a:	f7f7 fb37 	bl	800017c <__aeabi_dsub>
 8008b0e:	4642      	mov	r2, r8
 8008b10:	464b      	mov	r3, r9
 8008b12:	f7f7 fb33 	bl	800017c <__aeabi_dsub>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	f1bb 0f00 	cmp.w	fp, #0
 8008b1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008b22:	f6bf af5b 	bge.w	80089dc <__ieee754_rem_pio2+0x6c>
 8008b26:	9b02      	ldr	r3, [sp, #8]
 8008b28:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008b32:	6063      	str	r3, [r4, #4]
 8008b34:	60a0      	str	r0, [r4, #8]
 8008b36:	60e1      	str	r1, [r4, #12]
 8008b38:	426d      	negs	r5, r5
 8008b3a:	e74f      	b.n	80089dc <__ieee754_rem_pio2+0x6c>
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	464b      	mov	r3, r9
 8008b40:	4630      	mov	r0, r6
 8008b42:	4639      	mov	r1, r7
 8008b44:	f7f7 fb1a 	bl	800017c <__aeabi_dsub>
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008b50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008b54:	ebaa 0101 	sub.w	r1, sl, r1
 8008b58:	2910      	cmp	r1, #16
 8008b5a:	e9c4 2300 	strd	r2, r3, [r4]
 8008b5e:	ddcc      	ble.n	8008afa <__ieee754_rem_pio2+0x18a>
 8008b60:	a33f      	add	r3, pc, #252	; (adr r3, 8008c60 <__ieee754_rem_pio2+0x2f0>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6a:	f7f7 fcbb 	bl	80004e4 <__aeabi_dmul>
 8008b6e:	4680      	mov	r8, r0
 8008b70:	4689      	mov	r9, r1
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4630      	mov	r0, r6
 8008b78:	4639      	mov	r1, r7
 8008b7a:	f7f7 faff 	bl	800017c <__aeabi_dsub>
 8008b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 faf7 	bl	800017c <__aeabi_dsub>
 8008b8e:	4642      	mov	r2, r8
 8008b90:	464b      	mov	r3, r9
 8008b92:	f7f7 faf3 	bl	800017c <__aeabi_dsub>
 8008b96:	a334      	add	r3, pc, #208	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x2f8>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	460f      	mov	r7, r1
 8008ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba4:	f7f7 fc9e 	bl	80004e4 <__aeabi_dmul>
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	f7f7 fae6 	bl	800017c <__aeabi_dsub>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4680      	mov	r8, r0
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bbc:	f7f7 fade 	bl	800017c <__aeabi_dsub>
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008bc8:	ebaa 0a01 	sub.w	sl, sl, r1
 8008bcc:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8008bd0:	e9c4 2300 	strd	r2, r3, [r4]
 8008bd4:	dd2a      	ble.n	8008c2c <__ieee754_rem_pio2+0x2bc>
 8008bd6:	a328      	add	r3, pc, #160	; (adr r3, 8008c78 <__ieee754_rem_pio2+0x308>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be0:	f7f7 fc80 	bl	80004e4 <__aeabi_dmul>
 8008be4:	4680      	mov	r8, r0
 8008be6:	4689      	mov	r9, r1
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bf0:	f7f7 fac4 	bl	800017c <__aeabi_dsub>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	460f      	mov	r7, r1
 8008bfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c00:	f7f7 fabc 	bl	800017c <__aeabi_dsub>
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	f7f7 fab8 	bl	800017c <__aeabi_dsub>
 8008c0c:	a31c      	add	r3, pc, #112	; (adr r3, 8008c80 <__ieee754_rem_pio2+0x310>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	4680      	mov	r8, r0
 8008c14:	4689      	mov	r9, r1
 8008c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1a:	f7f7 fc63 	bl	80004e4 <__aeabi_dmul>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	464b      	mov	r3, r9
 8008c22:	f7f7 faab 	bl	800017c <__aeabi_dsub>
 8008c26:	4680      	mov	r8, r0
 8008c28:	4689      	mov	r9, r1
 8008c2a:	e75e      	b.n	8008aea <__ieee754_rem_pio2+0x17a>
 8008c2c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008c30:	e763      	b.n	8008afa <__ieee754_rem_pio2+0x18a>
 8008c32:	4a1b      	ldr	r2, [pc, #108]	; (8008ca0 <__ieee754_rem_pio2+0x330>)
 8008c34:	4592      	cmp	sl, r2
 8008c36:	dd35      	ble.n	8008ca4 <__ieee754_rem_pio2+0x334>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	f7f7 fa9e 	bl	800017c <__aeabi_dsub>
 8008c40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c44:	e9c4 0100 	strd	r0, r1, [r4]
 8008c48:	e6a2      	b.n	8008990 <__ieee754_rem_pio2+0x20>
 8008c4a:	bf00      	nop
 8008c4c:	f3af 8000 	nop.w
 8008c50:	54400000 	.word	0x54400000
 8008c54:	3ff921fb 	.word	0x3ff921fb
 8008c58:	1a626331 	.word	0x1a626331
 8008c5c:	3dd0b461 	.word	0x3dd0b461
 8008c60:	1a600000 	.word	0x1a600000
 8008c64:	3dd0b461 	.word	0x3dd0b461
 8008c68:	2e037073 	.word	0x2e037073
 8008c6c:	3ba3198a 	.word	0x3ba3198a
 8008c70:	6dc9c883 	.word	0x6dc9c883
 8008c74:	3fe45f30 	.word	0x3fe45f30
 8008c78:	2e000000 	.word	0x2e000000
 8008c7c:	3ba3198a 	.word	0x3ba3198a
 8008c80:	252049c1 	.word	0x252049c1
 8008c84:	397b839a 	.word	0x397b839a
 8008c88:	3fe921fb 	.word	0x3fe921fb
 8008c8c:	4002d97b 	.word	0x4002d97b
 8008c90:	3ff921fb 	.word	0x3ff921fb
 8008c94:	413921fb 	.word	0x413921fb
 8008c98:	3fe00000 	.word	0x3fe00000
 8008c9c:	0800ae2c 	.word	0x0800ae2c
 8008ca0:	7fefffff 	.word	0x7fefffff
 8008ca4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008ca8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008cac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	f7f7 feb0 	bl	8000a18 <__aeabi_d2iz>
 8008cb8:	f7f7 fbae 	bl	8000418 <__aeabi_i2d>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008cc8:	f7f7 fa58 	bl	800017c <__aeabi_dsub>
 8008ccc:	2200      	movs	r2, #0
 8008cce:	4b20      	ldr	r3, [pc, #128]	; (8008d50 <__ieee754_rem_pio2+0x3e0>)
 8008cd0:	f7f7 fc08 	bl	80004e4 <__aeabi_dmul>
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	f7f7 fe9e 	bl	8000a18 <__aeabi_d2iz>
 8008cdc:	f7f7 fb9c 	bl	8000418 <__aeabi_i2d>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008cec:	f7f7 fa46 	bl	800017c <__aeabi_dsub>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4b17      	ldr	r3, [pc, #92]	; (8008d50 <__ieee754_rem_pio2+0x3e0>)
 8008cf4:	f7f7 fbf6 	bl	80004e4 <__aeabi_dmul>
 8008cf8:	f04f 0803 	mov.w	r8, #3
 8008cfc:	2600      	movs	r6, #0
 8008cfe:	2700      	movs	r7, #0
 8008d00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008d08:	4632      	mov	r2, r6
 8008d0a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008d0e:	463b      	mov	r3, r7
 8008d10:	f108 3aff 	add.w	sl, r8, #4294967295
 8008d14:	f7f7 fe4e 	bl	80009b4 <__aeabi_dcmpeq>
 8008d18:	b9b8      	cbnz	r0, 8008d4a <__ieee754_rem_pio2+0x3da>
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <__ieee754_rem_pio2+0x3e4>)
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	2302      	movs	r3, #2
 8008d22:	4621      	mov	r1, r4
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	a806      	add	r0, sp, #24
 8008d28:	4643      	mov	r3, r8
 8008d2a:	f000 f8f3 	bl	8008f14 <__kernel_rem_pio2>
 8008d2e:	f1bb 0f00 	cmp.w	fp, #0
 8008d32:	4605      	mov	r5, r0
 8008d34:	f6bf ae52 	bge.w	80089dc <__ieee754_rem_pio2+0x6c>
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	68e3      	ldr	r3, [r4, #12]
 8008d42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d46:	60e3      	str	r3, [r4, #12]
 8008d48:	e6f6      	b.n	8008b38 <__ieee754_rem_pio2+0x1c8>
 8008d4a:	46d0      	mov	r8, sl
 8008d4c:	e7dc      	b.n	8008d08 <__ieee754_rem_pio2+0x398>
 8008d4e:	bf00      	nop
 8008d50:	41700000 	.word	0x41700000
 8008d54:	0800aeac 	.word	0x0800aeac

08008d58 <__kernel_cos>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008d60:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8008d64:	b085      	sub	sp, #20
 8008d66:	4605      	mov	r5, r0
 8008d68:	460c      	mov	r4, r1
 8008d6a:	4692      	mov	sl, r2
 8008d6c:	469b      	mov	fp, r3
 8008d6e:	da04      	bge.n	8008d7a <__kernel_cos+0x22>
 8008d70:	f7f7 fe52 	bl	8000a18 <__aeabi_d2iz>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f000 80a8 	beq.w	8008eca <__kernel_cos+0x172>
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7f7 fbaf 	bl	80004e4 <__aeabi_dmul>
 8008d86:	a352      	add	r3, pc, #328	; (adr r3, 8008ed0 <__kernel_cos+0x178>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	f7f7 fba8 	bl	80004e4 <__aeabi_dmul>
 8008d94:	a350      	add	r3, pc, #320	; (adr r3, 8008ed8 <__kernel_cos+0x180>)
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	f7f7 f9f1 	bl	8000180 <__adddf3>
 8008d9e:	4642      	mov	r2, r8
 8008da0:	464b      	mov	r3, r9
 8008da2:	f7f7 fb9f 	bl	80004e4 <__aeabi_dmul>
 8008da6:	a34e      	add	r3, pc, #312	; (adr r3, 8008ee0 <__kernel_cos+0x188>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f7f7 f9e6 	bl	800017c <__aeabi_dsub>
 8008db0:	4642      	mov	r2, r8
 8008db2:	464b      	mov	r3, r9
 8008db4:	f7f7 fb96 	bl	80004e4 <__aeabi_dmul>
 8008db8:	a34b      	add	r3, pc, #300	; (adr r3, 8008ee8 <__kernel_cos+0x190>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 f9df 	bl	8000180 <__adddf3>
 8008dc2:	4642      	mov	r2, r8
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	f7f7 fb8d 	bl	80004e4 <__aeabi_dmul>
 8008dca:	a349      	add	r3, pc, #292	; (adr r3, 8008ef0 <__kernel_cos+0x198>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 f9d4 	bl	800017c <__aeabi_dsub>
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	f7f7 fb84 	bl	80004e4 <__aeabi_dmul>
 8008ddc:	a346      	add	r3, pc, #280	; (adr r3, 8008ef8 <__kernel_cos+0x1a0>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 f9cd 	bl	8000180 <__adddf3>
 8008de6:	464b      	mov	r3, r9
 8008de8:	4642      	mov	r2, r8
 8008dea:	f7f7 fb7b 	bl	80004e4 <__aeabi_dmul>
 8008dee:	4b44      	ldr	r3, [pc, #272]	; (8008f00 <__kernel_cos+0x1a8>)
 8008df0:	e9cd 0100 	strd	r0, r1, [sp]
 8008df4:	429f      	cmp	r7, r3
 8008df6:	dc2a      	bgt.n	8008e4e <__kernel_cos+0xf6>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <__kernel_cos+0x1ac>)
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	f7f7 fb70 	bl	80004e4 <__aeabi_dmul>
 8008e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e08:	4606      	mov	r6, r0
 8008e0a:	460f      	mov	r7, r1
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4649      	mov	r1, r9
 8008e10:	f7f7 fb68 	bl	80004e4 <__aeabi_dmul>
 8008e14:	4652      	mov	r2, sl
 8008e16:	4680      	mov	r8, r0
 8008e18:	4689      	mov	r9, r1
 8008e1a:	465b      	mov	r3, fp
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f7f7 fb60 	bl	80004e4 <__aeabi_dmul>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 f9a6 	bl	800017c <__aeabi_dsub>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4630      	mov	r0, r6
 8008e36:	4639      	mov	r1, r7
 8008e38:	f7f7 f9a0 	bl	800017c <__aeabi_dsub>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	2000      	movs	r0, #0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4931      	ldr	r1, [pc, #196]	; (8008f08 <__kernel_cos+0x1b0>)
 8008e44:	f7f7 f99a 	bl	800017c <__aeabi_dsub>
 8008e48:	b005      	add	sp, #20
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	4b2f      	ldr	r3, [pc, #188]	; (8008f0c <__kernel_cos+0x1b4>)
 8008e50:	2000      	movs	r0, #0
 8008e52:	429f      	cmp	r7, r3
 8008e54:	bfdf      	itttt	le
 8008e56:	2200      	movle	r2, #0
 8008e58:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8008e5c:	4616      	movle	r6, r2
 8008e5e:	461f      	movle	r7, r3
 8008e60:	bfc4      	itt	gt
 8008e62:	2600      	movgt	r6, #0
 8008e64:	4f2a      	ldrgt	r7, [pc, #168]	; (8008f10 <__kernel_cos+0x1b8>)
 8008e66:	4632      	mov	r2, r6
 8008e68:	463b      	mov	r3, r7
 8008e6a:	4927      	ldr	r1, [pc, #156]	; (8008f08 <__kernel_cos+0x1b0>)
 8008e6c:	f7f7 f986 	bl	800017c <__aeabi_dsub>
 8008e70:	2200      	movs	r2, #0
 8008e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e76:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <__kernel_cos+0x1ac>)
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	f7f7 fb32 	bl	80004e4 <__aeabi_dmul>
 8008e80:	4632      	mov	r2, r6
 8008e82:	463b      	mov	r3, r7
 8008e84:	f7f7 f97a 	bl	800017c <__aeabi_dsub>
 8008e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fb26 	bl	80004e4 <__aeabi_dmul>
 8008e98:	4652      	mov	r2, sl
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	465b      	mov	r3, fp
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	f7f7 fb1e 	bl	80004e4 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 f964 	bl	800017c <__aeabi_dsub>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f95e 	bl	800017c <__aeabi_dsub>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec8:	e7bc      	b.n	8008e44 <__kernel_cos+0xec>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	490e      	ldr	r1, [pc, #56]	; (8008f08 <__kernel_cos+0x1b0>)
 8008ece:	e7bb      	b.n	8008e48 <__kernel_cos+0xf0>
 8008ed0:	be8838d4 	.word	0xbe8838d4
 8008ed4:	bda8fae9 	.word	0xbda8fae9
 8008ed8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008edc:	3e21ee9e 	.word	0x3e21ee9e
 8008ee0:	809c52ad 	.word	0x809c52ad
 8008ee4:	3e927e4f 	.word	0x3e927e4f
 8008ee8:	19cb1590 	.word	0x19cb1590
 8008eec:	3efa01a0 	.word	0x3efa01a0
 8008ef0:	16c15177 	.word	0x16c15177
 8008ef4:	3f56c16c 	.word	0x3f56c16c
 8008ef8:	5555554c 	.word	0x5555554c
 8008efc:	3fa55555 	.word	0x3fa55555
 8008f00:	3fd33332 	.word	0x3fd33332
 8008f04:	3fe00000 	.word	0x3fe00000
 8008f08:	3ff00000 	.word	0x3ff00000
 8008f0c:	3fe90000 	.word	0x3fe90000
 8008f10:	3fd20000 	.word	0x3fd20000

08008f14 <__kernel_rem_pio2>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008f1c:	9306      	str	r3, [sp, #24]
 8008f1e:	9101      	str	r1, [sp, #4]
 8008f20:	4bc0      	ldr	r3, [pc, #768]	; (8009224 <__kernel_rem_pio2+0x310>)
 8008f22:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008f24:	1ed4      	subs	r4, r2, #3
 8008f26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	9302      	str	r3, [sp, #8]
 8008f2e:	9b06      	ldr	r3, [sp, #24]
 8008f30:	900a      	str	r0, [sp, #40]	; 0x28
 8008f32:	3b01      	subs	r3, #1
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	2318      	movs	r3, #24
 8008f38:	fb94 f4f3 	sdiv	r4, r4, r3
 8008f3c:	f06f 0317 	mvn.w	r3, #23
 8008f40:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008f44:	fb04 3303 	mla	r3, r4, r3, r3
 8008f48:	eb03 0a02 	add.w	sl, r3, r2
 8008f4c:	9a08      	ldr	r2, [sp, #32]
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	1aa7      	subs	r7, r4, r2
 8008f52:	eb03 0802 	add.w	r8, r3, r2
 8008f56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f58:	2200      	movs	r2, #0
 8008f5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f5e:	2300      	movs	r3, #0
 8008f60:	ae20      	add	r6, sp, #128	; 0x80
 8008f62:	4545      	cmp	r5, r8
 8008f64:	dd14      	ble.n	8008f90 <__kernel_rem_pio2+0x7c>
 8008f66:	2600      	movs	r6, #0
 8008f68:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	429e      	cmp	r6, r3
 8008f70:	dc39      	bgt.n	8008fe6 <__kernel_rem_pio2+0xd2>
 8008f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f74:	f04f 0800 	mov.w	r8, #0
 8008f78:	3b08      	subs	r3, #8
 8008f7a:	9304      	str	r3, [sp, #16]
 8008f7c:	9b06      	ldr	r3, [sp, #24]
 8008f7e:	f04f 0900 	mov.w	r9, #0
 8008f82:	199d      	adds	r5, r3, r6
 8008f84:	ab22      	add	r3, sp, #136	; 0x88
 8008f86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8c:	2700      	movs	r7, #0
 8008f8e:	e023      	b.n	8008fd8 <__kernel_rem_pio2+0xc4>
 8008f90:	42ef      	cmn	r7, r5
 8008f92:	d40b      	bmi.n	8008fac <__kernel_rem_pio2+0x98>
 8008f94:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f9c:	f7f7 fa3c 	bl	8000418 <__aeabi_i2d>
 8008fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8008fa8:	3501      	adds	r5, #1
 8008faa:	e7da      	b.n	8008f62 <__kernel_rem_pio2+0x4e>
 8008fac:	4610      	mov	r0, r2
 8008fae:	4619      	mov	r1, r3
 8008fb0:	e7f8      	b.n	8008fa4 <__kernel_rem_pio2+0x90>
 8008fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fb4:	9d04      	ldr	r5, [sp, #16]
 8008fb6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008fba:	9109      	str	r1, [sp, #36]	; 0x24
 8008fbc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008fc0:	9504      	str	r5, [sp, #16]
 8008fc2:	f7f7 fa8f 	bl	80004e4 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4640      	mov	r0, r8
 8008fcc:	4649      	mov	r1, r9
 8008fce:	f7f7 f8d7 	bl	8000180 <__adddf3>
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	4689      	mov	r9, r1
 8008fd6:	3701      	adds	r7, #1
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	429f      	cmp	r7, r3
 8008fdc:	dde9      	ble.n	8008fb2 <__kernel_rem_pio2+0x9e>
 8008fde:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7c2      	b.n	8008f6c <__kernel_rem_pio2+0x58>
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	aa0e      	add	r2, sp, #56	; 0x38
 8008fea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fee:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008ff2:	9f02      	ldr	r7, [sp, #8]
 8008ff4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	ab9a      	add	r3, sp, #616	; 0x268
 8008ffe:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8009002:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009006:	f10b 3bff 	add.w	fp, fp, #4294967295
 800900a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800900e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009012:	9309      	str	r3, [sp, #36]	; 0x24
 8009014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009016:	ab9a      	add	r3, sp, #616	; 0x268
 8009018:	4413      	add	r3, r2
 800901a:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800901e:	1bbb      	subs	r3, r7, r6
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc70      	bgt.n	8009106 <__kernel_rem_pio2+0x1f2>
 8009024:	4652      	mov	r2, sl
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f000 fc09 	bl	8009840 <scalbn>
 800902e:	2200      	movs	r2, #0
 8009030:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009034:	4604      	mov	r4, r0
 8009036:	460d      	mov	r5, r1
 8009038:	f7f7 fa54 	bl	80004e4 <__aeabi_dmul>
 800903c:	f000 fb7c 	bl	8009738 <floor>
 8009040:	2200      	movs	r2, #0
 8009042:	4b79      	ldr	r3, [pc, #484]	; (8009228 <__kernel_rem_pio2+0x314>)
 8009044:	f7f7 fa4e 	bl	80004e4 <__aeabi_dmul>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 f894 	bl	800017c <__aeabi_dsub>
 8009054:	460d      	mov	r5, r1
 8009056:	4604      	mov	r4, r0
 8009058:	f7f7 fcde 	bl	8000a18 <__aeabi_d2iz>
 800905c:	9004      	str	r0, [sp, #16]
 800905e:	f7f7 f9db 	bl	8000418 <__aeabi_i2d>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	f7f7 f887 	bl	800017c <__aeabi_dsub>
 800906e:	f1ba 0f00 	cmp.w	sl, #0
 8009072:	4680      	mov	r8, r0
 8009074:	4689      	mov	r9, r1
 8009076:	dd6b      	ble.n	8009150 <__kernel_rem_pio2+0x23c>
 8009078:	1e7a      	subs	r2, r7, #1
 800907a:	ab0e      	add	r3, sp, #56	; 0x38
 800907c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009080:	f1ca 0118 	rsb	r1, sl, #24
 8009084:	9c04      	ldr	r4, [sp, #16]
 8009086:	fa40 f301 	asr.w	r3, r0, r1
 800908a:	441c      	add	r4, r3
 800908c:	408b      	lsls	r3, r1
 800908e:	1ac0      	subs	r0, r0, r3
 8009090:	ab0e      	add	r3, sp, #56	; 0x38
 8009092:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009096:	f1ca 0317 	rsb	r3, sl, #23
 800909a:	9404      	str	r4, [sp, #16]
 800909c:	fa40 fb03 	asr.w	fp, r0, r3
 80090a0:	f1bb 0f00 	cmp.w	fp, #0
 80090a4:	dd62      	ble.n	800916c <__kernel_rem_pio2+0x258>
 80090a6:	2200      	movs	r2, #0
 80090a8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090ac:	4614      	mov	r4, r2
 80090ae:	9b04      	ldr	r3, [sp, #16]
 80090b0:	3301      	adds	r3, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	4297      	cmp	r7, r2
 80090b6:	f300 8088 	bgt.w	80091ca <__kernel_rem_pio2+0x2b6>
 80090ba:	f1ba 0f00 	cmp.w	sl, #0
 80090be:	dd07      	ble.n	80090d0 <__kernel_rem_pio2+0x1bc>
 80090c0:	f1ba 0f01 	cmp.w	sl, #1
 80090c4:	f000 8095 	beq.w	80091f2 <__kernel_rem_pio2+0x2de>
 80090c8:	f1ba 0f02 	cmp.w	sl, #2
 80090cc:	f000 809b 	beq.w	8009206 <__kernel_rem_pio2+0x2f2>
 80090d0:	f1bb 0f02 	cmp.w	fp, #2
 80090d4:	d14a      	bne.n	800916c <__kernel_rem_pio2+0x258>
 80090d6:	4642      	mov	r2, r8
 80090d8:	464b      	mov	r3, r9
 80090da:	2000      	movs	r0, #0
 80090dc:	4953      	ldr	r1, [pc, #332]	; (800922c <__kernel_rem_pio2+0x318>)
 80090de:	f7f7 f84d 	bl	800017c <__aeabi_dsub>
 80090e2:	4680      	mov	r8, r0
 80090e4:	4689      	mov	r9, r1
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	d040      	beq.n	800916c <__kernel_rem_pio2+0x258>
 80090ea:	4652      	mov	r2, sl
 80090ec:	2000      	movs	r0, #0
 80090ee:	494f      	ldr	r1, [pc, #316]	; (800922c <__kernel_rem_pio2+0x318>)
 80090f0:	f000 fba6 	bl	8009840 <scalbn>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 f83e 	bl	800017c <__aeabi_dsub>
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	e032      	b.n	800916c <__kernel_rem_pio2+0x258>
 8009106:	2200      	movs	r2, #0
 8009108:	4b49      	ldr	r3, [pc, #292]	; (8009230 <__kernel_rem_pio2+0x31c>)
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f9e9 	bl	80004e4 <__aeabi_dmul>
 8009112:	f7f7 fc81 	bl	8000a18 <__aeabi_d2iz>
 8009116:	f7f7 f97f 	bl	8000418 <__aeabi_i2d>
 800911a:	2200      	movs	r2, #0
 800911c:	4b45      	ldr	r3, [pc, #276]	; (8009234 <__kernel_rem_pio2+0x320>)
 800911e:	4604      	mov	r4, r0
 8009120:	460d      	mov	r5, r1
 8009122:	f7f7 f9df 	bl	80004e4 <__aeabi_dmul>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 f825 	bl	800017c <__aeabi_dsub>
 8009132:	f7f7 fc71 	bl	8000a18 <__aeabi_d2iz>
 8009136:	ab0e      	add	r3, sp, #56	; 0x38
 8009138:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800913c:	4629      	mov	r1, r5
 800913e:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009142:	4620      	mov	r0, r4
 8009144:	f7f7 f81c 	bl	8000180 <__adddf3>
 8009148:	3601      	adds	r6, #1
 800914a:	4680      	mov	r8, r0
 800914c:	4689      	mov	r9, r1
 800914e:	e766      	b.n	800901e <__kernel_rem_pio2+0x10a>
 8009150:	d106      	bne.n	8009160 <__kernel_rem_pio2+0x24c>
 8009152:	1e7b      	subs	r3, r7, #1
 8009154:	aa0e      	add	r2, sp, #56	; 0x38
 8009156:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800915a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800915e:	e79f      	b.n	80090a0 <__kernel_rem_pio2+0x18c>
 8009160:	2200      	movs	r2, #0
 8009162:	4b35      	ldr	r3, [pc, #212]	; (8009238 <__kernel_rem_pio2+0x324>)
 8009164:	f7f7 fc44 	bl	80009f0 <__aeabi_dcmpge>
 8009168:	bb60      	cbnz	r0, 80091c4 <__kernel_rem_pio2+0x2b0>
 800916a:	4683      	mov	fp, r0
 800916c:	2200      	movs	r2, #0
 800916e:	2300      	movs	r3, #0
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fc1e 	bl	80009b4 <__aeabi_dcmpeq>
 8009178:	2800      	cmp	r0, #0
 800917a:	f000 80c4 	beq.w	8009306 <__kernel_rem_pio2+0x3f2>
 800917e:	1e7c      	subs	r4, r7, #1
 8009180:	4623      	mov	r3, r4
 8009182:	2200      	movs	r2, #0
 8009184:	9902      	ldr	r1, [sp, #8]
 8009186:	428b      	cmp	r3, r1
 8009188:	da44      	bge.n	8009214 <__kernel_rem_pio2+0x300>
 800918a:	2a00      	cmp	r2, #0
 800918c:	f040 8088 	bne.w	80092a0 <__kernel_rem_pio2+0x38c>
 8009190:	2401      	movs	r4, #1
 8009192:	f06f 0203 	mvn.w	r2, #3
 8009196:	fb02 f304 	mul.w	r3, r2, r4
 800919a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800919c:	58cb      	ldr	r3, [r1, r3]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d03e      	beq.n	8009220 <__kernel_rem_pio2+0x30c>
 80091a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a4:	aa9a      	add	r2, sp, #616	; 0x268
 80091a6:	4413      	add	r3, r2
 80091a8:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	1c7e      	adds	r6, r7, #1
 80091b0:	19dd      	adds	r5, r3, r7
 80091b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80091b6:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80091ba:	443c      	add	r4, r7
 80091bc:	42a6      	cmp	r6, r4
 80091be:	dd3d      	ble.n	800923c <__kernel_rem_pio2+0x328>
 80091c0:	4627      	mov	r7, r4
 80091c2:	e71a      	b.n	8008ffa <__kernel_rem_pio2+0xe6>
 80091c4:	f04f 0b02 	mov.w	fp, #2
 80091c8:	e76d      	b.n	80090a6 <__kernel_rem_pio2+0x192>
 80091ca:	ab0e      	add	r3, sp, #56	; 0x38
 80091cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d0:	b94c      	cbnz	r4, 80091e6 <__kernel_rem_pio2+0x2d2>
 80091d2:	b12b      	cbz	r3, 80091e0 <__kernel_rem_pio2+0x2cc>
 80091d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80091d8:	a80e      	add	r0, sp, #56	; 0x38
 80091da:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80091de:	2301      	movs	r3, #1
 80091e0:	3201      	adds	r2, #1
 80091e2:	461c      	mov	r4, r3
 80091e4:	e766      	b.n	80090b4 <__kernel_rem_pio2+0x1a0>
 80091e6:	1acb      	subs	r3, r1, r3
 80091e8:	a80e      	add	r0, sp, #56	; 0x38
 80091ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80091ee:	4623      	mov	r3, r4
 80091f0:	e7f6      	b.n	80091e0 <__kernel_rem_pio2+0x2cc>
 80091f2:	1e7a      	subs	r2, r7, #1
 80091f4:	ab0e      	add	r3, sp, #56	; 0x38
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80091fe:	a90e      	add	r1, sp, #56	; 0x38
 8009200:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009204:	e764      	b.n	80090d0 <__kernel_rem_pio2+0x1bc>
 8009206:	1e7a      	subs	r2, r7, #1
 8009208:	ab0e      	add	r3, sp, #56	; 0x38
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009212:	e7f4      	b.n	80091fe <__kernel_rem_pio2+0x2ea>
 8009214:	a90e      	add	r1, sp, #56	; 0x38
 8009216:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800921a:	3b01      	subs	r3, #1
 800921c:	430a      	orrs	r2, r1
 800921e:	e7b1      	b.n	8009184 <__kernel_rem_pio2+0x270>
 8009220:	3401      	adds	r4, #1
 8009222:	e7b8      	b.n	8009196 <__kernel_rem_pio2+0x282>
 8009224:	0800aff8 	.word	0x0800aff8
 8009228:	40200000 	.word	0x40200000
 800922c:	3ff00000 	.word	0x3ff00000
 8009230:	3e700000 	.word	0x3e700000
 8009234:	41700000 	.word	0x41700000
 8009238:	3fe00000 	.word	0x3fe00000
 800923c:	f105 0308 	add.w	r3, r5, #8
 8009240:	930b      	str	r3, [sp, #44]	; 0x2c
 8009242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009244:	2700      	movs	r7, #0
 8009246:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800924a:	f7f7 f8e5 	bl	8000418 <__aeabi_i2d>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	f04f 0900 	mov.w	r9, #0
 8009256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009258:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800925c:	3b08      	subs	r3, #8
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	f105 0310 	add.w	r3, r5, #16
 8009264:	9309      	str	r3, [sp, #36]	; 0x24
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	429f      	cmp	r7, r3
 800926a:	dd04      	ble.n	8009276 <__kernel_rem_pio2+0x362>
 800926c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8009270:	3601      	adds	r6, #1
 8009272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009274:	e7a2      	b.n	80091bc <__kernel_rem_pio2+0x2a8>
 8009276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009278:	9d04      	ldr	r5, [sp, #16]
 800927a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800927e:	9109      	str	r1, [sp, #36]	; 0x24
 8009280:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8009284:	9504      	str	r5, [sp, #16]
 8009286:	f7f7 f92d 	bl	80004e4 <__aeabi_dmul>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f6 ff75 	bl	8000180 <__adddf3>
 8009296:	3701      	adds	r7, #1
 8009298:	4680      	mov	r8, r0
 800929a:	4689      	mov	r9, r1
 800929c:	e7e3      	b.n	8009266 <__kernel_rem_pio2+0x352>
 800929e:	3c01      	subs	r4, #1
 80092a0:	ab0e      	add	r3, sp, #56	; 0x38
 80092a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80092a6:	f1aa 0a18 	sub.w	sl, sl, #24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f7      	beq.n	800929e <__kernel_rem_pio2+0x38a>
 80092ae:	4652      	mov	r2, sl
 80092b0:	2000      	movs	r0, #0
 80092b2:	49b5      	ldr	r1, [pc, #724]	; (8009588 <__kernel_rem_pio2+0x674>)
 80092b4:	f000 fac4 	bl	8009840 <scalbn>
 80092b8:	4625      	mov	r5, r4
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	00e3      	lsls	r3, r4, #3
 80092c4:	aa9a      	add	r2, sp, #616	; 0x268
 80092c6:	eb02 0803 	add.w	r8, r2, r3
 80092ca:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8009590 <__kernel_rem_pio2+0x67c>
 80092ce:	9308      	str	r3, [sp, #32]
 80092d0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80092d4:	2d00      	cmp	r5, #0
 80092d6:	da4c      	bge.n	8009372 <__kernel_rem_pio2+0x45e>
 80092d8:	2500      	movs	r5, #0
 80092da:	f104 5800 	add.w	r8, r4, #536870912	; 0x20000000
 80092de:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 80092e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80092e6:	1b63      	subs	r3, r4, r5
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	db71      	blt.n	80093d0 <__kernel_rem_pio2+0x4bc>
 80092ec:	ab72      	add	r3, sp, #456	; 0x1c8
 80092ee:	eba8 0705 	sub.w	r7, r8, r5
 80092f2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009594 <__kernel_rem_pio2+0x680>
 80092fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009302:	2600      	movs	r6, #0
 8009304:	e059      	b.n	80093ba <__kernel_rem_pio2+0x4a6>
 8009306:	f1ca 0200 	rsb	r2, sl, #0
 800930a:	4640      	mov	r0, r8
 800930c:	4649      	mov	r1, r9
 800930e:	f000 fa97 	bl	8009840 <scalbn>
 8009312:	2200      	movs	r2, #0
 8009314:	4b9d      	ldr	r3, [pc, #628]	; (800958c <__kernel_rem_pio2+0x678>)
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	f7f7 fb69 	bl	80009f0 <__aeabi_dcmpge>
 800931e:	b1f8      	cbz	r0, 8009360 <__kernel_rem_pio2+0x44c>
 8009320:	2200      	movs	r2, #0
 8009322:	4b9b      	ldr	r3, [pc, #620]	; (8009590 <__kernel_rem_pio2+0x67c>)
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	f7f7 f8dc 	bl	80004e4 <__aeabi_dmul>
 800932c:	f7f7 fb74 	bl	8000a18 <__aeabi_d2iz>
 8009330:	4606      	mov	r6, r0
 8009332:	f7f7 f871 	bl	8000418 <__aeabi_i2d>
 8009336:	2200      	movs	r2, #0
 8009338:	4b94      	ldr	r3, [pc, #592]	; (800958c <__kernel_rem_pio2+0x678>)
 800933a:	f7f7 f8d3 	bl	80004e4 <__aeabi_dmul>
 800933e:	460b      	mov	r3, r1
 8009340:	4602      	mov	r2, r0
 8009342:	4629      	mov	r1, r5
 8009344:	4620      	mov	r0, r4
 8009346:	f7f6 ff19 	bl	800017c <__aeabi_dsub>
 800934a:	f7f7 fb65 	bl	8000a18 <__aeabi_d2iz>
 800934e:	1c7c      	adds	r4, r7, #1
 8009350:	ab0e      	add	r3, sp, #56	; 0x38
 8009352:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009356:	f10a 0a18 	add.w	sl, sl, #24
 800935a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800935e:	e7a6      	b.n	80092ae <__kernel_rem_pio2+0x39a>
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f7 fb58 	bl	8000a18 <__aeabi_d2iz>
 8009368:	ab0e      	add	r3, sp, #56	; 0x38
 800936a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800936e:	463c      	mov	r4, r7
 8009370:	e79d      	b.n	80092ae <__kernel_rem_pio2+0x39a>
 8009372:	ab0e      	add	r3, sp, #56	; 0x38
 8009374:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009378:	f7f7 f84e 	bl	8000418 <__aeabi_i2d>
 800937c:	4632      	mov	r2, r6
 800937e:	463b      	mov	r3, r7
 8009380:	f7f7 f8b0 	bl	80004e4 <__aeabi_dmul>
 8009384:	464a      	mov	r2, r9
 8009386:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800938a:	4653      	mov	r3, sl
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 f8a8 	bl	80004e4 <__aeabi_dmul>
 8009394:	3d01      	subs	r5, #1
 8009396:	4606      	mov	r6, r0
 8009398:	460f      	mov	r7, r1
 800939a:	e79b      	b.n	80092d4 <__kernel_rem_pio2+0x3c0>
 800939c:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 80093a0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80093a4:	f7f7 f89e 	bl	80004e4 <__aeabi_dmul>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093b0:	f7f6 fee6 	bl	8000180 <__adddf3>
 80093b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093b8:	3601      	adds	r6, #1
 80093ba:	9b02      	ldr	r3, [sp, #8]
 80093bc:	429e      	cmp	r6, r3
 80093be:	dc01      	bgt.n	80093c4 <__kernel_rem_pio2+0x4b0>
 80093c0:	42ae      	cmp	r6, r5
 80093c2:	ddeb      	ble.n	800939c <__kernel_rem_pio2+0x488>
 80093c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093c8:	3501      	adds	r5, #1
 80093ca:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 80093ce:	e78a      	b.n	80092e6 <__kernel_rem_pio2+0x3d2>
 80093d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d86c      	bhi.n	80094b0 <__kernel_rem_pio2+0x59c>
 80093d6:	e8df f003 	tbb	[pc, r3]
 80093da:	2c58      	.short	0x2c58
 80093dc:	022c      	.short	0x022c
 80093de:	9a08      	ldr	r2, [sp, #32]
 80093e0:	ab4a      	add	r3, sp, #296	; 0x128
 80093e2:	189d      	adds	r5, r3, r2
 80093e4:	46aa      	mov	sl, r5
 80093e6:	4626      	mov	r6, r4
 80093e8:	2e00      	cmp	r6, #0
 80093ea:	f300 8088 	bgt.w	80094fe <__kernel_rem_pio2+0x5ea>
 80093ee:	46a2      	mov	sl, r4
 80093f0:	f1ba 0f01 	cmp.w	sl, #1
 80093f4:	f300 80a1 	bgt.w	800953a <__kernel_rem_pio2+0x626>
 80093f8:	2700      	movs	r7, #0
 80093fa:	463e      	mov	r6, r7
 80093fc:	9d08      	ldr	r5, [sp, #32]
 80093fe:	ab4a      	add	r3, sp, #296	; 0x128
 8009400:	3508      	adds	r5, #8
 8009402:	441d      	add	r5, r3
 8009404:	2c01      	cmp	r4, #1
 8009406:	f300 80b5 	bgt.w	8009574 <__kernel_rem_pio2+0x660>
 800940a:	f1bb 0f00 	cmp.w	fp, #0
 800940e:	f040 80c3 	bne.w	8009598 <__kernel_rem_pio2+0x684>
 8009412:	9901      	ldr	r1, [sp, #4]
 8009414:	ab4a      	add	r3, sp, #296	; 0x128
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	e9c1 2300 	strd	r2, r3, [r1]
 800941e:	ab4c      	add	r3, sp, #304	; 0x130
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009428:	463a      	mov	r2, r7
 800942a:	4633      	mov	r3, r6
 800942c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8009430:	e03e      	b.n	80094b0 <__kernel_rem_pio2+0x59c>
 8009432:	f04f 0e00 	mov.w	lr, #0
 8009436:	4626      	mov	r6, r4
 8009438:	4677      	mov	r7, lr
 800943a:	9d08      	ldr	r5, [sp, #32]
 800943c:	ab4a      	add	r3, sp, #296	; 0x128
 800943e:	3508      	adds	r5, #8
 8009440:	441d      	add	r5, r3
 8009442:	2e00      	cmp	r6, #0
 8009444:	da45      	bge.n	80094d2 <__kernel_rem_pio2+0x5be>
 8009446:	f1bb 0f00 	cmp.w	fp, #0
 800944a:	d04c      	beq.n	80094e6 <__kernel_rem_pio2+0x5d2>
 800944c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8009450:	4672      	mov	r2, lr
 8009452:	460b      	mov	r3, r1
 8009454:	9901      	ldr	r1, [sp, #4]
 8009456:	2601      	movs	r6, #1
 8009458:	e9c1 2300 	strd	r2, r3, [r1]
 800945c:	a94a      	add	r1, sp, #296	; 0x128
 800945e:	4672      	mov	r2, lr
 8009460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009464:	463b      	mov	r3, r7
 8009466:	f7f6 fe89 	bl	800017c <__aeabi_dsub>
 800946a:	4686      	mov	lr, r0
 800946c:	460f      	mov	r7, r1
 800946e:	ad4a      	add	r5, sp, #296	; 0x128
 8009470:	42b4      	cmp	r4, r6
 8009472:	da3a      	bge.n	80094ea <__kernel_rem_pio2+0x5d6>
 8009474:	f1bb 0f00 	cmp.w	fp, #0
 8009478:	d001      	beq.n	800947e <__kernel_rem_pio2+0x56a>
 800947a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800947e:	4672      	mov	r2, lr
 8009480:	463b      	mov	r3, r7
 8009482:	9901      	ldr	r1, [sp, #4]
 8009484:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009488:	e012      	b.n	80094b0 <__kernel_rem_pio2+0x59c>
 800948a:	2700      	movs	r7, #0
 800948c:	463d      	mov	r5, r7
 800948e:	9b08      	ldr	r3, [sp, #32]
 8009490:	aa9a      	add	r2, sp, #616	; 0x268
 8009492:	4413      	add	r3, r2
 8009494:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8009498:	2c00      	cmp	r4, #0
 800949a:	da10      	bge.n	80094be <__kernel_rem_pio2+0x5aa>
 800949c:	f1bb 0f00 	cmp.w	fp, #0
 80094a0:	d001      	beq.n	80094a6 <__kernel_rem_pio2+0x592>
 80094a2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80094a6:	463a      	mov	r2, r7
 80094a8:	462b      	mov	r3, r5
 80094aa:	9901      	ldr	r1, [sp, #4]
 80094ac:	e9c1 2300 	strd	r2, r3, [r1]
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	f003 0007 	and.w	r0, r3, #7
 80094b6:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094be:	4638      	mov	r0, r7
 80094c0:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f6 fe5b 	bl	8000180 <__adddf3>
 80094ca:	3c01      	subs	r4, #1
 80094cc:	4607      	mov	r7, r0
 80094ce:	460d      	mov	r5, r1
 80094d0:	e7e2      	b.n	8009498 <__kernel_rem_pio2+0x584>
 80094d2:	4670      	mov	r0, lr
 80094d4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80094d8:	4639      	mov	r1, r7
 80094da:	f7f6 fe51 	bl	8000180 <__adddf3>
 80094de:	3e01      	subs	r6, #1
 80094e0:	4686      	mov	lr, r0
 80094e2:	460f      	mov	r7, r1
 80094e4:	e7ad      	b.n	8009442 <__kernel_rem_pio2+0x52e>
 80094e6:	4639      	mov	r1, r7
 80094e8:	e7b2      	b.n	8009450 <__kernel_rem_pio2+0x53c>
 80094ea:	4670      	mov	r0, lr
 80094ec:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f6 fe45 	bl	8000180 <__adddf3>
 80094f6:	3601      	adds	r6, #1
 80094f8:	4686      	mov	lr, r0
 80094fa:	460f      	mov	r7, r1
 80094fc:	e7b8      	b.n	8009470 <__kernel_rem_pio2+0x55c>
 80094fe:	e9da 2300 	ldrd	r2, r3, [sl]
 8009502:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800950e:	f7f6 fe37 	bl	8000180 <__adddf3>
 8009512:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4640      	mov	r0, r8
 800951c:	4649      	mov	r1, r9
 800951e:	f7f6 fe2d 	bl	800017c <__aeabi_dsub>
 8009522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009526:	f7f6 fe2b 	bl	8000180 <__adddf3>
 800952a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800952e:	e9ca 0100 	strd	r0, r1, [sl]
 8009532:	3e01      	subs	r6, #1
 8009534:	e96a 2302 	strd	r2, r3, [sl, #-8]!
 8009538:	e756      	b.n	80093e8 <__kernel_rem_pio2+0x4d4>
 800953a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800953e:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 8009542:	4630      	mov	r0, r6
 8009544:	4639      	mov	r1, r7
 8009546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800954a:	f7f6 fe19 	bl	8000180 <__adddf3>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4680      	mov	r8, r0
 8009554:	4689      	mov	r9, r1
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7f6 fe0f 	bl	800017c <__aeabi_dsub>
 800955e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009562:	f7f6 fe0d 	bl	8000180 <__adddf3>
 8009566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800956a:	e9c5 0100 	strd	r0, r1, [r5]
 800956e:	e965 8902 	strd	r8, r9, [r5, #-8]!
 8009572:	e73d      	b.n	80093f0 <__kernel_rem_pio2+0x4dc>
 8009574:	4638      	mov	r0, r7
 8009576:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800957a:	4631      	mov	r1, r6
 800957c:	f7f6 fe00 	bl	8000180 <__adddf3>
 8009580:	3c01      	subs	r4, #1
 8009582:	4607      	mov	r7, r0
 8009584:	460e      	mov	r6, r1
 8009586:	e73d      	b.n	8009404 <__kernel_rem_pio2+0x4f0>
 8009588:	3ff00000 	.word	0x3ff00000
 800958c:	41700000 	.word	0x41700000
 8009590:	3e700000 	.word	0x3e700000
 8009594:	0800afb0 	.word	0x0800afb0
 8009598:	9a01      	ldr	r2, [sp, #4]
 800959a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800959c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80095a4:	6117      	str	r7, [r2, #16]
 80095a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095aa:	6053      	str	r3, [r2, #4]
 80095ac:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 80095ae:	6156      	str	r6, [r2, #20]
 80095b0:	6093      	str	r3, [r2, #8]
 80095b2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80095b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095b8:	60d3      	str	r3, [r2, #12]
 80095ba:	e779      	b.n	80094b0 <__kernel_rem_pio2+0x59c>
 80095bc:	0000      	movs	r0, r0
	...

080095c0 <__kernel_sin>:
 80095c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	b086      	sub	sp, #24
 80095c6:	e9cd 2300 	strd	r2, r3, [sp]
 80095ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095d2:	4682      	mov	sl, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80095d8:	da03      	bge.n	80095e2 <__kernel_sin+0x22>
 80095da:	f7f7 fa1d 	bl	8000a18 <__aeabi_d2iz>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d050      	beq.n	8009684 <__kernel_sin+0xc4>
 80095e2:	4652      	mov	r2, sl
 80095e4:	4623      	mov	r3, r4
 80095e6:	4650      	mov	r0, sl
 80095e8:	4621      	mov	r1, r4
 80095ea:	f7f6 ff7b 	bl	80004e4 <__aeabi_dmul>
 80095ee:	4606      	mov	r6, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4650      	mov	r0, sl
 80095f8:	4621      	mov	r1, r4
 80095fa:	f7f6 ff73 	bl	80004e4 <__aeabi_dmul>
 80095fe:	a33e      	add	r3, pc, #248	; (adr r3, 80096f8 <__kernel_sin+0x138>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	f7f6 ff6a 	bl	80004e4 <__aeabi_dmul>
 8009610:	a33b      	add	r3, pc, #236	; (adr r3, 8009700 <__kernel_sin+0x140>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f7f6 fdb1 	bl	800017c <__aeabi_dsub>
 800961a:	4632      	mov	r2, r6
 800961c:	463b      	mov	r3, r7
 800961e:	f7f6 ff61 	bl	80004e4 <__aeabi_dmul>
 8009622:	a339      	add	r3, pc, #228	; (adr r3, 8009708 <__kernel_sin+0x148>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 fdaa 	bl	8000180 <__adddf3>
 800962c:	4632      	mov	r2, r6
 800962e:	463b      	mov	r3, r7
 8009630:	f7f6 ff58 	bl	80004e4 <__aeabi_dmul>
 8009634:	a336      	add	r3, pc, #216	; (adr r3, 8009710 <__kernel_sin+0x150>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f6 fd9f 	bl	800017c <__aeabi_dsub>
 800963e:	4632      	mov	r2, r6
 8009640:	463b      	mov	r3, r7
 8009642:	f7f6 ff4f 	bl	80004e4 <__aeabi_dmul>
 8009646:	a334      	add	r3, pc, #208	; (adr r3, 8009718 <__kernel_sin+0x158>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f7f6 fd98 	bl	8000180 <__adddf3>
 8009650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009654:	b9dd      	cbnz	r5, 800968e <__kernel_sin+0xce>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 ff41 	bl	80004e4 <__aeabi_dmul>
 8009662:	a32f      	add	r3, pc, #188	; (adr r3, 8009720 <__kernel_sin+0x160>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fd88 	bl	800017c <__aeabi_dsub>
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	f7f6 ff38 	bl	80004e4 <__aeabi_dmul>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4650      	mov	r0, sl
 800967a:	4621      	mov	r1, r4
 800967c:	f7f6 fd80 	bl	8000180 <__adddf3>
 8009680:	4682      	mov	sl, r0
 8009682:	460c      	mov	r4, r1
 8009684:	4650      	mov	r0, sl
 8009686:	4621      	mov	r1, r4
 8009688:	b006      	add	sp, #24
 800968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968e:	2200      	movs	r2, #0
 8009690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009694:	4b24      	ldr	r3, [pc, #144]	; (8009728 <__kernel_sin+0x168>)
 8009696:	f7f6 ff25 	bl	80004e4 <__aeabi_dmul>
 800969a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800969e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	f7f6 ff1d 	bl	80004e4 <__aeabi_dmul>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096b2:	f7f6 fd63 	bl	800017c <__aeabi_dsub>
 80096b6:	4632      	mov	r2, r6
 80096b8:	463b      	mov	r3, r7
 80096ba:	f7f6 ff13 	bl	80004e4 <__aeabi_dmul>
 80096be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096c2:	f7f6 fd5b 	bl	800017c <__aeabi_dsub>
 80096c6:	a316      	add	r3, pc, #88	; (adr r3, 8009720 <__kernel_sin+0x160>)
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	4640      	mov	r0, r8
 80096d2:	4649      	mov	r1, r9
 80096d4:	f7f6 ff06 	bl	80004e4 <__aeabi_dmul>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4630      	mov	r0, r6
 80096de:	4639      	mov	r1, r7
 80096e0:	f7f6 fd4e 	bl	8000180 <__adddf3>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4650      	mov	r0, sl
 80096ea:	4621      	mov	r1, r4
 80096ec:	f7f6 fd46 	bl	800017c <__aeabi_dsub>
 80096f0:	e7c6      	b.n	8009680 <__kernel_sin+0xc0>
 80096f2:	bf00      	nop
 80096f4:	f3af 8000 	nop.w
 80096f8:	5acfd57c 	.word	0x5acfd57c
 80096fc:	3de5d93a 	.word	0x3de5d93a
 8009700:	8a2b9ceb 	.word	0x8a2b9ceb
 8009704:	3e5ae5e6 	.word	0x3e5ae5e6
 8009708:	57b1fe7d 	.word	0x57b1fe7d
 800970c:	3ec71de3 	.word	0x3ec71de3
 8009710:	19c161d5 	.word	0x19c161d5
 8009714:	3f2a01a0 	.word	0x3f2a01a0
 8009718:	1110f8a6 	.word	0x1110f8a6
 800971c:	3f811111 	.word	0x3f811111
 8009720:	55555549 	.word	0x55555549
 8009724:	3fc55555 	.word	0x3fc55555
 8009728:	3fe00000 	.word	0x3fe00000

0800972c <fabs>:
 800972c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009730:	4770      	bx	lr
 8009732:	0000      	movs	r0, r0
 8009734:	0000      	movs	r0, r0
	...

08009738 <floor>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009740:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009744:	2e13      	cmp	r6, #19
 8009746:	4607      	mov	r7, r0
 8009748:	460b      	mov	r3, r1
 800974a:	460c      	mov	r4, r1
 800974c:	4605      	mov	r5, r0
 800974e:	dc35      	bgt.n	80097bc <floor+0x84>
 8009750:	2e00      	cmp	r6, #0
 8009752:	da16      	bge.n	8009782 <floor+0x4a>
 8009754:	a336      	add	r3, pc, #216	; (adr r3, 8009830 <floor+0xf8>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 fd11 	bl	8000180 <__adddf3>
 800975e:	2200      	movs	r2, #0
 8009760:	2300      	movs	r3, #0
 8009762:	f7f7 f94f 	bl	8000a04 <__aeabi_dcmpgt>
 8009766:	b148      	cbz	r0, 800977c <floor+0x44>
 8009768:	2c00      	cmp	r4, #0
 800976a:	da5c      	bge.n	8009826 <floor+0xee>
 800976c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009770:	433b      	orrs	r3, r7
 8009772:	4b31      	ldr	r3, [pc, #196]	; (8009838 <floor+0x100>)
 8009774:	f04f 0500 	mov.w	r5, #0
 8009778:	bf18      	it	ne
 800977a:	461c      	movne	r4, r3
 800977c:	4623      	mov	r3, r4
 800977e:	462f      	mov	r7, r5
 8009780:	e027      	b.n	80097d2 <floor+0x9a>
 8009782:	4a2e      	ldr	r2, [pc, #184]	; (800983c <floor+0x104>)
 8009784:	fa42 f806 	asr.w	r8, r2, r6
 8009788:	ea01 0208 	and.w	r2, r1, r8
 800978c:	4302      	orrs	r2, r0
 800978e:	d020      	beq.n	80097d2 <floor+0x9a>
 8009790:	a327      	add	r3, pc, #156	; (adr r3, 8009830 <floor+0xf8>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fcf3 	bl	8000180 <__adddf3>
 800979a:	2200      	movs	r2, #0
 800979c:	2300      	movs	r3, #0
 800979e:	f7f7 f931 	bl	8000a04 <__aeabi_dcmpgt>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0ea      	beq.n	800977c <floor+0x44>
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	bfbe      	ittt	lt
 80097aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80097ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80097b2:	19a4      	addlt	r4, r4, r6
 80097b4:	ea24 0408 	bic.w	r4, r4, r8
 80097b8:	2500      	movs	r5, #0
 80097ba:	e7df      	b.n	800977c <floor+0x44>
 80097bc:	2e33      	cmp	r6, #51	; 0x33
 80097be:	dd0c      	ble.n	80097da <floor+0xa2>
 80097c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097c4:	d105      	bne.n	80097d2 <floor+0x9a>
 80097c6:	460b      	mov	r3, r1
 80097c8:	4602      	mov	r2, r0
 80097ca:	f7f6 fcd9 	bl	8000180 <__adddf3>
 80097ce:	4607      	mov	r7, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4638      	mov	r0, r7
 80097d4:	4619      	mov	r1, r3
 80097d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097da:	f04f 32ff 	mov.w	r2, #4294967295
 80097de:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80097e2:	fa22 f808 	lsr.w	r8, r2, r8
 80097e6:	ea10 0f08 	tst.w	r0, r8
 80097ea:	d0f2      	beq.n	80097d2 <floor+0x9a>
 80097ec:	a310      	add	r3, pc, #64	; (adr r3, 8009830 <floor+0xf8>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fcc5 	bl	8000180 <__adddf3>
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	f7f7 f903 	bl	8000a04 <__aeabi_dcmpgt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d0bc      	beq.n	800977c <floor+0x44>
 8009802:	2c00      	cmp	r4, #0
 8009804:	da02      	bge.n	800980c <floor+0xd4>
 8009806:	2e14      	cmp	r6, #20
 8009808:	d103      	bne.n	8009812 <floor+0xda>
 800980a:	3401      	adds	r4, #1
 800980c:	ea25 0508 	bic.w	r5, r5, r8
 8009810:	e7b4      	b.n	800977c <floor+0x44>
 8009812:	2301      	movs	r3, #1
 8009814:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009818:	fa03 f606 	lsl.w	r6, r3, r6
 800981c:	4435      	add	r5, r6
 800981e:	42af      	cmp	r7, r5
 8009820:	bf88      	it	hi
 8009822:	18e4      	addhi	r4, r4, r3
 8009824:	e7f2      	b.n	800980c <floor+0xd4>
 8009826:	2500      	movs	r5, #0
 8009828:	462c      	mov	r4, r5
 800982a:	e7a7      	b.n	800977c <floor+0x44>
 800982c:	f3af 8000 	nop.w
 8009830:	8800759c 	.word	0x8800759c
 8009834:	7e37e43c 	.word	0x7e37e43c
 8009838:	bff00000 	.word	0xbff00000
 800983c:	000fffff 	.word	0x000fffff

08009840 <scalbn>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	4616      	mov	r6, r2
 8009844:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	460b      	mov	r3, r1
 800984e:	b98a      	cbnz	r2, 8009874 <scalbn+0x34>
 8009850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009854:	4303      	orrs	r3, r0
 8009856:	d035      	beq.n	80098c4 <scalbn+0x84>
 8009858:	2200      	movs	r2, #0
 800985a:	4b2d      	ldr	r3, [pc, #180]	; (8009910 <scalbn+0xd0>)
 800985c:	f7f6 fe42 	bl	80004e4 <__aeabi_dmul>
 8009860:	4a2c      	ldr	r2, [pc, #176]	; (8009914 <scalbn+0xd4>)
 8009862:	4604      	mov	r4, r0
 8009864:	4296      	cmp	r6, r2
 8009866:	460d      	mov	r5, r1
 8009868:	460b      	mov	r3, r1
 800986a:	da0e      	bge.n	800988a <scalbn+0x4a>
 800986c:	a324      	add	r3, pc, #144	; (adr r3, 8009900 <scalbn+0xc0>)
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	e01c      	b.n	80098ae <scalbn+0x6e>
 8009874:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009878:	42ba      	cmp	r2, r7
 800987a:	d109      	bne.n	8009890 <scalbn+0x50>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	f7f6 fc7e 	bl	8000180 <__adddf3>
 8009884:	4604      	mov	r4, r0
 8009886:	460d      	mov	r5, r1
 8009888:	e01c      	b.n	80098c4 <scalbn+0x84>
 800988a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800988e:	3a36      	subs	r2, #54	; 0x36
 8009890:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009894:	4432      	add	r2, r6
 8009896:	428a      	cmp	r2, r1
 8009898:	dd0c      	ble.n	80098b4 <scalbn+0x74>
 800989a:	4622      	mov	r2, r4
 800989c:	462b      	mov	r3, r5
 800989e:	a11a      	add	r1, pc, #104	; (adr r1, 8009908 <scalbn+0xc8>)
 80098a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a4:	f000 f83a 	bl	800991c <copysign>
 80098a8:	a317      	add	r3, pc, #92	; (adr r3, 8009908 <scalbn+0xc8>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fe19 	bl	80004e4 <__aeabi_dmul>
 80098b2:	e7e7      	b.n	8009884 <scalbn+0x44>
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	dd08      	ble.n	80098ca <scalbn+0x8a>
 80098b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ca:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098ce:	da0b      	bge.n	80098e8 <scalbn+0xa8>
 80098d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098d4:	429e      	cmp	r6, r3
 80098d6:	4622      	mov	r2, r4
 80098d8:	462b      	mov	r3, r5
 80098da:	dce0      	bgt.n	800989e <scalbn+0x5e>
 80098dc:	a108      	add	r1, pc, #32	; (adr r1, 8009900 <scalbn+0xc0>)
 80098de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e2:	f000 f81b 	bl	800991c <copysign>
 80098e6:	e7c1      	b.n	800986c <scalbn+0x2c>
 80098e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098ec:	3236      	adds	r2, #54	; 0x36
 80098ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	2200      	movs	r2, #0
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <scalbn+0xd8>)
 80098fe:	e7d6      	b.n	80098ae <scalbn+0x6e>
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	01a56e1f 	.word	0x01a56e1f
 8009908:	8800759c 	.word	0x8800759c
 800990c:	7e37e43c 	.word	0x7e37e43c
 8009910:	43500000 	.word	0x43500000
 8009914:	ffff3cb0 	.word	0xffff3cb0
 8009918:	3c900000 	.word	0x3c900000

0800991c <copysign>:
 800991c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009924:	ea42 0103 	orr.w	r1, r2, r3
 8009928:	4770      	bx	lr
	...

0800992c <__errno>:
 800992c:	4b01      	ldr	r3, [pc, #4]	; (8009934 <__errno+0x8>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	2000000c 	.word	0x2000000c

08009938 <__libc_init_array>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	2500      	movs	r5, #0
 800993c:	4e0c      	ldr	r6, [pc, #48]	; (8009970 <__libc_init_array+0x38>)
 800993e:	4c0d      	ldr	r4, [pc, #52]	; (8009974 <__libc_init_array+0x3c>)
 8009940:	1ba4      	subs	r4, r4, r6
 8009942:	10a4      	asrs	r4, r4, #2
 8009944:	42a5      	cmp	r5, r4
 8009946:	d109      	bne.n	800995c <__libc_init_array+0x24>
 8009948:	f000 fd62 	bl	800a410 <_init>
 800994c:	2500      	movs	r5, #0
 800994e:	4e0a      	ldr	r6, [pc, #40]	; (8009978 <__libc_init_array+0x40>)
 8009950:	4c0a      	ldr	r4, [pc, #40]	; (800997c <__libc_init_array+0x44>)
 8009952:	1ba4      	subs	r4, r4, r6
 8009954:	10a4      	asrs	r4, r4, #2
 8009956:	42a5      	cmp	r5, r4
 8009958:	d105      	bne.n	8009966 <__libc_init_array+0x2e>
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009960:	4798      	blx	r3
 8009962:	3501      	adds	r5, #1
 8009964:	e7ee      	b.n	8009944 <__libc_init_array+0xc>
 8009966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800996a:	4798      	blx	r3
 800996c:	3501      	adds	r5, #1
 800996e:	e7f2      	b.n	8009956 <__libc_init_array+0x1e>
 8009970:	0800b1d8 	.word	0x0800b1d8
 8009974:	0800b1d8 	.word	0x0800b1d8
 8009978:	0800b1d8 	.word	0x0800b1d8
 800997c:	0800b1e0 	.word	0x0800b1e0

08009980 <free>:
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <free+0xc>)
 8009982:	4601      	mov	r1, r0
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	f000 bc1f 	b.w	800a1c8 <_free_r>
 800998a:	bf00      	nop
 800998c:	2000000c 	.word	0x2000000c

08009990 <_malloc_r>:
 8009990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	f101 040b 	add.w	r4, r1, #11
 8009998:	2c16      	cmp	r4, #22
 800999a:	4681      	mov	r9, r0
 800999c:	d907      	bls.n	80099ae <_malloc_r+0x1e>
 800999e:	f034 0407 	bics.w	r4, r4, #7
 80099a2:	d505      	bpl.n	80099b0 <_malloc_r+0x20>
 80099a4:	230c      	movs	r3, #12
 80099a6:	f8c9 3000 	str.w	r3, [r9]
 80099aa:	2600      	movs	r6, #0
 80099ac:	e131      	b.n	8009c12 <_malloc_r+0x282>
 80099ae:	2410      	movs	r4, #16
 80099b0:	428c      	cmp	r4, r1
 80099b2:	d3f7      	bcc.n	80099a4 <_malloc_r+0x14>
 80099b4:	4648      	mov	r0, r9
 80099b6:	f000 fa0b 	bl	8009dd0 <__malloc_lock>
 80099ba:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80099be:	4d9b      	ldr	r5, [pc, #620]	; (8009c2c <_malloc_r+0x29c>)
 80099c0:	d236      	bcs.n	8009a30 <_malloc_r+0xa0>
 80099c2:	f104 0208 	add.w	r2, r4, #8
 80099c6:	442a      	add	r2, r5
 80099c8:	6856      	ldr	r6, [r2, #4]
 80099ca:	f1a2 0108 	sub.w	r1, r2, #8
 80099ce:	428e      	cmp	r6, r1
 80099d0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80099d4:	d102      	bne.n	80099dc <_malloc_r+0x4c>
 80099d6:	68d6      	ldr	r6, [r2, #12]
 80099d8:	42b2      	cmp	r2, r6
 80099da:	d010      	beq.n	80099fe <_malloc_r+0x6e>
 80099dc:	6873      	ldr	r3, [r6, #4]
 80099de:	68f2      	ldr	r2, [r6, #12]
 80099e0:	68b1      	ldr	r1, [r6, #8]
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	60ca      	str	r2, [r1, #12]
 80099e8:	4433      	add	r3, r6
 80099ea:	6091      	str	r1, [r2, #8]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	605a      	str	r2, [r3, #4]
 80099f4:	4648      	mov	r0, r9
 80099f6:	f000 f9f1 	bl	8009ddc <__malloc_unlock>
 80099fa:	3608      	adds	r6, #8
 80099fc:	e109      	b.n	8009c12 <_malloc_r+0x282>
 80099fe:	3302      	adds	r3, #2
 8009a00:	4a8b      	ldr	r2, [pc, #556]	; (8009c30 <_malloc_r+0x2a0>)
 8009a02:	692e      	ldr	r6, [r5, #16]
 8009a04:	4611      	mov	r1, r2
 8009a06:	4296      	cmp	r6, r2
 8009a08:	d06d      	beq.n	8009ae6 <_malloc_r+0x156>
 8009a0a:	6870      	ldr	r0, [r6, #4]
 8009a0c:	f020 0003 	bic.w	r0, r0, #3
 8009a10:	1b07      	subs	r7, r0, r4
 8009a12:	2f0f      	cmp	r7, #15
 8009a14:	dd47      	ble.n	8009aa6 <_malloc_r+0x116>
 8009a16:	1933      	adds	r3, r6, r4
 8009a18:	f044 0401 	orr.w	r4, r4, #1
 8009a1c:	6074      	str	r4, [r6, #4]
 8009a1e:	616b      	str	r3, [r5, #20]
 8009a20:	612b      	str	r3, [r5, #16]
 8009a22:	60da      	str	r2, [r3, #12]
 8009a24:	609a      	str	r2, [r3, #8]
 8009a26:	f047 0201 	orr.w	r2, r7, #1
 8009a2a:	605a      	str	r2, [r3, #4]
 8009a2c:	5037      	str	r7, [r6, r0]
 8009a2e:	e7e1      	b.n	80099f4 <_malloc_r+0x64>
 8009a30:	0a63      	lsrs	r3, r4, #9
 8009a32:	d02a      	beq.n	8009a8a <_malloc_r+0xfa>
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d812      	bhi.n	8009a5e <_malloc_r+0xce>
 8009a38:	09a3      	lsrs	r3, r4, #6
 8009a3a:	3338      	adds	r3, #56	; 0x38
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009a42:	6856      	ldr	r6, [r2, #4]
 8009a44:	f1a2 0008 	sub.w	r0, r2, #8
 8009a48:	4286      	cmp	r6, r0
 8009a4a:	d006      	beq.n	8009a5a <_malloc_r+0xca>
 8009a4c:	6872      	ldr	r2, [r6, #4]
 8009a4e:	f022 0203 	bic.w	r2, r2, #3
 8009a52:	1b11      	subs	r1, r2, r4
 8009a54:	290f      	cmp	r1, #15
 8009a56:	dd1c      	ble.n	8009a92 <_malloc_r+0x102>
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	e7d0      	b.n	8009a00 <_malloc_r+0x70>
 8009a5e:	2b14      	cmp	r3, #20
 8009a60:	d801      	bhi.n	8009a66 <_malloc_r+0xd6>
 8009a62:	335b      	adds	r3, #91	; 0x5b
 8009a64:	e7ea      	b.n	8009a3c <_malloc_r+0xac>
 8009a66:	2b54      	cmp	r3, #84	; 0x54
 8009a68:	d802      	bhi.n	8009a70 <_malloc_r+0xe0>
 8009a6a:	0b23      	lsrs	r3, r4, #12
 8009a6c:	336e      	adds	r3, #110	; 0x6e
 8009a6e:	e7e5      	b.n	8009a3c <_malloc_r+0xac>
 8009a70:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009a74:	d802      	bhi.n	8009a7c <_malloc_r+0xec>
 8009a76:	0be3      	lsrs	r3, r4, #15
 8009a78:	3377      	adds	r3, #119	; 0x77
 8009a7a:	e7df      	b.n	8009a3c <_malloc_r+0xac>
 8009a7c:	f240 5254 	movw	r2, #1364	; 0x554
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d804      	bhi.n	8009a8e <_malloc_r+0xfe>
 8009a84:	0ca3      	lsrs	r3, r4, #18
 8009a86:	337c      	adds	r3, #124	; 0x7c
 8009a88:	e7d8      	b.n	8009a3c <_malloc_r+0xac>
 8009a8a:	233f      	movs	r3, #63	; 0x3f
 8009a8c:	e7d6      	b.n	8009a3c <_malloc_r+0xac>
 8009a8e:	237e      	movs	r3, #126	; 0x7e
 8009a90:	e7d4      	b.n	8009a3c <_malloc_r+0xac>
 8009a92:	2900      	cmp	r1, #0
 8009a94:	68f1      	ldr	r1, [r6, #12]
 8009a96:	db04      	blt.n	8009aa2 <_malloc_r+0x112>
 8009a98:	68b3      	ldr	r3, [r6, #8]
 8009a9a:	60d9      	str	r1, [r3, #12]
 8009a9c:	608b      	str	r3, [r1, #8]
 8009a9e:	18b3      	adds	r3, r6, r2
 8009aa0:	e7a4      	b.n	80099ec <_malloc_r+0x5c>
 8009aa2:	460e      	mov	r6, r1
 8009aa4:	e7d0      	b.n	8009a48 <_malloc_r+0xb8>
 8009aa6:	2f00      	cmp	r7, #0
 8009aa8:	616a      	str	r2, [r5, #20]
 8009aaa:	612a      	str	r2, [r5, #16]
 8009aac:	db05      	blt.n	8009aba <_malloc_r+0x12a>
 8009aae:	4430      	add	r0, r6
 8009ab0:	6843      	ldr	r3, [r0, #4]
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	6043      	str	r3, [r0, #4]
 8009ab8:	e79c      	b.n	80099f4 <_malloc_r+0x64>
 8009aba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009abe:	d244      	bcs.n	8009b4a <_malloc_r+0x1ba>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	08c0      	lsrs	r0, r0, #3
 8009ac4:	1087      	asrs	r7, r0, #2
 8009ac6:	fa02 f707 	lsl.w	r7, r2, r7
 8009aca:	686a      	ldr	r2, [r5, #4]
 8009acc:	3001      	adds	r0, #1
 8009ace:	433a      	orrs	r2, r7
 8009ad0:	606a      	str	r2, [r5, #4]
 8009ad2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009ad6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009ada:	3a08      	subs	r2, #8
 8009adc:	60f2      	str	r2, [r6, #12]
 8009ade:	60b7      	str	r7, [r6, #8]
 8009ae0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009ae4:	60fe      	str	r6, [r7, #12]
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	109a      	asrs	r2, r3, #2
 8009aea:	fa00 f202 	lsl.w	r2, r0, r2
 8009aee:	6868      	ldr	r0, [r5, #4]
 8009af0:	4282      	cmp	r2, r0
 8009af2:	f200 809f 	bhi.w	8009c34 <_malloc_r+0x2a4>
 8009af6:	4202      	tst	r2, r0
 8009af8:	d106      	bne.n	8009b08 <_malloc_r+0x178>
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	0052      	lsls	r2, r2, #1
 8009b00:	4202      	tst	r2, r0
 8009b02:	f103 0304 	add.w	r3, r3, #4
 8009b06:	d0fa      	beq.n	8009afe <_malloc_r+0x16e>
 8009b08:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009b0c:	46e0      	mov	r8, ip
 8009b0e:	469e      	mov	lr, r3
 8009b10:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009b14:	4546      	cmp	r6, r8
 8009b16:	d153      	bne.n	8009bc0 <_malloc_r+0x230>
 8009b18:	f10e 0e01 	add.w	lr, lr, #1
 8009b1c:	f01e 0f03 	tst.w	lr, #3
 8009b20:	f108 0808 	add.w	r8, r8, #8
 8009b24:	d1f4      	bne.n	8009b10 <_malloc_r+0x180>
 8009b26:	0798      	lsls	r0, r3, #30
 8009b28:	d179      	bne.n	8009c1e <_malloc_r+0x28e>
 8009b2a:	686b      	ldr	r3, [r5, #4]
 8009b2c:	ea23 0302 	bic.w	r3, r3, r2
 8009b30:	606b      	str	r3, [r5, #4]
 8009b32:	6868      	ldr	r0, [r5, #4]
 8009b34:	0052      	lsls	r2, r2, #1
 8009b36:	4282      	cmp	r2, r0
 8009b38:	d87c      	bhi.n	8009c34 <_malloc_r+0x2a4>
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	d07a      	beq.n	8009c34 <_malloc_r+0x2a4>
 8009b3e:	4673      	mov	r3, lr
 8009b40:	4202      	tst	r2, r0
 8009b42:	d1e1      	bne.n	8009b08 <_malloc_r+0x178>
 8009b44:	3304      	adds	r3, #4
 8009b46:	0052      	lsls	r2, r2, #1
 8009b48:	e7fa      	b.n	8009b40 <_malloc_r+0x1b0>
 8009b4a:	0a42      	lsrs	r2, r0, #9
 8009b4c:	2a04      	cmp	r2, #4
 8009b4e:	d815      	bhi.n	8009b7c <_malloc_r+0x1ec>
 8009b50:	0982      	lsrs	r2, r0, #6
 8009b52:	3238      	adds	r2, #56	; 0x38
 8009b54:	1c57      	adds	r7, r2, #1
 8009b56:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009b5a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009b5e:	45be      	cmp	lr, r7
 8009b60:	d126      	bne.n	8009bb0 <_malloc_r+0x220>
 8009b62:	2001      	movs	r0, #1
 8009b64:	1092      	asrs	r2, r2, #2
 8009b66:	fa00 f202 	lsl.w	r2, r0, r2
 8009b6a:	6868      	ldr	r0, [r5, #4]
 8009b6c:	4310      	orrs	r0, r2
 8009b6e:	6068      	str	r0, [r5, #4]
 8009b70:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009b74:	60b7      	str	r7, [r6, #8]
 8009b76:	f8ce 6008 	str.w	r6, [lr, #8]
 8009b7a:	e7b3      	b.n	8009ae4 <_malloc_r+0x154>
 8009b7c:	2a14      	cmp	r2, #20
 8009b7e:	d801      	bhi.n	8009b84 <_malloc_r+0x1f4>
 8009b80:	325b      	adds	r2, #91	; 0x5b
 8009b82:	e7e7      	b.n	8009b54 <_malloc_r+0x1c4>
 8009b84:	2a54      	cmp	r2, #84	; 0x54
 8009b86:	d802      	bhi.n	8009b8e <_malloc_r+0x1fe>
 8009b88:	0b02      	lsrs	r2, r0, #12
 8009b8a:	326e      	adds	r2, #110	; 0x6e
 8009b8c:	e7e2      	b.n	8009b54 <_malloc_r+0x1c4>
 8009b8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009b92:	d802      	bhi.n	8009b9a <_malloc_r+0x20a>
 8009b94:	0bc2      	lsrs	r2, r0, #15
 8009b96:	3277      	adds	r2, #119	; 0x77
 8009b98:	e7dc      	b.n	8009b54 <_malloc_r+0x1c4>
 8009b9a:	f240 5754 	movw	r7, #1364	; 0x554
 8009b9e:	42ba      	cmp	r2, r7
 8009ba0:	bf9a      	itte	ls
 8009ba2:	0c82      	lsrls	r2, r0, #18
 8009ba4:	327c      	addls	r2, #124	; 0x7c
 8009ba6:	227e      	movhi	r2, #126	; 0x7e
 8009ba8:	e7d4      	b.n	8009b54 <_malloc_r+0x1c4>
 8009baa:	68bf      	ldr	r7, [r7, #8]
 8009bac:	45be      	cmp	lr, r7
 8009bae:	d004      	beq.n	8009bba <_malloc_r+0x22a>
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	f022 0203 	bic.w	r2, r2, #3
 8009bb6:	4290      	cmp	r0, r2
 8009bb8:	d3f7      	bcc.n	8009baa <_malloc_r+0x21a>
 8009bba:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009bbe:	e7d7      	b.n	8009b70 <_malloc_r+0x1e0>
 8009bc0:	6870      	ldr	r0, [r6, #4]
 8009bc2:	68f7      	ldr	r7, [r6, #12]
 8009bc4:	f020 0003 	bic.w	r0, r0, #3
 8009bc8:	eba0 0a04 	sub.w	sl, r0, r4
 8009bcc:	f1ba 0f0f 	cmp.w	sl, #15
 8009bd0:	dd10      	ble.n	8009bf4 <_malloc_r+0x264>
 8009bd2:	68b2      	ldr	r2, [r6, #8]
 8009bd4:	1933      	adds	r3, r6, r4
 8009bd6:	f044 0401 	orr.w	r4, r4, #1
 8009bda:	6074      	str	r4, [r6, #4]
 8009bdc:	60d7      	str	r7, [r2, #12]
 8009bde:	60ba      	str	r2, [r7, #8]
 8009be0:	f04a 0201 	orr.w	r2, sl, #1
 8009be4:	616b      	str	r3, [r5, #20]
 8009be6:	612b      	str	r3, [r5, #16]
 8009be8:	60d9      	str	r1, [r3, #12]
 8009bea:	6099      	str	r1, [r3, #8]
 8009bec:	605a      	str	r2, [r3, #4]
 8009bee:	f846 a000 	str.w	sl, [r6, r0]
 8009bf2:	e6ff      	b.n	80099f4 <_malloc_r+0x64>
 8009bf4:	f1ba 0f00 	cmp.w	sl, #0
 8009bf8:	db0f      	blt.n	8009c1a <_malloc_r+0x28a>
 8009bfa:	4430      	add	r0, r6
 8009bfc:	6843      	ldr	r3, [r0, #4]
 8009bfe:	f043 0301 	orr.w	r3, r3, #1
 8009c02:	6043      	str	r3, [r0, #4]
 8009c04:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009c08:	4648      	mov	r0, r9
 8009c0a:	60df      	str	r7, [r3, #12]
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	f000 f8e5 	bl	8009ddc <__malloc_unlock>
 8009c12:	4630      	mov	r0, r6
 8009c14:	b003      	add	sp, #12
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	463e      	mov	r6, r7
 8009c1c:	e77a      	b.n	8009b14 <_malloc_r+0x184>
 8009c1e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009c22:	3b01      	subs	r3, #1
 8009c24:	4584      	cmp	ip, r0
 8009c26:	f43f af7e 	beq.w	8009b26 <_malloc_r+0x196>
 8009c2a:	e782      	b.n	8009b32 <_malloc_r+0x1a2>
 8009c2c:	20000100 	.word	0x20000100
 8009c30:	20000108 	.word	0x20000108
 8009c34:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009c38:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009c3c:	f026 0603 	bic.w	r6, r6, #3
 8009c40:	42b4      	cmp	r4, r6
 8009c42:	d803      	bhi.n	8009c4c <_malloc_r+0x2bc>
 8009c44:	1b33      	subs	r3, r6, r4
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	f300 8095 	bgt.w	8009d76 <_malloc_r+0x3e6>
 8009c4c:	4a4f      	ldr	r2, [pc, #316]	; (8009d8c <_malloc_r+0x3fc>)
 8009c4e:	eb0b 0306 	add.w	r3, fp, r6
 8009c52:	6817      	ldr	r7, [r2, #0]
 8009c54:	4a4e      	ldr	r2, [pc, #312]	; (8009d90 <_malloc_r+0x400>)
 8009c56:	3710      	adds	r7, #16
 8009c58:	6811      	ldr	r1, [r2, #0]
 8009c5a:	4427      	add	r7, r4
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	d005      	beq.n	8009c6c <_malloc_r+0x2dc>
 8009c60:	494c      	ldr	r1, [pc, #304]	; (8009d94 <_malloc_r+0x404>)
 8009c62:	3901      	subs	r1, #1
 8009c64:	440f      	add	r7, r1
 8009c66:	3101      	adds	r1, #1
 8009c68:	4249      	negs	r1, r1
 8009c6a:	400f      	ands	r7, r1
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4648      	mov	r0, r9
 8009c70:	9201      	str	r2, [sp, #4]
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	f000 fa42 	bl	800a0fc <_sbrk_r>
 8009c78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	d055      	beq.n	8009d2c <_malloc_r+0x39c>
 8009c80:	9b00      	ldr	r3, [sp, #0]
 8009c82:	9a01      	ldr	r2, [sp, #4]
 8009c84:	4283      	cmp	r3, r0
 8009c86:	d901      	bls.n	8009c8c <_malloc_r+0x2fc>
 8009c88:	45ab      	cmp	fp, r5
 8009c8a:	d14f      	bne.n	8009d2c <_malloc_r+0x39c>
 8009c8c:	4842      	ldr	r0, [pc, #264]	; (8009d98 <_malloc_r+0x408>)
 8009c8e:	4543      	cmp	r3, r8
 8009c90:	6801      	ldr	r1, [r0, #0]
 8009c92:	4682      	mov	sl, r0
 8009c94:	eb07 0e01 	add.w	lr, r7, r1
 8009c98:	f8c0 e000 	str.w	lr, [r0]
 8009c9c:	493f      	ldr	r1, [pc, #252]	; (8009d9c <_malloc_r+0x40c>)
 8009c9e:	d113      	bne.n	8009cc8 <_malloc_r+0x338>
 8009ca0:	420b      	tst	r3, r1
 8009ca2:	d111      	bne.n	8009cc8 <_malloc_r+0x338>
 8009ca4:	68ab      	ldr	r3, [r5, #8]
 8009ca6:	443e      	add	r6, r7
 8009ca8:	f046 0601 	orr.w	r6, r6, #1
 8009cac:	605e      	str	r6, [r3, #4]
 8009cae:	4a3c      	ldr	r2, [pc, #240]	; (8009da0 <_malloc_r+0x410>)
 8009cb0:	f8da 3000 	ldr.w	r3, [sl]
 8009cb4:	6811      	ldr	r1, [r2, #0]
 8009cb6:	428b      	cmp	r3, r1
 8009cb8:	bf88      	it	hi
 8009cba:	6013      	strhi	r3, [r2, #0]
 8009cbc:	4a39      	ldr	r2, [pc, #228]	; (8009da4 <_malloc_r+0x414>)
 8009cbe:	6811      	ldr	r1, [r2, #0]
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf88      	it	hi
 8009cc4:	6013      	strhi	r3, [r2, #0]
 8009cc6:	e031      	b.n	8009d2c <_malloc_r+0x39c>
 8009cc8:	6810      	ldr	r0, [r2, #0]
 8009cca:	3001      	adds	r0, #1
 8009ccc:	bf1b      	ittet	ne
 8009cce:	eba8 0303 	subne.w	r3, r8, r3
 8009cd2:	4473      	addne	r3, lr
 8009cd4:	f8c2 8000 	streq.w	r8, [r2]
 8009cd8:	f8ca 3000 	strne.w	r3, [sl]
 8009cdc:	f018 0007 	ands.w	r0, r8, #7
 8009ce0:	bf1c      	itt	ne
 8009ce2:	f1c0 0008 	rsbne	r0, r0, #8
 8009ce6:	4480      	addne	r8, r0
 8009ce8:	4b2a      	ldr	r3, [pc, #168]	; (8009d94 <_malloc_r+0x404>)
 8009cea:	4447      	add	r7, r8
 8009cec:	4418      	add	r0, r3
 8009cee:	400f      	ands	r7, r1
 8009cf0:	1bc7      	subs	r7, r0, r7
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	f000 fa01 	bl	800a0fc <_sbrk_r>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	bf04      	itt	eq
 8009cfe:	4640      	moveq	r0, r8
 8009d00:	2700      	moveq	r7, #0
 8009d02:	f8da 3000 	ldr.w	r3, [sl]
 8009d06:	eba0 0008 	sub.w	r0, r0, r8
 8009d0a:	443b      	add	r3, r7
 8009d0c:	4407      	add	r7, r0
 8009d0e:	f047 0701 	orr.w	r7, r7, #1
 8009d12:	45ab      	cmp	fp, r5
 8009d14:	f8c5 8008 	str.w	r8, [r5, #8]
 8009d18:	f8ca 3000 	str.w	r3, [sl]
 8009d1c:	f8c8 7004 	str.w	r7, [r8, #4]
 8009d20:	d0c5      	beq.n	8009cae <_malloc_r+0x31e>
 8009d22:	2e0f      	cmp	r6, #15
 8009d24:	d810      	bhi.n	8009d48 <_malloc_r+0x3b8>
 8009d26:	2301      	movs	r3, #1
 8009d28:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d2c:	68ab      	ldr	r3, [r5, #8]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	f022 0203 	bic.w	r2, r2, #3
 8009d34:	4294      	cmp	r4, r2
 8009d36:	eba2 0304 	sub.w	r3, r2, r4
 8009d3a:	d801      	bhi.n	8009d40 <_malloc_r+0x3b0>
 8009d3c:	2b0f      	cmp	r3, #15
 8009d3e:	dc1a      	bgt.n	8009d76 <_malloc_r+0x3e6>
 8009d40:	4648      	mov	r0, r9
 8009d42:	f000 f84b 	bl	8009ddc <__malloc_unlock>
 8009d46:	e630      	b.n	80099aa <_malloc_r+0x1a>
 8009d48:	2205      	movs	r2, #5
 8009d4a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009d4e:	3e0c      	subs	r6, #12
 8009d50:	f026 0607 	bic.w	r6, r6, #7
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	4333      	orrs	r3, r6
 8009d5a:	f8cb 3004 	str.w	r3, [fp, #4]
 8009d5e:	2e0f      	cmp	r6, #15
 8009d60:	eb0b 0306 	add.w	r3, fp, r6
 8009d64:	605a      	str	r2, [r3, #4]
 8009d66:	609a      	str	r2, [r3, #8]
 8009d68:	d9a1      	bls.n	8009cae <_malloc_r+0x31e>
 8009d6a:	f10b 0108 	add.w	r1, fp, #8
 8009d6e:	4648      	mov	r0, r9
 8009d70:	f000 fa2a 	bl	800a1c8 <_free_r>
 8009d74:	e79b      	b.n	8009cae <_malloc_r+0x31e>
 8009d76:	68ae      	ldr	r6, [r5, #8]
 8009d78:	f044 0201 	orr.w	r2, r4, #1
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	4434      	add	r4, r6
 8009d82:	6072      	str	r2, [r6, #4]
 8009d84:	60ac      	str	r4, [r5, #8]
 8009d86:	6063      	str	r3, [r4, #4]
 8009d88:	e634      	b.n	80099f4 <_malloc_r+0x64>
 8009d8a:	bf00      	nop
 8009d8c:	20002c78 	.word	0x20002c78
 8009d90:	20000508 	.word	0x20000508
 8009d94:	00001000 	.word	0x00001000
 8009d98:	20002c48 	.word	0x20002c48
 8009d9c:	00000fff 	.word	0x00000fff
 8009da0:	20002c70 	.word	0x20002c70
 8009da4:	20002c74 	.word	0x20002c74

08009da8 <memcpy>:
 8009da8:	b510      	push	{r4, lr}
 8009daa:	1e43      	subs	r3, r0, #1
 8009dac:	440a      	add	r2, r1
 8009dae:	4291      	cmp	r1, r2
 8009db0:	d100      	bne.n	8009db4 <memcpy+0xc>
 8009db2:	bd10      	pop	{r4, pc}
 8009db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dbc:	e7f7      	b.n	8009dae <memcpy+0x6>

08009dbe <memset>:
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4402      	add	r2, r0
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d100      	bne.n	8009dc8 <memset+0xa>
 8009dc6:	4770      	bx	lr
 8009dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dcc:	e7f9      	b.n	8009dc2 <memset+0x4>
	...

08009dd0 <__malloc_lock>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__malloc_lock+0x8>)
 8009dd2:	f000 bab5 	b.w	800a340 <__retarget_lock_acquire_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	20002c84 	.word	0x20002c84

08009ddc <__malloc_unlock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__malloc_unlock+0x8>)
 8009dde:	f000 bab0 	b.w	800a342 <__retarget_lock_release_recursive>
 8009de2:	bf00      	nop
 8009de4:	20002c84 	.word	0x20002c84

08009de8 <realloc>:
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <realloc+0xc>)
 8009dea:	460a      	mov	r2, r1
 8009dec:	4601      	mov	r1, r0
 8009dee:	6818      	ldr	r0, [r3, #0]
 8009df0:	f000 b802 	b.w	8009df8 <_realloc_r>
 8009df4:	2000000c 	.word	0x2000000c

08009df8 <_realloc_r>:
 8009df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b929      	cbnz	r1, 8009e0e <_realloc_r+0x16>
 8009e02:	4611      	mov	r1, r2
 8009e04:	b003      	add	sp, #12
 8009e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f7ff bdc1 	b.w	8009990 <_malloc_r>
 8009e0e:	9201      	str	r2, [sp, #4]
 8009e10:	f7ff ffde 	bl	8009dd0 <__malloc_lock>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009e1a:	f102 080b 	add.w	r8, r2, #11
 8009e1e:	f1b8 0f16 	cmp.w	r8, #22
 8009e22:	f1a4 0908 	sub.w	r9, r4, #8
 8009e26:	f025 0603 	bic.w	r6, r5, #3
 8009e2a:	d90a      	bls.n	8009e42 <_realloc_r+0x4a>
 8009e2c:	f038 0807 	bics.w	r8, r8, #7
 8009e30:	d509      	bpl.n	8009e46 <_realloc_r+0x4e>
 8009e32:	230c      	movs	r3, #12
 8009e34:	2700      	movs	r7, #0
 8009e36:	f8ca 3000 	str.w	r3, [sl]
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	b003      	add	sp, #12
 8009e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e42:	f04f 0810 	mov.w	r8, #16
 8009e46:	4590      	cmp	r8, r2
 8009e48:	d3f3      	bcc.n	8009e32 <_realloc_r+0x3a>
 8009e4a:	45b0      	cmp	r8, r6
 8009e4c:	f340 8148 	ble.w	800a0e0 <_realloc_r+0x2e8>
 8009e50:	4ba9      	ldr	r3, [pc, #676]	; (800a0f8 <_realloc_r+0x300>)
 8009e52:	eb09 0106 	add.w	r1, r9, r6
 8009e56:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8009e5a:	469b      	mov	fp, r3
 8009e5c:	4571      	cmp	r1, lr
 8009e5e:	684b      	ldr	r3, [r1, #4]
 8009e60:	d005      	beq.n	8009e6e <_realloc_r+0x76>
 8009e62:	f023 0001 	bic.w	r0, r3, #1
 8009e66:	4408      	add	r0, r1
 8009e68:	6840      	ldr	r0, [r0, #4]
 8009e6a:	07c7      	lsls	r7, r0, #31
 8009e6c:	d447      	bmi.n	8009efe <_realloc_r+0x106>
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	4571      	cmp	r1, lr
 8009e74:	eb06 0703 	add.w	r7, r6, r3
 8009e78:	d119      	bne.n	8009eae <_realloc_r+0xb6>
 8009e7a:	f108 0010 	add.w	r0, r8, #16
 8009e7e:	4287      	cmp	r7, r0
 8009e80:	db3f      	blt.n	8009f02 <_realloc_r+0x10a>
 8009e82:	eba7 0708 	sub.w	r7, r7, r8
 8009e86:	eb09 0308 	add.w	r3, r9, r8
 8009e8a:	f047 0701 	orr.w	r7, r7, #1
 8009e8e:	f8cb 3008 	str.w	r3, [fp, #8]
 8009e92:	605f      	str	r7, [r3, #4]
 8009e94:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009e98:	4650      	mov	r0, sl
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	ea43 0308 	orr.w	r3, r3, r8
 8009ea2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ea6:	f7ff ff99 	bl	8009ddc <__malloc_unlock>
 8009eaa:	4627      	mov	r7, r4
 8009eac:	e7c5      	b.n	8009e3a <_realloc_r+0x42>
 8009eae:	45b8      	cmp	r8, r7
 8009eb0:	dc27      	bgt.n	8009f02 <_realloc_r+0x10a>
 8009eb2:	68cb      	ldr	r3, [r1, #12]
 8009eb4:	688a      	ldr	r2, [r1, #8]
 8009eb6:	60d3      	str	r3, [r2, #12]
 8009eb8:	609a      	str	r2, [r3, #8]
 8009eba:	eba7 0008 	sub.w	r0, r7, r8
 8009ebe:	280f      	cmp	r0, #15
 8009ec0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ec4:	eb09 0207 	add.w	r2, r9, r7
 8009ec8:	f240 810c 	bls.w	800a0e4 <_realloc_r+0x2ec>
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	eb09 0108 	add.w	r1, r9, r8
 8009ed4:	ea43 0308 	orr.w	r3, r3, r8
 8009ed8:	f040 0001 	orr.w	r0, r0, #1
 8009edc:	f8c9 3004 	str.w	r3, [r9, #4]
 8009ee0:	6048      	str	r0, [r1, #4]
 8009ee2:	6853      	ldr	r3, [r2, #4]
 8009ee4:	3108      	adds	r1, #8
 8009ee6:	f043 0301 	orr.w	r3, r3, #1
 8009eea:	6053      	str	r3, [r2, #4]
 8009eec:	4650      	mov	r0, sl
 8009eee:	f000 f96b 	bl	800a1c8 <_free_r>
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	f7ff ff72 	bl	8009ddc <__malloc_unlock>
 8009ef8:	f109 0708 	add.w	r7, r9, #8
 8009efc:	e79d      	b.n	8009e3a <_realloc_r+0x42>
 8009efe:	2300      	movs	r3, #0
 8009f00:	4619      	mov	r1, r3
 8009f02:	07e8      	lsls	r0, r5, #31
 8009f04:	f100 8085 	bmi.w	800a012 <_realloc_r+0x21a>
 8009f08:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009f0c:	eba9 0505 	sub.w	r5, r9, r5
 8009f10:	6868      	ldr	r0, [r5, #4]
 8009f12:	f020 0003 	bic.w	r0, r0, #3
 8009f16:	4430      	add	r0, r6
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	d077      	beq.n	800a00c <_realloc_r+0x214>
 8009f1c:	4571      	cmp	r1, lr
 8009f1e:	d151      	bne.n	8009fc4 <_realloc_r+0x1cc>
 8009f20:	4403      	add	r3, r0
 8009f22:	f108 0110 	add.w	r1, r8, #16
 8009f26:	428b      	cmp	r3, r1
 8009f28:	db70      	blt.n	800a00c <_realloc_r+0x214>
 8009f2a:	462f      	mov	r7, r5
 8009f2c:	68ea      	ldr	r2, [r5, #12]
 8009f2e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009f32:	60ca      	str	r2, [r1, #12]
 8009f34:	6091      	str	r1, [r2, #8]
 8009f36:	1f32      	subs	r2, r6, #4
 8009f38:	2a24      	cmp	r2, #36	; 0x24
 8009f3a:	d83c      	bhi.n	8009fb6 <_realloc_r+0x1be>
 8009f3c:	2a13      	cmp	r2, #19
 8009f3e:	d937      	bls.n	8009fb0 <_realloc_r+0x1b8>
 8009f40:	6821      	ldr	r1, [r4, #0]
 8009f42:	2a1b      	cmp	r2, #27
 8009f44:	60a9      	str	r1, [r5, #8]
 8009f46:	6861      	ldr	r1, [r4, #4]
 8009f48:	60e9      	str	r1, [r5, #12]
 8009f4a:	d81c      	bhi.n	8009f86 <_realloc_r+0x18e>
 8009f4c:	f105 0210 	add.w	r2, r5, #16
 8009f50:	f104 0108 	add.w	r1, r4, #8
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	6010      	str	r0, [r2, #0]
 8009f58:	6848      	ldr	r0, [r1, #4]
 8009f5a:	6050      	str	r0, [r2, #4]
 8009f5c:	6889      	ldr	r1, [r1, #8]
 8009f5e:	6091      	str	r1, [r2, #8]
 8009f60:	eba3 0308 	sub.w	r3, r3, r8
 8009f64:	eb05 0208 	add.w	r2, r5, r8
 8009f68:	f043 0301 	orr.w	r3, r3, #1
 8009f6c:	f8cb 2008 	str.w	r2, [fp, #8]
 8009f70:	6053      	str	r3, [r2, #4]
 8009f72:	686b      	ldr	r3, [r5, #4]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	ea43 0308 	orr.w	r3, r3, r8
 8009f7c:	606b      	str	r3, [r5, #4]
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7ff ff2c 	bl	8009ddc <__malloc_unlock>
 8009f84:	e759      	b.n	8009e3a <_realloc_r+0x42>
 8009f86:	68a1      	ldr	r1, [r4, #8]
 8009f88:	2a24      	cmp	r2, #36	; 0x24
 8009f8a:	6129      	str	r1, [r5, #16]
 8009f8c:	68e1      	ldr	r1, [r4, #12]
 8009f8e:	bf18      	it	ne
 8009f90:	f105 0218 	addne.w	r2, r5, #24
 8009f94:	6169      	str	r1, [r5, #20]
 8009f96:	bf09      	itett	eq
 8009f98:	6922      	ldreq	r2, [r4, #16]
 8009f9a:	f104 0110 	addne.w	r1, r4, #16
 8009f9e:	61aa      	streq	r2, [r5, #24]
 8009fa0:	6960      	ldreq	r0, [r4, #20]
 8009fa2:	bf02      	ittt	eq
 8009fa4:	f105 0220 	addeq.w	r2, r5, #32
 8009fa8:	f104 0118 	addeq.w	r1, r4, #24
 8009fac:	61e8      	streq	r0, [r5, #28]
 8009fae:	e7d1      	b.n	8009f54 <_realloc_r+0x15c>
 8009fb0:	463a      	mov	r2, r7
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	e7ce      	b.n	8009f54 <_realloc_r+0x15c>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4638      	mov	r0, r7
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	f000 f9c2 	bl	800a344 <memmove>
 8009fc0:	9b01      	ldr	r3, [sp, #4]
 8009fc2:	e7cd      	b.n	8009f60 <_realloc_r+0x168>
 8009fc4:	18c7      	adds	r7, r0, r3
 8009fc6:	45b8      	cmp	r8, r7
 8009fc8:	dc20      	bgt.n	800a00c <_realloc_r+0x214>
 8009fca:	68cb      	ldr	r3, [r1, #12]
 8009fcc:	688a      	ldr	r2, [r1, #8]
 8009fce:	60d3      	str	r3, [r2, #12]
 8009fd0:	609a      	str	r2, [r3, #8]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	68eb      	ldr	r3, [r5, #12]
 8009fd6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009fda:	60d3      	str	r3, [r2, #12]
 8009fdc:	609a      	str	r2, [r3, #8]
 8009fde:	1f32      	subs	r2, r6, #4
 8009fe0:	2a24      	cmp	r2, #36	; 0x24
 8009fe2:	d843      	bhi.n	800a06c <_realloc_r+0x274>
 8009fe4:	2a13      	cmp	r2, #19
 8009fe6:	d93f      	bls.n	800a068 <_realloc_r+0x270>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	2a1b      	cmp	r2, #27
 8009fec:	60ab      	str	r3, [r5, #8]
 8009fee:	6863      	ldr	r3, [r4, #4]
 8009ff0:	60eb      	str	r3, [r5, #12]
 8009ff2:	d824      	bhi.n	800a03e <_realloc_r+0x246>
 8009ff4:	f105 0010 	add.w	r0, r5, #16
 8009ff8:	f104 0308 	add.w	r3, r4, #8
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	6002      	str	r2, [r0, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	6042      	str	r2, [r0, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	6083      	str	r3, [r0, #8]
 800a008:	46a9      	mov	r9, r5
 800a00a:	e756      	b.n	8009eba <_realloc_r+0xc2>
 800a00c:	4580      	cmp	r8, r0
 800a00e:	4607      	mov	r7, r0
 800a010:	dddf      	ble.n	8009fd2 <_realloc_r+0x1da>
 800a012:	4611      	mov	r1, r2
 800a014:	4650      	mov	r0, sl
 800a016:	f7ff fcbb 	bl	8009990 <_malloc_r>
 800a01a:	4607      	mov	r7, r0
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d0ae      	beq.n	8009f7e <_realloc_r+0x186>
 800a020:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a024:	f1a0 0208 	sub.w	r2, r0, #8
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	444b      	add	r3, r9
 800a02e:	429a      	cmp	r2, r3
 800a030:	d120      	bne.n	800a074 <_realloc_r+0x27c>
 800a032:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a036:	f027 0703 	bic.w	r7, r7, #3
 800a03a:	4437      	add	r7, r6
 800a03c:	e73d      	b.n	8009eba <_realloc_r+0xc2>
 800a03e:	68a3      	ldr	r3, [r4, #8]
 800a040:	2a24      	cmp	r2, #36	; 0x24
 800a042:	612b      	str	r3, [r5, #16]
 800a044:	68e3      	ldr	r3, [r4, #12]
 800a046:	bf18      	it	ne
 800a048:	f105 0018 	addne.w	r0, r5, #24
 800a04c:	616b      	str	r3, [r5, #20]
 800a04e:	bf09      	itett	eq
 800a050:	6923      	ldreq	r3, [r4, #16]
 800a052:	f104 0310 	addne.w	r3, r4, #16
 800a056:	61ab      	streq	r3, [r5, #24]
 800a058:	6962      	ldreq	r2, [r4, #20]
 800a05a:	bf02      	ittt	eq
 800a05c:	f105 0020 	addeq.w	r0, r5, #32
 800a060:	f104 0318 	addeq.w	r3, r4, #24
 800a064:	61ea      	streq	r2, [r5, #28]
 800a066:	e7c9      	b.n	8009ffc <_realloc_r+0x204>
 800a068:	4623      	mov	r3, r4
 800a06a:	e7c7      	b.n	8009ffc <_realloc_r+0x204>
 800a06c:	4621      	mov	r1, r4
 800a06e:	f000 f969 	bl	800a344 <memmove>
 800a072:	e7c9      	b.n	800a008 <_realloc_r+0x210>
 800a074:	1f32      	subs	r2, r6, #4
 800a076:	2a24      	cmp	r2, #36	; 0x24
 800a078:	d82e      	bhi.n	800a0d8 <_realloc_r+0x2e0>
 800a07a:	2a13      	cmp	r2, #19
 800a07c:	d929      	bls.n	800a0d2 <_realloc_r+0x2da>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	2a1b      	cmp	r2, #27
 800a082:	6003      	str	r3, [r0, #0]
 800a084:	6863      	ldr	r3, [r4, #4]
 800a086:	6043      	str	r3, [r0, #4]
 800a088:	d80e      	bhi.n	800a0a8 <_realloc_r+0x2b0>
 800a08a:	f100 0308 	add.w	r3, r0, #8
 800a08e:	f104 0208 	add.w	r2, r4, #8
 800a092:	6811      	ldr	r1, [r2, #0]
 800a094:	6019      	str	r1, [r3, #0]
 800a096:	6851      	ldr	r1, [r2, #4]
 800a098:	6059      	str	r1, [r3, #4]
 800a09a:	6892      	ldr	r2, [r2, #8]
 800a09c:	609a      	str	r2, [r3, #8]
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4650      	mov	r0, sl
 800a0a2:	f000 f891 	bl	800a1c8 <_free_r>
 800a0a6:	e76a      	b.n	8009f7e <_realloc_r+0x186>
 800a0a8:	68a3      	ldr	r3, [r4, #8]
 800a0aa:	2a24      	cmp	r2, #36	; 0x24
 800a0ac:	6083      	str	r3, [r0, #8]
 800a0ae:	68e3      	ldr	r3, [r4, #12]
 800a0b0:	bf18      	it	ne
 800a0b2:	f104 0210 	addne.w	r2, r4, #16
 800a0b6:	60c3      	str	r3, [r0, #12]
 800a0b8:	bf09      	itett	eq
 800a0ba:	6923      	ldreq	r3, [r4, #16]
 800a0bc:	f100 0310 	addne.w	r3, r0, #16
 800a0c0:	6103      	streq	r3, [r0, #16]
 800a0c2:	6961      	ldreq	r1, [r4, #20]
 800a0c4:	bf02      	ittt	eq
 800a0c6:	f100 0318 	addeq.w	r3, r0, #24
 800a0ca:	f104 0218 	addeq.w	r2, r4, #24
 800a0ce:	6141      	streq	r1, [r0, #20]
 800a0d0:	e7df      	b.n	800a092 <_realloc_r+0x29a>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	e7dc      	b.n	800a092 <_realloc_r+0x29a>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	f000 f933 	bl	800a344 <memmove>
 800a0de:	e7de      	b.n	800a09e <_realloc_r+0x2a6>
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	e6ea      	b.n	8009eba <_realloc_r+0xc2>
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	431f      	orrs	r7, r3
 800a0ea:	f8c9 7004 	str.w	r7, [r9, #4]
 800a0ee:	6853      	ldr	r3, [r2, #4]
 800a0f0:	f043 0301 	orr.w	r3, r3, #1
 800a0f4:	6053      	str	r3, [r2, #4]
 800a0f6:	e6fc      	b.n	8009ef2 <_realloc_r+0xfa>
 800a0f8:	20000100 	.word	0x20000100

0800a0fc <_sbrk_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	2300      	movs	r3, #0
 800a100:	4c05      	ldr	r4, [pc, #20]	; (800a118 <_sbrk_r+0x1c>)
 800a102:	4605      	mov	r5, r0
 800a104:	4608      	mov	r0, r1
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	f7fe fa10 	bl	800852c <_sbrk>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_sbrk_r+0x1a>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	b103      	cbz	r3, 800a116 <_sbrk_r+0x1a>
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	20002c8c 	.word	0x20002c8c

0800a11c <_malloc_trim_r>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	4689      	mov	r9, r1
 800a122:	4f25      	ldr	r7, [pc, #148]	; (800a1b8 <_malloc_trim_r+0x9c>)
 800a124:	4606      	mov	r6, r0
 800a126:	f7ff fe53 	bl	8009dd0 <__malloc_lock>
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a1c4 <_malloc_trim_r+0xa8>
 800a130:	685d      	ldr	r5, [r3, #4]
 800a132:	f1a8 0411 	sub.w	r4, r8, #17
 800a136:	f025 0503 	bic.w	r5, r5, #3
 800a13a:	eba4 0409 	sub.w	r4, r4, r9
 800a13e:	442c      	add	r4, r5
 800a140:	fbb4 f4f8 	udiv	r4, r4, r8
 800a144:	3c01      	subs	r4, #1
 800a146:	fb08 f404 	mul.w	r4, r8, r4
 800a14a:	4544      	cmp	r4, r8
 800a14c:	da05      	bge.n	800a15a <_malloc_trim_r+0x3e>
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff fe44 	bl	8009ddc <__malloc_unlock>
 800a154:	2000      	movs	r0, #0
 800a156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15a:	2100      	movs	r1, #0
 800a15c:	4630      	mov	r0, r6
 800a15e:	f7ff ffcd 	bl	800a0fc <_sbrk_r>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	442b      	add	r3, r5
 800a166:	4298      	cmp	r0, r3
 800a168:	d1f1      	bne.n	800a14e <_malloc_trim_r+0x32>
 800a16a:	4261      	negs	r1, r4
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7ff ffc5 	bl	800a0fc <_sbrk_r>
 800a172:	3001      	adds	r0, #1
 800a174:	d110      	bne.n	800a198 <_malloc_trim_r+0x7c>
 800a176:	2100      	movs	r1, #0
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff ffbf 	bl	800a0fc <_sbrk_r>
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	1a83      	subs	r3, r0, r2
 800a182:	2b0f      	cmp	r3, #15
 800a184:	dde3      	ble.n	800a14e <_malloc_trim_r+0x32>
 800a186:	490d      	ldr	r1, [pc, #52]	; (800a1bc <_malloc_trim_r+0xa0>)
 800a188:	f043 0301 	orr.w	r3, r3, #1
 800a18c:	6809      	ldr	r1, [r1, #0]
 800a18e:	6053      	str	r3, [r2, #4]
 800a190:	1a40      	subs	r0, r0, r1
 800a192:	490b      	ldr	r1, [pc, #44]	; (800a1c0 <_malloc_trim_r+0xa4>)
 800a194:	6008      	str	r0, [r1, #0]
 800a196:	e7da      	b.n	800a14e <_malloc_trim_r+0x32>
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <_malloc_trim_r+0xa4>)
 800a19c:	1b2d      	subs	r5, r5, r4
 800a19e:	f045 0501 	orr.w	r5, r5, #1
 800a1a2:	605d      	str	r5, [r3, #4]
 800a1a4:	6813      	ldr	r3, [r2, #0]
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	1b1c      	subs	r4, r3, r4
 800a1aa:	6014      	str	r4, [r2, #0]
 800a1ac:	f7ff fe16 	bl	8009ddc <__malloc_unlock>
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20000100 	.word	0x20000100
 800a1bc:	20000508 	.word	0x20000508
 800a1c0:	20002c48 	.word	0x20002c48
 800a1c4:	00001000 	.word	0x00001000

0800a1c8 <_free_r>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	4688      	mov	r8, r1
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	f000 80ab 	beq.w	800a32c <_free_r+0x164>
 800a1d6:	f7ff fdfb 	bl	8009dd0 <__malloc_lock>
 800a1da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a1de:	4d54      	ldr	r5, [pc, #336]	; (800a330 <_free_r+0x168>)
 800a1e0:	f022 0001 	bic.w	r0, r2, #1
 800a1e4:	f1a8 0308 	sub.w	r3, r8, #8
 800a1e8:	181f      	adds	r7, r3, r0
 800a1ea:	68a9      	ldr	r1, [r5, #8]
 800a1ec:	687e      	ldr	r6, [r7, #4]
 800a1ee:	428f      	cmp	r7, r1
 800a1f0:	f026 0603 	bic.w	r6, r6, #3
 800a1f4:	f002 0201 	and.w	r2, r2, #1
 800a1f8:	d11b      	bne.n	800a232 <_free_r+0x6a>
 800a1fa:	4430      	add	r0, r6
 800a1fc:	b93a      	cbnz	r2, 800a20e <_free_r+0x46>
 800a1fe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a202:	1a9b      	subs	r3, r3, r2
 800a204:	6899      	ldr	r1, [r3, #8]
 800a206:	4410      	add	r0, r2
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	60ca      	str	r2, [r1, #12]
 800a20c:	6091      	str	r1, [r2, #8]
 800a20e:	f040 0201 	orr.w	r2, r0, #1
 800a212:	605a      	str	r2, [r3, #4]
 800a214:	60ab      	str	r3, [r5, #8]
 800a216:	4b47      	ldr	r3, [pc, #284]	; (800a334 <_free_r+0x16c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4298      	cmp	r0, r3
 800a21c:	d304      	bcc.n	800a228 <_free_r+0x60>
 800a21e:	4b46      	ldr	r3, [pc, #280]	; (800a338 <_free_r+0x170>)
 800a220:	4620      	mov	r0, r4
 800a222:	6819      	ldr	r1, [r3, #0]
 800a224:	f7ff ff7a 	bl	800a11c <_malloc_trim_r>
 800a228:	4620      	mov	r0, r4
 800a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22e:	f7ff bdd5 	b.w	8009ddc <__malloc_unlock>
 800a232:	607e      	str	r6, [r7, #4]
 800a234:	2a00      	cmp	r2, #0
 800a236:	d139      	bne.n	800a2ac <_free_r+0xe4>
 800a238:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a23c:	f105 0e08 	add.w	lr, r5, #8
 800a240:	1a5b      	subs	r3, r3, r1
 800a242:	4408      	add	r0, r1
 800a244:	6899      	ldr	r1, [r3, #8]
 800a246:	4571      	cmp	r1, lr
 800a248:	d032      	beq.n	800a2b0 <_free_r+0xe8>
 800a24a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a24e:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a252:	f8ce 1008 	str.w	r1, [lr, #8]
 800a256:	19b9      	adds	r1, r7, r6
 800a258:	6849      	ldr	r1, [r1, #4]
 800a25a:	07c9      	lsls	r1, r1, #31
 800a25c:	d40a      	bmi.n	800a274 <_free_r+0xac>
 800a25e:	4430      	add	r0, r6
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	bb3a      	cbnz	r2, 800a2b4 <_free_r+0xec>
 800a264:	4e35      	ldr	r6, [pc, #212]	; (800a33c <_free_r+0x174>)
 800a266:	42b1      	cmp	r1, r6
 800a268:	d124      	bne.n	800a2b4 <_free_r+0xec>
 800a26a:	2201      	movs	r2, #1
 800a26c:	616b      	str	r3, [r5, #20]
 800a26e:	612b      	str	r3, [r5, #16]
 800a270:	60d9      	str	r1, [r3, #12]
 800a272:	6099      	str	r1, [r3, #8]
 800a274:	f040 0101 	orr.w	r1, r0, #1
 800a278:	6059      	str	r1, [r3, #4]
 800a27a:	5018      	str	r0, [r3, r0]
 800a27c:	2a00      	cmp	r2, #0
 800a27e:	d1d3      	bne.n	800a228 <_free_r+0x60>
 800a280:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a284:	d21a      	bcs.n	800a2bc <_free_r+0xf4>
 800a286:	2201      	movs	r2, #1
 800a288:	08c0      	lsrs	r0, r0, #3
 800a28a:	1081      	asrs	r1, r0, #2
 800a28c:	408a      	lsls	r2, r1
 800a28e:	6869      	ldr	r1, [r5, #4]
 800a290:	3001      	adds	r0, #1
 800a292:	430a      	orrs	r2, r1
 800a294:	606a      	str	r2, [r5, #4]
 800a296:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a29a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a29e:	3a08      	subs	r2, #8
 800a2a0:	60da      	str	r2, [r3, #12]
 800a2a2:	6099      	str	r1, [r3, #8]
 800a2a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a2a8:	60cb      	str	r3, [r1, #12]
 800a2aa:	e7bd      	b.n	800a228 <_free_r+0x60>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	e7d2      	b.n	800a256 <_free_r+0x8e>
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	e7d0      	b.n	800a256 <_free_r+0x8e>
 800a2b4:	68fe      	ldr	r6, [r7, #12]
 800a2b6:	60ce      	str	r6, [r1, #12]
 800a2b8:	60b1      	str	r1, [r6, #8]
 800a2ba:	e7db      	b.n	800a274 <_free_r+0xac>
 800a2bc:	0a42      	lsrs	r2, r0, #9
 800a2be:	2a04      	cmp	r2, #4
 800a2c0:	d813      	bhi.n	800a2ea <_free_r+0x122>
 800a2c2:	0982      	lsrs	r2, r0, #6
 800a2c4:	3238      	adds	r2, #56	; 0x38
 800a2c6:	1c51      	adds	r1, r2, #1
 800a2c8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a2cc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a2d0:	428e      	cmp	r6, r1
 800a2d2:	d124      	bne.n	800a31e <_free_r+0x156>
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	1092      	asrs	r2, r2, #2
 800a2d8:	fa00 f202 	lsl.w	r2, r0, r2
 800a2dc:	6868      	ldr	r0, [r5, #4]
 800a2de:	4302      	orrs	r2, r0
 800a2e0:	606a      	str	r2, [r5, #4]
 800a2e2:	60de      	str	r6, [r3, #12]
 800a2e4:	6099      	str	r1, [r3, #8]
 800a2e6:	60b3      	str	r3, [r6, #8]
 800a2e8:	e7de      	b.n	800a2a8 <_free_r+0xe0>
 800a2ea:	2a14      	cmp	r2, #20
 800a2ec:	d801      	bhi.n	800a2f2 <_free_r+0x12a>
 800a2ee:	325b      	adds	r2, #91	; 0x5b
 800a2f0:	e7e9      	b.n	800a2c6 <_free_r+0xfe>
 800a2f2:	2a54      	cmp	r2, #84	; 0x54
 800a2f4:	d802      	bhi.n	800a2fc <_free_r+0x134>
 800a2f6:	0b02      	lsrs	r2, r0, #12
 800a2f8:	326e      	adds	r2, #110	; 0x6e
 800a2fa:	e7e4      	b.n	800a2c6 <_free_r+0xfe>
 800a2fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a300:	d802      	bhi.n	800a308 <_free_r+0x140>
 800a302:	0bc2      	lsrs	r2, r0, #15
 800a304:	3277      	adds	r2, #119	; 0x77
 800a306:	e7de      	b.n	800a2c6 <_free_r+0xfe>
 800a308:	f240 5154 	movw	r1, #1364	; 0x554
 800a30c:	428a      	cmp	r2, r1
 800a30e:	bf9a      	itte	ls
 800a310:	0c82      	lsrls	r2, r0, #18
 800a312:	327c      	addls	r2, #124	; 0x7c
 800a314:	227e      	movhi	r2, #126	; 0x7e
 800a316:	e7d6      	b.n	800a2c6 <_free_r+0xfe>
 800a318:	6889      	ldr	r1, [r1, #8]
 800a31a:	428e      	cmp	r6, r1
 800a31c:	d004      	beq.n	800a328 <_free_r+0x160>
 800a31e:	684a      	ldr	r2, [r1, #4]
 800a320:	f022 0203 	bic.w	r2, r2, #3
 800a324:	4290      	cmp	r0, r2
 800a326:	d3f7      	bcc.n	800a318 <_free_r+0x150>
 800a328:	68ce      	ldr	r6, [r1, #12]
 800a32a:	e7da      	b.n	800a2e2 <_free_r+0x11a>
 800a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a330:	20000100 	.word	0x20000100
 800a334:	2000050c 	.word	0x2000050c
 800a338:	20002c78 	.word	0x20002c78
 800a33c:	20000108 	.word	0x20000108

0800a340 <__retarget_lock_acquire_recursive>:
 800a340:	4770      	bx	lr

0800a342 <__retarget_lock_release_recursive>:
 800a342:	4770      	bx	lr

0800a344 <memmove>:
 800a344:	4288      	cmp	r0, r1
 800a346:	b510      	push	{r4, lr}
 800a348:	eb01 0302 	add.w	r3, r1, r2
 800a34c:	d803      	bhi.n	800a356 <memmove+0x12>
 800a34e:	1e42      	subs	r2, r0, #1
 800a350:	4299      	cmp	r1, r3
 800a352:	d10c      	bne.n	800a36e <memmove+0x2a>
 800a354:	bd10      	pop	{r4, pc}
 800a356:	4298      	cmp	r0, r3
 800a358:	d2f9      	bcs.n	800a34e <memmove+0xa>
 800a35a:	1881      	adds	r1, r0, r2
 800a35c:	1ad2      	subs	r2, r2, r3
 800a35e:	42d3      	cmn	r3, r2
 800a360:	d100      	bne.n	800a364 <memmove+0x20>
 800a362:	bd10      	pop	{r4, pc}
 800a364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a368:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a36c:	e7f7      	b.n	800a35e <memmove+0x1a>
 800a36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a372:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a376:	e7eb      	b.n	800a350 <memmove+0xc>

0800a378 <abort>:
 800a378:	b508      	push	{r3, lr}
 800a37a:	2006      	movs	r0, #6
 800a37c:	f000 f82c 	bl	800a3d8 <raise>
 800a380:	2001      	movs	r0, #1
 800a382:	f7fe f8cd 	bl	8008520 <_exit>

0800a386 <_raise_r>:
 800a386:	291f      	cmp	r1, #31
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	460d      	mov	r5, r1
 800a38e:	d904      	bls.n	800a39a <_raise_r+0x14>
 800a390:	2316      	movs	r3, #22
 800a392:	6003      	str	r3, [r0, #0]
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a39c:	b112      	cbz	r2, 800a3a4 <_raise_r+0x1e>
 800a39e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3a2:	b94b      	cbnz	r3, 800a3b8 <_raise_r+0x32>
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 f831 	bl	800a40c <_getpid_r>
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3b4:	f000 b818 	b.w	800a3e8 <_kill_r>
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d00a      	beq.n	800a3d2 <_raise_r+0x4c>
 800a3bc:	1c59      	adds	r1, r3, #1
 800a3be:	d103      	bne.n	800a3c8 <_raise_r+0x42>
 800a3c0:	2316      	movs	r3, #22
 800a3c2:	6003      	str	r3, [r0, #0]
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	2400      	movs	r4, #0
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3d0:	4798      	blx	r3
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a3d8 <raise>:
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <raise+0xc>)
 800a3da:	4601      	mov	r1, r0
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	f7ff bfd2 	b.w	800a386 <_raise_r>
 800a3e2:	bf00      	nop
 800a3e4:	2000000c 	.word	0x2000000c

0800a3e8 <_kill_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4c06      	ldr	r4, [pc, #24]	; (800a408 <_kill_r+0x20>)
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	f7fe f88b 	bl	8008510 <_kill>
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	d102      	bne.n	800a404 <_kill_r+0x1c>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	b103      	cbz	r3, 800a404 <_kill_r+0x1c>
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	bd38      	pop	{r3, r4, r5, pc}
 800a406:	bf00      	nop
 800a408:	20002c8c 	.word	0x20002c8c

0800a40c <_getpid_r>:
 800a40c:	f7fe b87e 	b.w	800850c <_getpid>

0800a410 <_init>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	bf00      	nop
 800a414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a416:	bc08      	pop	{r3}
 800a418:	469e      	mov	lr, r3
 800a41a:	4770      	bx	lr

0800a41c <_fini>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	bf00      	nop
 800a420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a422:	bc08      	pop	{r3}
 800a424:	469e      	mov	lr, r3
 800a426:	4770      	bx	lr
